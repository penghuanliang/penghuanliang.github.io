<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[分享]]></title>
      <url>/2018/09/11/%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h2 id="主题：开心有趣、健康"><a href="#主题：开心有趣、健康" class="headerlink" title="主题：开心有趣、健康"></a>主题：开心有趣、健康</h2><blockquote>
<p>姓名：彭欢亮</p>
<p>时间：201/9/11  星期三    20:23:12</p>
<p>描述：本文素材均来源于网络，非本人出品</p>
</blockquote>
<h3 id="开心一刻"><a href="#开心一刻" class="headerlink" title="开心一刻"></a>开心一刻</h3><p><img src="https://wkretype.bdimg.com/retype/zoom/62dd9ed449649b6648d74759?pn=1&amp;o=jpg_6&amp;md5sum=dda4ffa79db8f29e7496cdecbbaeb155&amp;sign=2900702a47&amp;png=0-124133&amp;jpg=0-98642" alt="img"></p>
<p><img src="https://wkretype.bdimg.com/retype/zoom/62dd9ed449649b6648d74759?pn=2&amp;o=jpg_6&amp;md5sum=dda4ffa79db8f29e7496cdecbbaeb155&amp;sign=2900702a47&amp;png=124134-252462&amp;jpg=98643-204624" alt="img"></p>
<p><img src="https://wkretype.bdimg.com/retype/zoom/76aebd29b4daa58da0114a91?pn=9&amp;o=jpg_6&amp;md5sum=160b778e09b86d3cde27d2040ae3c755&amp;sign=5c8bb270c7&amp;png=1915301-2140769&amp;jpg=1617425-1776043" alt="img"></p>
<p><img src="https://wkretype.bdimg.com/retype/zoom/76aebd29b4daa58da0114a91?pn=20&amp;o=jpg_6&amp;md5sum=160b778e09b86d3cde27d2040ae3c755&amp;sign=5c8bb270c7&amp;png=4074530-4263274&amp;jpg=3496225-3690833" alt="img"></p>
<p><img src="https://wkretype.bdimg.com/retype/zoom/76aebd29b4daa58da0114a91?pn=39&amp;o=jpg_6&amp;md5sum=160b778e09b86d3cde27d2040ae3c755&amp;sign=5c8bb270c7&amp;png=7793779-7978320&amp;jpg=6532962-6780345" alt="img"></p>
<h3 id="来自小学生试卷："><a href="#来自小学生试卷：" class="headerlink" title="来自小学生试卷："></a>来自小学生试卷：</h3><p><img src="https://05.imgmini.eastday.com/mobile/20170108/20170108223020_362997e067d3881b5ec189d9d07acc5d_13.jpeg" alt="img"></p>
<blockquote>
<p>这位同学对饮食健康很有研究嘛！</p>
</blockquote>
<p><img src="https://05.imgmini.eastday.com/mobile/20170108/20170108223020_d47dc2b7bd315f1a250fe1f1f664de49_10.jpeg" alt="img"></p>
<blockquote>
<p>同学你去学画画吧，是块料</p>
</blockquote>
<p><img src="https://05.imgmini.eastday.com/mobile/20170108/20170108223020_362997e067d3881b5ec189d9d07acc5d_12.jpeg" alt="img"></p>
<blockquote>
<p>我只想知道，你爸爸看过后是什么表情</p>
</blockquote>
<p><img src="https://05.imgmini.eastday.com/mobile/20170108/20170108223020_914d120b1b5facaf770b9cffd4855e7a_15.jpeg" alt="img"></p>
<blockquote>
<p>熊孩子出品</p>
</blockquote>
<p><img src="http://img.mp.itc.cn/upload/20161223/1a78d75afd544e75bf8bb78a7c09cfa3_th.jpg" alt="img"></p>
<blockquote>
<p>老师居然给98分，逆天了！</p>
</blockquote>
<h3 id="网络大神PS"><a href="#网络大神PS" class="headerlink" title="网络大神PS"></a>网络大神PS</h3><ul>
<li><strong>求大神P个霸气的坐骑</strong>：</li>
</ul>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=78ca055941ed2e73fce98624b703a16d/f4d576094b36acaf606d7c2177d98d1000e99c1c.jpg" alt="img"></p>
<blockquote>
<p>大神回复：</p>
</blockquote>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=235a6d1648166d223877159c76210945/635a34a85edf8db1bdb296b90223dd54574e740d.jpg" alt="img"></p>
<ul>
<li><strong>求大神整个飘逸的发型</strong></li>
</ul>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=7c515dcbc4fc1e17fdbf8c397a92f67c/8d2b9313b07eca805ac0d33a9a2397dda34483e4.jpg" alt="img"></p>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=0d0a0b15114c510faec4e21250582528/bdb1a61ea8d3fd1fcb7a77e73b4e251f94ca5fb2.jpg" alt="img"></p>
<ul>
<li><strong>求大神把我P成霸气侧漏的样子</strong></li>
</ul>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=0e48a1d99c0a304e5222a0f2e1c9a7c3/17021f30e924b8995a56ace565061d950b7bf644.jpg" alt="img"></p>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=854167a9e0f81a4c2632ecc1e72b6029/0cc0828ba61ea8d3746da1d99c0a304e241f585e.jpg" alt="img"></p>
<ul>
<li><strong>求大神把我P出梦幻的感觉</strong></li>
</ul>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=b9e02cfc798b4710ce2ffdc4f3cfc3b2/b529632762d0f70392ce410103fa513d2797c5ad.jpg" alt="img"></p>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=05a19a015fe736d158138c00ab524ffc/44b39e510fb30f24ff0838dec395d143ac4b0313.jpg" alt="img"></p>
<ul>
<li><strong>帮我P个好看难忘的背景</strong></li>
</ul>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=ac3d61bc42a7d933bfa8e47b9d4ad194/26d390529822720eaf7db9527bcb0a46f31fab8f.jpg" alt="img"></p>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=e1ac9644d100baa1ba2c47b37711b9b1/b10b070828381f3097b5d601a9014c086f06f08a.jpg" alt="img"></p>
<ul>
<li><strong>麻烦帮我在身下放个女朋友</strong></li>
</ul>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=b53829e69e2f07085f052a08d925b865/b8f9a144ad3459828059de3b0cf431adcaef846f.jpg" alt="img"></p>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=aac5099128381f309e198da199004c67/82105982b2b7d0a2381e3f34cbef76094a369a63.jpg" alt="img"></p>
<ul>
<li><strong>把跳起来的那家伙去掉</strong></li>
</ul>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=43dd3e9fd0ca7bcb7d7bc7278e086b3f/df3b3a292df5e0fea8f68e5d5b6034a85fdf72a7.jpg" alt="img"></p>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=3e20e5a67ccb0a4685228b315b62f63e/150d2df5e0fe99258ee26e0c33a85edf8cb171a7.jpg" alt="img"></p>
<ul>
<li><strong>求大神p的更霸气，更帅气</strong></li>
</ul>
<p><img src="https://imgsa.baidu.com/forum/w%3D580/sign=6398c59667224f4a5799731b39f69044/88cbce1b9d16fdfa7e32755ebe8f8c5495ee7bcc.jpg" alt="img"></p>
<h3 id="健康类（饮食类）"><a href="#健康类（饮食类）" class="headerlink" title="健康类（饮食类）"></a>健康类（饮食类）</h3><h4 id="它属于“一级至癌物”，发病率高达90-，每家都无视它还在吃！"><a href="#它属于“一级至癌物”，发病率高达90-，每家都无视它还在吃！" class="headerlink" title="它属于“一级至癌物”，发病率高达90%，每家都无视它还在吃！"></a>它属于“一级至癌物”，发病率高达90%，每家都无视它还在吃！</h4><p><img src="https://qqpublic.qpic.cn/qq_public/0/0-3181226081-4FFBCB8EE8207C677F985BFCF3E788A7/900" alt="img"></p>
<blockquote>
<p>禽“尖翅”，其实指的就是鸡、鸭、鹅等禽类屁股上端长尾羽的部位，它其实是个藏污纳垢的“仓库”。不宜食用。</p>
</blockquote>
<p><img src="https://qqpublic.qpic.cn/qq_public/0/0-2303397430-B97992ECFDBC2426D86B2D837914754A/900" alt="img"></p>
<blockquote>
<p>鸡头，鸡越老，鸡头毒性就越大的说法并不十分准确，但是鸡头不宜食用却是事实。医学专家分析，鸡在啄食中会吃进有害的重金属物，鸡头中含有重金属，所以鸡头还是少吃为好。</p>
<p><strong>十年鸡头胜砒霜</strong></p>
</blockquote>
<p><img src="https://qqpublic.qpic.cn/qq_public/0/0-2238956681-54D9C357A8B852F058E24D3262F088CB/900?tp=webp" alt="img"></p>
<blockquote>
<p>煎炸过焦后，产生致癌物质多环芳烃。咖啡烧焦后，苯并芘会增加20倍。油煎饼、臭豆腐、煎炸芋角、油条等，因多数是使用重复多次的油，高温下会产生致癌物。</p>
<p>多环芳烃：是煤，石油，木材，烟草，有机高分子化合物等有机物不完全燃烧时产生的挥发性碳氢化合物，是重要的环境和食品污染物</p>
</blockquote>
<p><img src="https://qqpublic.qpic.cn/qq_public/0/0-2744834604-569B6A01089A4235091984FA8DBF77F5/900?tp=webp" alt="img"></p>
<blockquote>
<p>黄曲霉素主要存在于霉变的坚果、大米和玉米等，吃这些食物时一定要注意清洗和储存得当。</p>
<p>黄曲霉毒素具有很强的致癌性、致突变性和致畸性。</p>
</blockquote>
<h4 id="不是所有的肉都是可以吃的-这6种肉千万别贪嘴-有剧毒"><a href="#不是所有的肉都是可以吃的-这6种肉千万别贪嘴-有剧毒" class="headerlink" title="不是所有的肉都是可以吃的,这6种肉千万别贪嘴,有剧毒!"></a>不是所有的肉都是可以吃的,这6种肉千万别贪嘴,有剧毒!</h4><blockquote>
<p>肉类虽然好，但不是什么部位的肉都可以吃的，这6种肉大家千万别贪嘴，有剧毒！</p>
</blockquote>
<h5 id="猪脖子肉："><a href="#猪脖子肉：" class="headerlink" title="猪脖子肉："></a>猪脖子肉：</h5><p><img src="https://qqpublic.qpic.cn/qq_public/0/0-2482338119-FF1E08F52F3A82D81EA0CE9FBF404C95/900" alt="img"></p>
<blockquote>
<p>猪脖子肉上会有圆圆的疙瘩，大概有黄豆大小，呈灰色或者暗红色，这样的肉坚决不能食用，因为这大多数是淋巴结或者未摘除的淋巴腺体！当猪发生疾病时，是疾病转移最明显的地方，藏有大量的毒素和病菌！</p>
</blockquote>
<h5 id="鸡屁股肉："><a href="#鸡屁股肉：" class="headerlink" title="鸡屁股肉："></a>鸡屁股肉：</h5><p><img src="https://qqpublic.qpic.cn/qq_public/0/0-2346951575-635220E9CE8215D383430D589DAE471F/900" alt="img"></p>
<blockquote>
<p>鸡屁股肉也是不能吃的，但很多人就好这一口，在鸡屁股的后上方有两种腺体，鸡的成千上万个淋巴都集中在这个地方，除了鸡屁股以外，鸡头也是不建议吃的，我国有句民谚：十年鸡头胜砒霜。虽然鸡身上的这两个部位的肉都很好吃，但大家还是别贪嘴！</p>
</blockquote>
<h5 id="虾："><a href="#虾：" class="headerlink" title="虾："></a>虾：</h5><p><img src="https://qqpublic.qpic.cn/qq_public/0/0-2726168388-3596F4E6E03555FAB534C9F7A94C391B/900?tp=webp" alt="img"></p>
<blockquote>
<p>很多人吃虾的时候连同虾头也一并吃掉了，毕竟已经煮熟了，寄生虫啊等坏的物质都已经消失了，其实不然，虾头中含有虾的胃，心脏、肝脏等器官，很多重金属都储存在虾头里，即使煮熟以后，也依然还在！</p>
</blockquote>
<h5 id="鱼腹中的黑膜："><a href="#鱼腹中的黑膜：" class="headerlink" title="鱼腹中的黑膜："></a>鱼腹中的黑膜：</h5><p><img src="https://qqpublic.qpic.cn/qq_public/0/0-2866471261-C3EFA480D52E5695BE922A9EB6D8EC22/900?tp=webp" alt="img"></p>
<blockquote>
<p>鱼肚子里面的两侧都有一层薄薄的黑色膜衣，很多人都没有注意，直接和鱼肉一同烹饪，一起就吃掉了，其实这层膜衣是腥味，泥土最浓烈的部位，还聚集着一些重金属物质，不建议食用</p>
</blockquote>
<h5 id="羊蹄上有羊悬筋："><a href="#羊蹄上有羊悬筋：" class="headerlink" title="羊蹄上有羊悬筋："></a>羊蹄上有羊悬筋：</h5><p><img src="https://qqpublic.qpic.cn/qq_public/0/0-2499492200-195691A65709A300984849255B2B2145/900?tp=webp" alt="img"></p>
<blockquote>
<p>羊身上也有不能吃的部位，有的羊蹄上有羊“悬筋”， 又称蹄白珠，为圆珠形，串粒状，是羊蹄内发生病变的一种病毒组织。若是误食的话，很容易被感染，我们在吃羊蹄时，一定要看清楚，如果有蹄白珠的话必须摘除。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 开心一刻 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[反射笔记]]></title>
      <url>/2018/04/09/%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="1-反射定义："><a href="#1-反射定义：" class="headerlink" title="1. 反射定义："></a>1. 反射定义：</h3><blockquote>
<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</p>
<p>(总结) 反射就是把java类中的各种成分映射成一个个的Java对象</p>
</blockquote>
<h3 id="2-泛型问题系列：（摘自码农每日一题）"><a href="#2-泛型问题系列：（摘自码农每日一题）" class="headerlink" title="2. 泛型问题系列：（摘自码农每日一题）"></a>2. 泛型问题系列：（摘自码农每日一题）</h3><p><strong>List<object> 与 List 原始类型之间的区别？</object></strong></p>
<p>主要区别有两点。</p>
<ul>
<li>原始类型和带泛型参数类型 <object> 之间的主要区别是在编译时编译器不会对原始类型进行类型安全检查，却会对带参数的类型进行检查，通过使用 Object 作为类型可以告知编译器该方法可以接受任何类型的对象（比如 String 或 Integer）。</object></li>
<li>我们可以把任何带参数的类型传递给原始类型 List，但却不能把 List<string> 传递给接受 List<object> 的方法，因为会产生编译错误。</object></string></li>
</ul>
<p><strong>简单说说 List<object> 与 List&lt;?&gt; 类型之间的区别？</object></strong></p>
<p>List&lt;?&gt; 是一个未知类型的 List，而 List<object> 其实是任意类型的 List，我们可以把 List<string>、List<integer> 赋值给 List&lt;?&gt;，却不能把 List<string> 赋值给 List<object>。譬如：</object></string></integer></string></object></p>
<ol>
<li><code>List&lt;?&gt; listOfAnyType;</code></li>
<li><code>List&lt;Object&gt; listOfObject = new ArrayList&lt;Object&gt;();</code></li>
<li><code>List&lt;String&gt; listOfString = new ArrayList&lt;String&gt;();</code></li>
<li><code>List&lt;Integer&gt; listOfInteger = new ArrayList&lt;Integer&gt;();</code></li>
<li><code>listOfAnyType = listOfString; //legal</code></li>
<li><code>listOfAnyType = listOfInteger; //legal</code></li>
<li><code>listOfObjectType = (List&lt;Object&gt;) listOfString; //compiler error</code></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zwang.april;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.zwang.april.bean.Student;</div><div class="line"><span class="keyword">import</span> com.zwang.april.bean.WorkMan;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * ●●●</span></div><div class="line"><span class="comment"> * 反射的概述:</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，</span></div><div class="line"><span class="comment"> * 都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</span></div><div class="line"><span class="comment"> * 要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * (总结) 反射就是把java类中的各种成分映射成一个个的Java对象</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * ●●●</span></div><div class="line"><span class="comment"> * 深拷贝 与 浅拷贝 : 大部分都是浅拷贝（通过实现Cloneable接口，重写clone()方法，调用super.clone()来实现深拷贝）</span></div><div class="line"><span class="comment"> * 真正的深拷贝：通过实现Serializable 接口并用对象的序列化和反序列化来实现真正的深度克隆做法：（参阅下列的 clone()）</span></div><div class="line"><span class="comment"> * 通过ByteArrayOutputStream ObjectArrayOutputStream write() 再通过ByteArrayInputStream ObjectArrayInputStream read()实现</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * ●●●</span></div><div class="line"><span class="comment"> * 泛型的协变 与 逆变 : 协变---&gt; List&lt;? extends Number&gt; list = new ArrayList&lt;&gt;(); 逆变 ---&gt; List&lt;? super Number&gt; list =new ArrayList&lt;&gt;();</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * 泛型的上边界 与 下边界 : ? extends Number 指定了上边界    ? super Number 指定了下边界</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * description: 练习处</span></div><div class="line"><span class="comment"> * author: phl</span></div><div class="line"><span class="comment"> * date: 2018-04-09 下午 2:06</span></div><div class="line"><span class="comment"> * update:</span></div><div class="line"><span class="comment"> * version: 1.0</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 1 获取类名三种方式：</span></div><div class="line"><span class="comment">     * 1.1 通过对象 getClass()</span></div><div class="line"><span class="comment">     * 1.2 通过对象 .class</span></div><div class="line"><span class="comment">     * 1.3 通过包名全路径 Class.forName(String package)</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1.1 获取类名 (创建一个对象实例，然后通过getClass()方法获取---对象都已经拿到了，反射用处不大)</span></div><div class="line">        Student stu = <span class="keyword">new</span> Student();</div><div class="line">        Class&lt;? extends Student&gt; aClass1 = stu.getClass();</div><div class="line">        System.out.println(aClass1.getName());</div><div class="line"></div><div class="line">        <span class="comment">//1.2 获取类名 (通过 .class --- 需要导入包，依赖性较强)</span></div><div class="line">        Class&lt;Student&gt; aClass2 = Student.class;</div><div class="line">        System.out.println(aClass1 == aClass2);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//1.3 获取类名（通过包名全路径+Class --- 一个字符串就可以，相对于更加优势）</span></div><div class="line">            Class&lt;?&gt; aClass3 = Class.forName(<span class="string">"com.zwang.april.bean.Student"</span>);</div><div class="line">            System.out.println(aClass1 == aClass3);</div><div class="line"></div><div class="line">            Class&lt;?&gt; aClass = Class.forName(<span class="string">"java.util.ArrayList"</span>);</div><div class="line">            System.out.print(aClass.getName());</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 2 通过Class对象获取构造方法，成员变量，成员方法，并访问成员</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * 2.1 通过Class对象获取构造方法</span></div><div class="line"><span class="comment">     * 批量</span></div><div class="line"><span class="comment">     * class.getConstructors() 获取该所有public修饰的Constructor</span></div><div class="line"><span class="comment">     * 单个</span></div><div class="line"><span class="comment">     * class.getConstructor(Class... parameterTypes) 获取指定的public修饰的构造方法</span></div><div class="line"><span class="comment">     * 批量</span></div><div class="line"><span class="comment">     * class.getDeclaredConstructors() 获取所有的Constructor</span></div><div class="line"><span class="comment">     * 单个</span></div><div class="line"><span class="comment">     * class.getDeclaredConstructors(Class... parameterTypes) 获取指定的Constructor</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constructor</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; stuClass = Class.forName(<span class="string">"com.zwang.april.bean.Student"</span>);</div><div class="line">            Constructor&lt;?&gt;[] pubCons = stuClass.getConstructors();</div><div class="line">            <span class="keyword">for</span> (Constructor con : pubCons) &#123;</div><div class="line">                System.out.println(con);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"**********************所有构造方法*********************************"</span>);</div><div class="line"></div><div class="line">            Constructor&lt;?&gt;[] allCons = stuClass.getDeclaredConstructors();</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Constructor con : allCons) &#123;</div><div class="line">                System.out.println(con);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"**********************指定构造方法*********************************"</span>);</div><div class="line"></div><div class="line">            Constructor&lt;?&gt; constructor = stuClass.getDeclaredConstructor(<span class="keyword">int</span>.class);</div><div class="line">            System.out.println(constructor);</div><div class="line"></div><div class="line">            <span class="comment">//不能直接访问非public修饰的构造方法、属性或者方法 否则 Framework Method invoke Explosively</span></div><div class="line">            <span class="comment">//暴力访问: setAccessible（true）忽略掉访问修饰符</span></div><div class="line">            constructor.setAccessible(<span class="keyword">true</span>);</div><div class="line">            <span class="comment">//Uses the constructor represented by this &#123;@code Constructor&#125; object to</span></div><div class="line">            <span class="comment">//create and initialize a new instance of the constructor's declaring class</span></div><div class="line">            Object instance = constructor.newInstance(<span class="number">1</span>);</div><div class="line">            System.out.println(instance);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 2.2 访问成员变量并调用</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * 批量</span></div><div class="line"><span class="comment">     * class.getFields() 访问所有public修饰的字段</span></div><div class="line"><span class="comment">     * class.getDeclaredFields() 访问所有字段</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * 单个</span></div><div class="line"><span class="comment">     * class.getField(String name) 访问一个指定public修饰的字段</span></div><div class="line"><span class="comment">     * class.getDeclaredField(String name) 访问所有的字段</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * 举例：获取某个public修饰的字段 并调用</span></div><div class="line"><span class="comment">     * (1) Class&lt;?&gt; wClass = Class.forName(); 先获取class对象</span></div><div class="line"><span class="comment">     * (2) Field f = wClass.getField("name"); 通过getField(String name) 获取public修饰的字段</span></div><div class="line"><span class="comment">     * (3) Object obj = wClass.getConstructor().newInstance(); 通过构造函数初始化该对象</span></div><div class="line"><span class="comment">     * (4) f.set(obj,"刘德华"); Field.set(Object obj, Object value); Object ---&gt; 修改字段的对象 value ---&gt; 修改改参数的值(若为private修饰，需要添加访问权限)</span></div><div class="line"><span class="comment">     * (5) WorkMan man = (WorkMan)obj;</span></div><div class="line"><span class="comment">     * (6) 打印man</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessField</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; workClass = Class.forName(<span class="string">"com.zwang.april.bean.WorkMan"</span>);</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"****************访问所有public字段****************"</span>);</div><div class="line">            Field[] pubFields = workClass.getFields();</div><div class="line">            <span class="keyword">for</span> (Field f : pubFields) &#123;</div><div class="line">                System.out.println(f);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"****************访问所有字段（包括private、protect、默认）****************"</span>);</div><div class="line">            Field[] allFields = workClass.getDeclaredFields();</div><div class="line">            <span class="keyword">for</span> (Field f : allFields) &#123;</div><div class="line">                System.out.println(f);</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            Field name = workClass.getDeclaredField(<span class="string">"sex"</span>);</div><div class="line">            System.out.println(name);</div><div class="line"></div><div class="line">            <span class="comment">//实例化一个对象</span></div><div class="line">            Object obj = workClass.getConstructor().newInstance();</div><div class="line">            <span class="comment">//添加字段访问权限</span></div><div class="line">            name.setAccessible(<span class="keyword">true</span>);</div><div class="line">            <span class="comment">//为字段设置值</span></div><div class="line">            name.set(obj, <span class="string">'男'</span>);</div><div class="line">            WorkMan workMan = (WorkMan) obj;</div><div class="line">            System.out.println(workMan);</div><div class="line"></div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchFieldException | IllegalAccessException | InvocationTargetException | InstantiationException | NoSuchMethodException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 2.3 获取成员方法并调用</span></div><div class="line"><span class="comment">     * 批量</span></div><div class="line"><span class="comment">     * class.getMethods()</span></div><div class="line"><span class="comment">     * class.getDeclaredMethods()</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * 单个</span></div><div class="line"><span class="comment">     * class.getMethod(String name, Class&lt;?&gt;... parameterTypes)  name ---&gt; 方法名   parameterTypes ---&gt;方法中的参数</span></div><div class="line"><span class="comment">     * class.getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)  name ---&gt; 方法名   parameterTypes ---&gt;方法中的参数</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * 调用方法</span></div><div class="line"><span class="comment">     * ① Class&lt;?&gt; tClass = Class.forName("com.zwang.april.bean.Teacher"); 获取Class对象</span></div><div class="line"><span class="comment">     * ② Method method = tClass.getDeclaredMethod("show4",int.class);  获取相应的方法</span></div><div class="line"><span class="comment">     * ③ Object obj = tClass.getConstructor().newInstance();  通过构造函数进行实例化，生成Class 对象</span></div><div class="line"><span class="comment">     * ④ method.setAccessible(true);   私有方法需要添加访问权限</span></div><div class="line"><span class="comment">     * ⑤ Object objectResult = method.invoke(Object obj, Object... args);  obj ---&gt; 实例 ，args ---&gt; 传入相应的参数</span></div><div class="line"><span class="comment">     * 打印</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; tClass = Class.forName(<span class="string">"com.zwang.april.bean.Teacher"</span>);</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"*****************获取所有public修饰的方法*****************"</span>);</div><div class="line">            Method[] pubMethod = tClass.getMethods();</div><div class="line">            <span class="keyword">for</span> (Method m : pubMethod) &#123;</div><div class="line">                System.out.println(m);</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"*****************获取指定public修饰的方法*****************"</span>);</div><div class="line">            Method show1 = tClass.getMethod(<span class="string">"show1"</span>, String.class);</div><div class="line">            System.out.println(show1);</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"*****************获取所有方法*****************"</span>);</div><div class="line">            Method[] allMethod = tClass.getDeclaredMethods();</div><div class="line">            <span class="keyword">for</span> (Method m : allMethod) &#123;</div><div class="line">                System.out.println(m);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"*****************获取指定private修饰的方法*****************"</span>);</div><div class="line">            Method show4 = tClass.getDeclaredMethod(<span class="string">"show4"</span>, <span class="keyword">int</span>.class);</div><div class="line">            System.out.println(show4);</div><div class="line"></div><div class="line">            <span class="comment">//调用</span></div><div class="line">            Object obj = tClass.getConstructor().newInstance();</div><div class="line">            <span class="comment">//允许访问</span></div><div class="line">            show4.setAccessible(<span class="keyword">true</span>);</div><div class="line">            Object result = show4.invoke(obj, <span class="number">15</span>);</div><div class="line">            System.out.println(result);</div><div class="line"></div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 2.4 反射main方法</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * ┞ Class&lt;?&gt; mClass = Class.forName("com.zwang.april.bean.StaticMethod"); 获取类名</span></div><div class="line"><span class="comment">     * ┞ Method mMethod = mClass.getMethod("main", String[].class); 获取main()</span></div><div class="line"><span class="comment">     * ┞ 因为是静态方法，所以不需要对象调用，可以直接传入null值</span></div><div class="line"><span class="comment">     * ┞ mMethod.invoke(null,new Object[]&#123;new String[]&#123;"1","2","3"&#125;&#125;);</span></div><div class="line"><span class="comment">     * ┞ 亦或者传入class</span></div><div class="line"><span class="comment">     * ┞ mMethod.invoke(mClass,new Object[]&#123;new String[]&#123;"1","2","3"&#125;&#125;);</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessMain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; mClass = Class.forName(<span class="string">"com.zwang.april.bean.StaticMethod"</span>);</div><div class="line">            Method mMethod = mClass.getMethod(<span class="string">"main"</span>, String[].class);</div><div class="line"><span class="comment">//            mMethod.invoke(null, (Object) new String[]&#123;"1","2","3"&#125;);</span></div><div class="line">            <span class="comment">//因为是静态方法，所以不需要对象调用，此处可以传null或者是mClass(通过类去调用)</span></div><div class="line">            <span class="comment">// mMethod.invoke(null,new Object[]&#123;new String[]&#123;"1","2","3"&#125;&#125;);</span></div><div class="line">            mMethod.invoke(mClass, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;&#125;);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 3.利用反射 、 越过泛型检查  如下</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherUse</span><span class="params">()</span> </span>&#123;</div><div class="line">        ArrayList&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        strList.add(<span class="string">"aaa"</span>);</div><div class="line">        strList.add(<span class="string">"bbb"</span>);</div><div class="line"></div><div class="line">        Class&lt;ArrayList&gt; listClass = ArrayList.class;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Method addMethod = listClass.getMethod(<span class="string">"add"</span>, Object.class);</div><div class="line">            addMethod.invoke(strList, <span class="number">100</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Object obj : strList) &#123;</div><div class="line">                System.out.println(obj);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"*********************第二种方式***********************"</span>);</div><div class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        list.add(<span class="string">"aaa"</span>);</div><div class="line">        list.add(<span class="string">"bbb"</span>);</div><div class="line">        ArrayList mList = list;</div><div class="line">        mList.add(<span class="number">100</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Object obj : mList) &#123;</div><div class="line">            System.out.println(obj);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 深拷贝</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * 通过实现Serializable接口，并用对象的序列化与反序列化实现真正的深拷贝</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends Serializable&gt; <span class="function">T <span class="title">clone</span><span class="params">(T obj)</span> </span>&#123;</div><div class="line">        T cloneObj = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ByteArrayOutputStream byteOut = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            ObjectOutputStream objOut = <span class="keyword">new</span> ObjectOutputStream(byteOut);</div><div class="line">            objOut.writeObject(obj);</div><div class="line">            objOut.close();</div><div class="line"></div><div class="line">            ByteArrayInputStream byteInput = <span class="keyword">new</span> ByteArrayInputStream(byteOut.toByteArray());</div><div class="line">            ObjectInputStream objInput = <span class="keyword">new</span> ObjectInputStream(byteInput);</div><div class="line">            cloneObj = (T) objInput.readObject();</div><div class="line">            objInput.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cloneObj;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 泛型的协变与逆变</span></div><div class="line"><span class="comment">     * 定义：（≦ 表示继承关系 例如：String extends Object . f(Object) ---&gt; 有Object对象构造出来的一种类型 例如: Object[] 、List）</span></div><div class="line"><span class="comment">     * 当A ≦ B时,如果有f(A) ≦ f(B),那么f叫做协变；</span></div><div class="line"><span class="comment">     * 当A ≦ B时,如果有f(B) ≦ f(A),那么f叫做逆变；</span></div><div class="line"><span class="comment">     * 如果上面两种关系都不成立则叫做不可变。</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * 现在问题来了：究竟什么时候用extends什么时候用super呢？《Effective Java》给出了答案：</span></div><div class="line"><span class="comment">     * PECS: producer-extends, consumer-super.</span></div><div class="line"><span class="comment">     * java.util.Collections的copy方法(JDK1.7)完美地诠释了PECS：</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generic</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object[] objects = <span class="keyword">new</span> String[<span class="number">3</span>]; <span class="comment">//协变</span></div><div class="line">        List&lt;? extends Number&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">//协变 （extends指定泛型的上边界 super指定泛型的下边界）</span></div><div class="line">        List&lt;? <span class="keyword">super</span> Number&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">//逆变</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 反射笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[官网基础]]></title>
      <url>/2018/01/15/%E5%AE%98%E7%BD%91%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="官网基础"><a href="#官网基础" class="headerlink" title="官网基础"></a>官网基础</h2><h5 id="定义样式"><a href="#定义样式" class="headerlink" title="定义样式"></a><strong>定义样式</strong></h5><p>要创建一组样式，请在您的项目的 <code>res/values/</code> 目录中保存一个 XML 文件。 可任意指定该 XML 文件的名称，但它必须使用 <code>.xml</code> 扩展名，并且必须保存在 <code>res/values/</code> 文件夹内。</p>
<p>该 XML 文件的根节点必须是 <code>&lt;resources&gt;</code>。</p>
<p>对于您想创建的每个样式，向该文件添加一个 <code>&lt;style&gt;</code> 元素，该元素带有对样式进行唯一标识的 <code>name</code> 属性（该属性为必需属性）。然后为该样式的每个属性添加一个 <code>&lt;item&gt;</code> 元素，该元素带有声明样式属性以及属性值的 <code>name</code>（该属性为必需属性）。 根据样式属性，<code>&lt;item&gt;</code> 的值可以是关键字字符串、十六进制颜色值、对另一资源类型的引用或其他值。以下是一个包含单个样式的示例文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;style name=<span class="string">"CodeFont"</span> parent=<span class="string">"@android:style/TextAppearance.Medium"</span>&gt;</div><div class="line">        &lt;item name="android:layout_width"&gt;fill_parent&lt;/item&gt;</div><div class="line">        &lt;item name="android:layout_height"&gt;wrap_content&lt;/item&gt;</div><div class="line">        &lt;item name="android:textColor"&gt;#00FF00&lt;/item&gt;</div><div class="line">        &lt;item name="android:typeface"&gt;monospace&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p><code>&lt;resources&gt;</code> 元素的每个子项都会在编译时转换成一个应用资源对象，该对象可由 <code>&lt;style&gt;</code> 元素的 <code>name</code> 属性中的值引用。 可从 XML 布局以 <code>@style/CodeFont</code> 形式引用该示例样式（如上文引言中所示）。</p>
<p><code>&lt;style&gt;</code> 元素中的 <code>parent</code> 属性是可选属性，它指定应作为此样式所继承属性来源的另一样式的资源 ID。 如果愿意，您可在随后替换这些继承的样式属性。</p>
<p>​</p>
<h5 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h5><h6 id="向应用栏添加项目"><a href="#向应用栏添加项目" class="headerlink" title="向应用栏添加项目"></a><strong>向应用栏添加项目</strong></h6><p>您的片段可以通过实现 <code>onCreateOptionsMenu()</code> 向 Activity 的<a href="https://developer.android.google.cn/guide/topics/ui/menus.html#options-menu" target="_blank" rel="external">选项菜单</a>（并因此向<a href="https://developer.android.google.cn/training/appbar/index.html" target="_blank" rel="external">应用栏</a>）贡献菜单项。不过，为了使此方法能够收到调用，您必须在<code>onCreate()</code> 期间调用 <code>setHasOptionsMenu()</code>，以指示片段想要向选项菜单添加菜单项（否则，片段将不会收到对 <code>onCreateOptionsMenu()</code> 的调用）。</p>
<p>您之后从片段添加到选项菜单的任何菜单项都将追加到现有菜单项之后。 选定菜单项时，片段还会收到对 <code>onOptionsItemSelected()</code> 的回调。</p>
<p>您还可以通过调用 <code>registerForContextMenu()</code>，在片段布局中注册一个视图来提供上下文菜单。用户打开上下文菜单时，片段会收到对<code>onCreateContextMenu()</code> 的调用。当用户选择某个菜单项时，片段会收到对 <code>onContextItemSelected()</code> 的调用。</p>
<blockquote>
<p><strong>注</strong>：尽管您的片段会收到与其添加的每个菜单项对应的菜单项选定回调，但当用户选择菜单项时，Activity 会首先收到相应的回调。 如果 Activity 对菜单项选定回调的实现不会处理选定的菜单项，则系统会将事件传递到片段的回调。 这适用于选项菜单和上下文菜单。</p>
</blockquote>
<h5 id="intent"><a href="#intent" class="headerlink" title="intent"></a><strong>intent</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//验证是否存在接收intent的应用</span></div><div class="line">PackageManager packageManager = getPackageManager();</div><div class="line">List activities = packageManager.queryIntentActivities(intent,</div><div class="line">        PackageManager.MATCH_DEFAULT_ONLY);</div><div class="line"><span class="keyword">boolean</span> isIntentSafe = activities.size() &gt; <span class="number">0</span>;</div><div class="line"><span class="comment">//添加意图选择</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// Always use string resources for UI text.</span></div><div class="line"><span class="comment">// This says something like "Share this photo with"</span></div><div class="line">String title = getResources().getString(R.string.chooser_title);</div><div class="line"><span class="comment">// Create intent to show chooser</span></div><div class="line">Intent chooser = Intent.createChooser(intent, title);</div><div class="line"></div><div class="line"><span class="comment">// Verify the intent will resolve to at least one activity</span></div><div class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</div><div class="line">    startActivity(chooser);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;！--隐式启动--&gt;</div><div class="line">&lt;activity android:name=<span class="string">"ShareActivity"</span>&gt;</div><div class="line">&lt;!-- filter <span class="keyword">for</span> sending text; accepts SENDTO action with sms URI schemes --&gt;</div><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=<span class="string">"android.intent.action.SENDTO"</span>/&gt;</div><div class="line">    &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</div><div class="line">    &lt;data android:scheme=<span class="string">"sms"</span> /&gt;</div><div class="line">    &lt;data android:scheme=<span class="string">"smsto"</span> /&gt;</div><div class="line">&lt;/intent-filter&gt;</div><div class="line">&lt;!-- filter <span class="keyword">for</span> sending text or images; accepts SEND action and text or image data --&gt;</div><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=<span class="string">"android.intent.action.SEND"</span>/&gt;</div><div class="line">    &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</div><div class="line">    &lt;data android:mimeType=<span class="string">"image/*"</span>/&gt;</div><div class="line">    &lt;data android:mimeType=<span class="string">"text/plain"</span>/&gt;</div><div class="line">&lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div><div class="line"></div><div class="line"><span class="comment">// Get the intent that started this activity</span></div><div class="line"></div><div class="line">Intent intent = getIntent();</div><div class="line">Uri data = intent.getData();</div><div class="line"><span class="comment">// Figure out what to do based on the intent type</span></div><div class="line"><span class="keyword">if</span> (intent.getType().indexOf(<span class="string">"image/"</span>) != -<span class="number">1</span>) &#123;</div><div class="line">    <span class="comment">// Handle intents with image data ...</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getType().equals(<span class="string">"text/plain"</span>)) &#123;</div><div class="line">    <span class="comment">// Handle intents with text ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="危险权限申请"><a href="#危险权限申请" class="headerlink" title="危险权限申请"></a><strong>危险权限申请</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Here, thisActivity is the current activity</span></div><div class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(thisActivity,</div><div class="line">                Manifest.permission.READ_CONTACTS)</div><div class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Should we show an explanation?</span></div><div class="line">    <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,</div><div class="line">            Manifest.permission.READ_CONTACTS)) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Show an expanation to the user *asynchronously* -- don't block</span></div><div class="line">        <span class="comment">// this thread waiting for the user's response! After the user</span></div><div class="line">        <span class="comment">// sees the explanation, try again to request the permission.</span></div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        <span class="comment">// No explanation needed, we can request the permission.</span></div><div class="line"></div><div class="line">        ActivityCompat.requestPermissions(thisActivity,</div><div class="line">                <span class="keyword">new</span> String[]&#123;Manifest.permission.READ_CONTACTS&#125;,</div><div class="line">                MY_PERMISSIONS_REQUEST_READ_CONTACTS);</div><div class="line"></div><div class="line">        <span class="comment">// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an</span></div><div class="line">        <span class="comment">// app-defined int constant. The callback method gets the</span></div><div class="line">        <span class="comment">// result of the request.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//处理回调</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode,</span></span></div><div class="line"><span class="function"><span class="params">        String permissions[], <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">        <span class="keyword">case</span> MY_PERMISSIONS_REQUEST_READ_CONTACTS: &#123;</div><div class="line">            <span class="comment">// If request is cancelled, the result arrays are empty.</span></div><div class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></div><div class="line">                &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line"></div><div class="line">                <span class="comment">// permission was granted, yay! Do the</span></div><div class="line">                <span class="comment">// contacts-related task you need to do.</span></div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">                <span class="comment">// permission denied, boo! Disable the</span></div><div class="line">                <span class="comment">// functionality that depends on this permission.</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// other 'case' lines to check for other</span></div><div class="line">        <span class="comment">// permissions this app might request</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//基础写</span></div><div class="line">String filename = <span class="string">"myfile"</span>;</div><div class="line">String string = <span class="string">"Hello world!"</span>;</div><div class="line">FileOutputStream outputStream;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  outputStream = openFileOutput(filename, Context.MODE_PRIVATE);</div><div class="line">  outputStream.write(string.getBytes());</div><div class="line">  outputStream.close();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="comment">//临时文件</span></div><div class="line">String fileName = Uri.parse(url).getLastPathSegment();</div><div class="line">file = File.createTempFile(fileName, <span class="keyword">null</span>, context.getCacheDir());</div><div class="line"></div><div class="line"><span class="comment">//判断外部存储是否装载</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExternalStorageWritable</span><span class="params">()</span> </span>&#123;</div><div class="line">    String state = Environment.getExternalStorageState();</div><div class="line">    <span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(state)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//判断外部存储是否可读</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExternalStorageReadable</span><span class="params">()</span> </span>&#123;</div><div class="line">    String state = Environment.getExternalStorageState();</div><div class="line">    <span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(state) ||</div><div class="line">        Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"> <span class="comment">// 指定文件外部存储目录，可以传null.</span></div><div class="line">    File file = <span class="keyword">new</span> File(context.getExternalFilesDir(</div><div class="line">            Environment.DIRECTORY_PICTURES), albumName);</div><div class="line"><span class="comment">//查询存储使用信息</span></div><div class="line">getCacheDir().getFreeSpace()</div><div class="line">getCacheDir().getTotalSpace()</div></pre></td></tr></table></figure>
<h5 id="room数据库的使用："><a href="#room数据库的使用：" class="headerlink" title="room数据库的使用："></a>room数据库的使用：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//By default, Room creates a column for each field that's defined in the entity. </span></div><div class="line"><span class="comment">//If an entity has fields that you don't want to persist, you can annotate them using @Ignore. </span></div><div class="line"><span class="comment">//You must reference the entity class through the entities array in the Database class.</span></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line">    <span class="keyword">public</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    Bitmap picture;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//复合型主键</span></div><div class="line"><span class="meta">@Entity</span>(primaryKeys = &#123;<span class="string">"firstName"</span>, <span class="string">"lastName"</span>&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line">    <span class="keyword">public</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    Bitmap picture;</div><div class="line">&#125;</div><div class="line"><span class="comment">//表重命名，否则就是以类名作为表的名字  （注意：表名不区分大小写）</span></div><div class="line"><span class="meta">@Entity</span>(primaryKeys = &#123;<span class="string">"firstName"</span>, <span class="string">"lastName"</span>&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line">    <span class="keyword">public</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    Bitmap picture;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//columnInfo 作用与tableName相似，声明的字段会作为表的列明，通过@columnInfo可修改列名</span></div><div class="line"><span class="meta">@Entity</span>(tableName = <span class="string">"users"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"first_name"</span>)</div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"last_name"</span>)</div><div class="line">    <span class="keyword">public</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    Bitmap picture;</div><div class="line">&#125;</div><div class="line"><span class="comment">//定义对象之间的关系（）</span></div><div class="line"><span class="meta">@Entity</span>(foreignKeys = <span class="meta">@ForeignKey</span>(entity = User.class,</div><div class="line">                                  parentColumns = <span class="string">"id"</span>,</div><div class="line">                                  childColumns = <span class="string">"user_id"</span>))</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String title;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"user_id"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> userId;</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用注解@Embedded创建嵌套对象 （User表中包含Address的street，state,city,post_code）</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String street;</div><div class="line">    <span class="keyword">public</span> String state;</div><div class="line">    <span class="keyword">public</span> String city;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"post_code"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> postCode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">public</span> Address address;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h5><h6 id="要求相关硬件"><a href="#要求相关硬件" class="headerlink" title="要求相关硬件"></a>要求相关硬件</h6><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;manifest ... &gt;</div><div class="line">    &lt;uses-feature android:name=<span class="string">"android.hardware.camera"</span></div><div class="line">                  android:required=<span class="string">"true"</span> /&gt;</div><div class="line">    ...</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
<h6 id="简单拍照-获取缩略图"><a href="#简单拍照-获取缩略图" class="headerlink" title="简单拍照/获取缩略图"></a>简单拍照/获取缩略图</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_IMAGE_CAPTURE = <span class="number">1</span>;</div><div class="line"><span class="comment">//拍照</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchTakePictureIntent</span><span class="params">()</span> </span>&#123;</div><div class="line">    Intent takePictureIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">    <span class="keyword">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</div><div class="line">        startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取缩略图</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (requestCode == REQUEST_IMAGE_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class="line">        Bundle extras = data.getExtras();</div><div class="line">        Bitmap imageBitmap = (Bitmap) extras.get(<span class="string">"data"</span>);</div><div class="line">        mImageView.setImageBitmap(imageBitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="获取唯一文件"><a href="#获取唯一文件" class="headerlink" title="获取唯一文件"></a>获取唯一文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">String mCurrentPhotoPath;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> File <span class="title">createImageFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="comment">// Create an image file name</span></div><div class="line">    String timeStamp = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd_HHmmss"</span>).format(<span class="keyword">new</span> Date());</div><div class="line">    String imageFileName = <span class="string">"JPEG_"</span> + timeStamp + <span class="string">"_"</span>;</div><div class="line">    File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);</div><div class="line">    File image = File.createTempFile(</div><div class="line">        imageFileName,  <span class="comment">/* prefix */</span></div><div class="line">        <span class="string">".jpg"</span>,         <span class="comment">/* suffix */</span></div><div class="line">        storageDir      <span class="comment">/* directory */</span></div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="comment">// Save a file: path for use with ACTION_VIEW intents</span></div><div class="line">    mCurrentPhotoPath = image.getAbsolutePath();</div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="拍照-原图"><a href="#拍照-原图" class="headerlink" title="拍照/原图"></a>拍照/原图</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_TAKE_PHOTO = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchTakePictureIntent</span><span class="params">()</span> </span>&#123;</div><div class="line">    Intent takePictureIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">    <span class="comment">// Ensure that there's a camera activity to handle the intent</span></div><div class="line">    <span class="keyword">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Create the File where the photo should go</span></div><div class="line">        File photoFile = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            photoFile = createImageFile();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">            <span class="comment">// Error occurred while creating the File</span></div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Continue only if the File was successfully created</span></div><div class="line">        <span class="keyword">if</span> (photoFile != <span class="keyword">null</span>) &#123;</div><div class="line">            Uri photoURI = FileProvider.getUriForFile(<span class="keyword">this</span>,</div><div class="line">                                                  <span class="string">"com.example.android.fileprovider"</span>,</div><div class="line">                                                  photoFile);</div><div class="line">            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);</div><div class="line">            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="通知图库更新"><a href="#通知图库更新" class="headerlink" title="通知图库更新"></a>通知图库更新</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//可以让其他应用访问</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">galleryAddPic</span><span class="params">()</span> </span>&#123;</div><div class="line">    Intent mediaScanIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);</div><div class="line">    File f = <span class="keyword">new</span> File(mCurrentPhotoPath);</div><div class="line">    Uri contentUri = Uri.fromFile(f);</div><div class="line">    mediaScanIntent.setData(contentUri);</div><div class="line">    <span class="keyword">this</span>.sendBroadcast(mediaScanIntent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="尺寸压缩"><a href="#尺寸压缩" class="headerlink" title="尺寸压缩"></a>尺寸压缩</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPic</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Get the dimensions of the View</span></div><div class="line">    <span class="keyword">int</span> targetW = mImageView.getWidth();</div><div class="line">    <span class="keyword">int</span> targetH = mImageView.getHeight();</div><div class="line"></div><div class="line">    <span class="comment">// Get the dimensions of the bitmap</span></div><div class="line">    BitmapFactory.Options bmOptions = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">    bmOptions.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</div><div class="line">    <span class="keyword">int</span> photoW = bmOptions.outWidth;</div><div class="line">    <span class="keyword">int</span> photoH = bmOptions.outHeight;</div><div class="line"></div><div class="line">    <span class="comment">// Determine how much to scale down the image</span></div><div class="line">    <span class="keyword">int</span> scaleFactor = Math.min(photoW/targetW, photoH/targetH);</div><div class="line"></div><div class="line">    <span class="comment">// Decode the image file into a Bitmap sized to fill the View</span></div><div class="line">    bmOptions.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line">    bmOptions.inSampleSize = scaleFactor;</div><div class="line">    bmOptions.inPurgeable = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</div><div class="line">    mImageView.setImageBitmap(bitmap);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="调用相机录制视频"><a href="#调用相机录制视频" class="headerlink" title="调用相机录制视频"></a>调用相机录制视频</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加 &lt;uses-feature android:name="android.hardware.camera" android:required="true" /&gt;</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_VIDEO_CAPTURE = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchTakeVideoIntent</span><span class="params">()</span> </span>&#123;</div><div class="line">    Intent takeVideoIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_VIDEO_CAPTURE);</div><div class="line">    <span class="keyword">if</span> (takeVideoIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</div><div class="line">        startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//通过使用videoView播放</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent intent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (requestCode == REQUEST_VIDEO_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class="line">        Uri videoUri = intent.getData();</div><div class="line">        mVideoView.setVideoURI(videoUri);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Sence"><a href="#Sence" class="headerlink" title="Sence"></a>Sence</h5><h6 id="布局生成Sence"><a href="#布局生成Sence" class="headerlink" title="布局生成Sence"></a>布局生成Sence</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Scene mAScene;</div><div class="line">Scene mAnotherScene;</div><div class="line"></div><div class="line"><span class="comment">// Create the scene root for the scenes in this app</span></div><div class="line">mSceneRoot = (ViewGroup) findViewById(R.id.scene_root);</div><div class="line"></div><div class="line"><span class="comment">// Create the scenes</span></div><div class="line">mAScene = Scene.getSceneForLayout(mSceneRoot, R.layout.a_scene, <span class="keyword">this</span>);</div><div class="line">mAnotherScene =</div><div class="line">    Scene.getSceneForLayout(mSceneRoot, R.layout.another_scene, <span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<h6 id="代码创建Sence"><a href="#代码创建Sence" class="headerlink" title="代码创建Sence"></a>代码创建Sence</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Scene mScene;</div><div class="line"></div><div class="line"><span class="comment">// Obtain the scene root element</span></div><div class="line">mSceneRoot = (ViewGroup) mSomeLayoutElement;</div><div class="line"></div><div class="line"><span class="comment">// Obtain the view hierarchy to add as a child of</span></div><div class="line"><span class="comment">// the scene root when this scene is entered</span></div><div class="line">mViewHierarchy = (ViewGroup) someOtherLayoutElement;</div><div class="line"></div><div class="line"><span class="comment">// Create a scene</span></div><div class="line">mScene = <span class="keyword">new</span> Scene(mSceneRoot, mViewHierarchy);</div></pre></td></tr></table></figure>
<h6 id="Transition的创建"><a href="#Transition的创建" class="headerlink" title="Transition的创建"></a>Transition的创建</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过布局的方式创建</span></div><div class="line"><span class="comment">//res/transition/fade_transition.xml</span></div><div class="line">&lt;fade xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span> /&gt;</div><div class="line"></div><div class="line">Transition mFadeTransition =</div><div class="line">        TransitionInflater.from(<span class="keyword">this</span>).</div><div class="line">        inflateTransition(R.transition.fade_transition);</div><div class="line"></div><div class="line"><span class="comment">//通过代码的方式创建Transition [AutoTransition,Fade,ChangeBounds]</span></div><div class="line">Transition mFadeTransition = <span class="keyword">new</span> Fade();</div></pre></td></tr></table></figure>
<h6 id="Transition应用有场景的转换"><a href="#Transition应用有场景的转换" class="headerlink" title="Transition应用有场景的转换"></a>Transition应用有场景的转换</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通常用于不同的视图切换</span></div><div class="line">TransitionManager.go(mEndingScene, mFadeTransition);</div></pre></td></tr></table></figure>
<h6 id="Transition应用无场景的转换-TransitionManager-beginDelayedTransition-rootview-flag-用于记录视图层次结构"><a href="#Transition应用无场景的转换-TransitionManager-beginDelayedTransition-rootview-flag-用于记录视图层次结构" class="headerlink" title="Transition应用无场景的转换(TransitionManager.beginDelayedTransition(rootview,flag) 用于记录视图层次结构)"></a>Transition应用无场景的转换(TransitionManager.beginDelayedTransition(rootview,flag) 用于记录视图层次结构)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get the root view and create a transition</span></div><div class="line">mRootView = (ViewGroup) findViewById(R.id.mainLayout);</div><div class="line">mFade = <span class="keyword">new</span> Fade(IN);</div><div class="line"></div><div class="line"><span class="comment">// Start recording changes to the view hierarchy</span></div><div class="line">TransitionManager.beginDelayedTransition(mRootView, mFade);</div><div class="line"></div><div class="line"><span class="comment">// Add the new TextView to the view hierarchy</span></div><div class="line">mRootView.addView(mLabelText);</div><div class="line"></div><div class="line"><span class="comment">// When the system redraws the screen to show this update,</span></div><div class="line"><span class="comment">// the framework will animate the addition as a fade in</span></div></pre></td></tr></table></figure>
<h5 id="PageTransformer"><a href="#PageTransformer" class="headerlink" title="PageTransformer"></a>PageTransformer</h5><p>缩放效果（<a href="https://developer.android.google.cn/training/animation/anim_page_transformer_zoomout.mp4）" target="_blank" rel="external">https://developer.android.google.cn/training/animation/anim_page_transformer_zoomout.mp4）</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoomOutPageTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_SCALE = <span class="number">0.85f</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_ALPHA = <span class="number">0.5f</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> pageWidth = view.getWidth();</div><div class="line">        <span class="keyword">int</span> pageHeight = view.getHeight();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position &lt; -<span class="number">1</span>) &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">            <span class="comment">// This page is way off-screen to the left.</span></div><div class="line">            view.setAlpha(<span class="number">0</span>);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) &#123; <span class="comment">// [-1,1]</span></div><div class="line">            <span class="comment">// Modify the default slide transition to shrink the page as well</span></div><div class="line">            <span class="keyword">float</span> scaleFactor = Math.max(MIN_SCALE, <span class="number">1</span> - Math.abs(position));</div><div class="line">            <span class="keyword">float</span> vertMargin = pageHeight * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">float</span> horzMargin = pageWidth * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</div><div class="line">                view.setTranslationX(horzMargin - vertMargin / <span class="number">2</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                view.setTranslationX(-horzMargin + vertMargin / <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Scale the page down (between MIN_SCALE and 1)</span></div><div class="line">            view.setScaleX(scaleFactor);</div><div class="line">            view.setScaleY(scaleFactor);</div><div class="line"></div><div class="line">            <span class="comment">// Fade the page relative to its size.</span></div><div class="line">            view.setAlpha(MIN_ALPHA +</div><div class="line">                    (scaleFactor - MIN_SCALE) /</div><div class="line">                    (<span class="number">1</span> - MIN_SCALE) * (<span class="number">1</span> - MIN_ALPHA));</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">            <span class="comment">// This page is way off-screen to the right.</span></div><div class="line">            view.setAlpha(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>透明效果（<a href="https://developer.android.google.cn/training/animation/anim_page_transformer_depth.mp4）" target="_blank" rel="external">https://developer.android.google.cn/training/animation/anim_page_transformer_depth.mp4）</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthPageTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_SCALE = <span class="number">0.75f</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> pageWidth = view.getWidth();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position &lt; -<span class="number">1</span>) &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">            <span class="comment">// This page is way off-screen to the left.</span></div><div class="line">            view.setAlpha(<span class="number">0</span>);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">0</span>) &#123; <span class="comment">// [-1,0]</span></div><div class="line">            <span class="comment">// Use the default slide transition when moving to the left page</span></div><div class="line">            view.setAlpha(<span class="number">1</span>);</div><div class="line">            view.setTranslationX(<span class="number">0</span>);</div><div class="line">            view.setScaleX(<span class="number">1</span>);</div><div class="line">            view.setScaleY(<span class="number">1</span>);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) &#123; <span class="comment">// (0,1]</span></div><div class="line">            <span class="comment">// Fade the page out.</span></div><div class="line">            view.setAlpha(<span class="number">1</span> - position);</div><div class="line"></div><div class="line">            <span class="comment">// Counteract the default slide transition</span></div><div class="line">            view.setTranslationX(pageWidth * -position);</div><div class="line"></div><div class="line">            <span class="comment">// Scale the page down (between MIN_SCALE and 1)</span></div><div class="line">            <span class="keyword">float</span> scaleFactor = MIN_SCALE</div><div class="line">                    + (<span class="number">1</span> - MIN_SCALE) * (<span class="number">1</span> - Math.abs(position));</div><div class="line">            view.setScaleX(scaleFactor);</div><div class="line">            view.setScaleY(scaleFactor);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">            <span class="comment">// This page is way off-screen to the right.</span></div><div class="line">            view.setAlpha(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="查看大图-https-developer-android-google-cn-training-animation-anim-zoom-mp4"><a href="#查看大图-https-developer-android-google-cn-training-animation-anim-zoom-mp4" class="headerlink" title="查看大图(https://developer.android.google.cn/training/animation/anim_zoom.mp4)"></a>查看大图(<a href="https://developer.android.google.cn/training/animation/anim_zoom.mp4" target="_blank" rel="external">https://developer.android.google.cn/training/animation/anim_zoom.mp4</a>)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">zoomImageFromThumb</span><span class="params">(<span class="keyword">final</span> View thumbView, <span class="keyword">int</span> imageResId)</span> </span>&#123;</div><div class="line">    <span class="comment">// If there's an animation in progress, cancel it</span></div><div class="line">    <span class="comment">// immediately and proceed with this one.</span></div><div class="line">    <span class="keyword">if</span> (mCurrentAnimator != <span class="keyword">null</span>) &#123;</div><div class="line">        mCurrentAnimator.cancel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Load the high-resolution "zoomed-in" image.</span></div><div class="line">    <span class="keyword">final</span> ImageView expandedImageView = (ImageView) findViewById(</div><div class="line">            R.id.expanded_image);</div><div class="line">    expandedImageView.setImageResource(imageResId);</div><div class="line"></div><div class="line">    <span class="comment">// Calculate the starting and ending bounds for the zoomed-in image.</span></div><div class="line">    <span class="comment">// This step involves lots of math. Yay, math.</span></div><div class="line">    <span class="keyword">final</span> Rect startBounds = <span class="keyword">new</span> Rect();</div><div class="line">    <span class="keyword">final</span> Rect finalBounds = <span class="keyword">new</span> Rect();</div><div class="line">    <span class="keyword">final</span> Point globalOffset = <span class="keyword">new</span> Point();</div><div class="line"></div><div class="line">    <span class="comment">// The start bounds are the global visible rectangle of the thumbnail,</span></div><div class="line">    <span class="comment">// and the final bounds are the global visible rectangle of the container</span></div><div class="line">    <span class="comment">// view. Also set the container view's offset as the origin for the</span></div><div class="line">    <span class="comment">// bounds, since that's the origin for the positioning animation</span></div><div class="line">    <span class="comment">// properties (X, Y).</span></div><div class="line">    thumbView.getGlobalVisibleRect(startBounds);</div><div class="line">    findViewById(R.id.container)</div><div class="line">            .getGlobalVisibleRect(finalBounds, globalOffset);</div><div class="line">    startBounds.offset(-globalOffset.x, -globalOffset.y);</div><div class="line">    finalBounds.offset(-globalOffset.x, -globalOffset.y);</div><div class="line"></div><div class="line">    <span class="comment">// Adjust the start bounds to be the same aspect ratio as the final</span></div><div class="line">    <span class="comment">// bounds using the "center crop" technique. This prevents undesirable</span></div><div class="line">    <span class="comment">// stretching during the animation. Also calculate the start scaling</span></div><div class="line">    <span class="comment">// factor (the end scaling factor is always 1.0).</span></div><div class="line">    <span class="keyword">float</span> startScale;</div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">float</span>) finalBounds.width() / finalBounds.height()</div><div class="line">            &gt; (<span class="keyword">float</span>) startBounds.width() / startBounds.height()) &#123;</div><div class="line">        <span class="comment">// Extend start bounds horizontally</span></div><div class="line">        startScale = (<span class="keyword">float</span>) startBounds.height() / finalBounds.height();</div><div class="line">        <span class="keyword">float</span> startWidth = startScale * finalBounds.width();</div><div class="line">        <span class="keyword">float</span> deltaWidth = (startWidth - startBounds.width()) / <span class="number">2</span>;</div><div class="line">        startBounds.left -= deltaWidth;</div><div class="line">        startBounds.right += deltaWidth;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Extend start bounds vertically</span></div><div class="line">        startScale = (<span class="keyword">float</span>) startBounds.width() / finalBounds.width();</div><div class="line">        <span class="keyword">float</span> startHeight = startScale * finalBounds.height();</div><div class="line">        <span class="keyword">float</span> deltaHeight = (startHeight - startBounds.height()) / <span class="number">2</span>;</div><div class="line">        startBounds.top -= deltaHeight;</div><div class="line">        startBounds.bottom += deltaHeight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Hide the thumbnail and show the zoomed-in view. When the animation</span></div><div class="line">    <span class="comment">// begins, it will position the zoomed-in view in the place of the</span></div><div class="line">    <span class="comment">// thumbnail.</span></div><div class="line">    thumbView.setAlpha(<span class="number">0f</span>);</div><div class="line">    expandedImageView.setVisibility(View.VISIBLE);</div><div class="line"></div><div class="line">    <span class="comment">// Set the pivot point for SCALE_X and SCALE_Y transformations</span></div><div class="line">    <span class="comment">// to the top-left corner of the zoomed-in view (the default</span></div><div class="line">    <span class="comment">// is the center of the view).</span></div><div class="line">    expandedImageView.setPivotX(<span class="number">0f</span>);</div><div class="line">    expandedImageView.setPivotY(<span class="number">0f</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Construct and run the parallel animation of the four translation and</span></div><div class="line">    <span class="comment">// scale properties (X, Y, SCALE_X, and SCALE_Y).</span></div><div class="line">    AnimatorSet set = <span class="keyword">new</span> AnimatorSet();</div><div class="line">    set</div><div class="line">            .play(ObjectAnimator.ofFloat(expandedImageView, View.X,</div><div class="line">                    startBounds.left, finalBounds.left))</div><div class="line">            .with(ObjectAnimator.ofFloat(expandedImageView, View.Y,</div><div class="line">                    startBounds.top, finalBounds.top))</div><div class="line">            .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X,</div><div class="line">            startScale, <span class="number">1f</span>)).with(ObjectAnimator.ofFloat(expandedImageView,</div><div class="line">                    View.SCALE_Y, startScale, <span class="number">1f</span>));</div><div class="line">    set.setDuration(mShortAnimationDuration);</div><div class="line">    set.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</div><div class="line">    set.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            mCurrentAnimator = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            mCurrentAnimator = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    set.start();</div><div class="line">    mCurrentAnimator = set;</div><div class="line"></div><div class="line">    <span class="comment">// Upon clicking the zoomed-in image, it should zoom back down</span></div><div class="line">    <span class="comment">// to the original bounds and show the thumbnail instead of</span></div><div class="line">    <span class="comment">// the expanded image.</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> startScaleFinal = startScale;</div><div class="line">    expandedImageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mCurrentAnimator != <span class="keyword">null</span>) &#123;</div><div class="line">                mCurrentAnimator.cancel();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Animate the four positioning/sizing properties in parallel,</span></div><div class="line">            <span class="comment">// back to their original values.</span></div><div class="line">            AnimatorSet set = <span class="keyword">new</span> AnimatorSet();</div><div class="line">            set.play(ObjectAnimator</div><div class="line">                        .ofFloat(expandedImageView, View.X, startBounds.left))</div><div class="line">                        .with(ObjectAnimator</div><div class="line">                                .ofFloat(expandedImageView,</div><div class="line">                                        View.Y,startBounds.top))</div><div class="line">                        .with(ObjectAnimator</div><div class="line">                                .ofFloat(expandedImageView,</div><div class="line">                                        View.SCALE_X, startScaleFinal))</div><div class="line">                        .with(ObjectAnimator</div><div class="line">                                .ofFloat(expandedImageView,</div><div class="line">                                        View.SCALE_Y, startScaleFinal));</div><div class="line">            set.setDuration(mShortAnimationDuration);</div><div class="line">            set.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</div><div class="line">            set.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                    thumbView.setAlpha(<span class="number">1f</span>);</div><div class="line">                    expandedImageView.setVisibility(View.GONE);</div><div class="line">                    mCurrentAnimator = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                    thumbView.setAlpha(<span class="number">1f</span>);</div><div class="line">                    expandedImageView.setVisibility(View.GONE);</div><div class="line">                    mCurrentAnimator = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            set.start();</div><div class="line">            mCurrentAnimator = set;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="更改布局动画（添加、删除、更新）"><a href="#更改布局动画（添加、删除、更新）" class="headerlink" title="更改布局动画（添加、删除、更新）"></a>更改布局动画（添加、删除、更新）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--在相应的布局中添加animateLayoutChanges = true--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:animateLayoutChanges</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">    <span class="attr">...</span></span></div><div class="line"><span class="tag">/&gt;</span></div></pre></td></tr></table></figure>
<h5 id="尺寸限定符："><a href="#尺寸限定符：" class="headerlink" title="尺寸限定符："></a>尺寸限定符：</h5><p><code>res/layout/main.xml</code>，单窗格（默认）布局：</p>
<p><code>res/layout-large/main.xml</code>，双窗格布局：    </p>
<p><code>res/layout-sw600dp/main.xml</code>，双窗格布局：（最小宽度大于或等于 600dp 的设备将选择 <code>layout-sw600dp/main.xml</code>）</p>
<p>NinePatch(.9图制作详情)</p>
<blockquote>
<p>边框沿线的黑色像素。顶部和左侧边框上的黑色像素指示可以拉伸图像的位置，右侧和底部边框上的黑色像素则指示应该放置内容的位置。</p>
</blockquote>
<p>DP</p>
<ul>
<li><code>xhdpi</code>：2.0</li>
<li><code>hdpi</code>：1.5</li>
<li><code>mdpi</code>：1.0（基准）</li>
<li><code>ldpi</code>：0.75</li>
</ul>
<h5 id="ConstraintLayout"><a href="#ConstraintLayout" class="headerlink" title="ConstraintLayout"></a>ConstraintLayout</h5><blockquote>
<p>官网有详细介绍 <a href="https://developer.android.google.cn/training/constraint-layout/index.html" target="_blank" rel="external">https://developer.android.google.cn/training/constraint-layout/index.html</a></p>
</blockquote>
<ul>
<li><h6 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line"><span class="tag">   <span class="attr">android:id</span>=<span class="string">"@+id/my_toolbar"</span></span></div><div class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></div><div class="line"><span class="tag">   <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></div><div class="line"><span class="tag">   <span class="attr">android:elevation</span>=<span class="string">"4dp"</span> 官方推荐</span></div><div class="line"><span class="tag">   <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.ActionBar"</span></span></div><div class="line"><span class="tag">   <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><h6 id="SearchView"><a href="#SearchView" class="headerlink" title="SearchView"></a>SearchView</h6><blockquote>
<p>可以作为menu使用，也可以作为一个控件使用</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_search"</span></span></div><div class="line"><span class="tag">     <span class="attr">android:title</span>=<span class="string">"@string/action_search"</span></span></div><div class="line"><span class="tag">     <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_search"</span></span></div><div class="line"><span class="tag">     <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom|collapseActionView"</span></span></div><div class="line"><span class="tag">     <span class="attr">app:actionViewClass</span>=<span class="string">"android.support.v7.widget.SearchView"</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">    getMenuInflater().inflate(R.menu.main_activity_actions, menu);</div><div class="line"></div><div class="line">    MenuItem searchItem = menu.findItem(R.id.action_search);</div><div class="line">    SearchView searchView =</div><div class="line">            (SearchView) MenuItemCompat.getActionView(searchItem);</div><div class="line"></div><div class="line">    <span class="comment">// Configure the search info and add any event listeners...</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//可以自定义各种状态下的icon</span></div><div class="line">actionView.setOnCloseListener();<span class="comment">//监听打开关闭</span></div><div class="line">actionView.setOnSuggestionListener();<span class="comment">//推荐列表        </span></div><div class="line">actionView.setOnQueryTextListener()<span class="comment">//类似文本间监听 返回false自动收起键盘</span></div></pre></td></tr></table></figure>
</li>
<li><h6 id="snackbar"><a href="#snackbar" class="headerlink" title="snackbar"></a><strong>snackbar</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Snackbar mySnackbar = Snackbar.make(findViewById(R.id.myCoordinatorLayout),</div><div class="line">								R.string.email_archived,Snackbar.LENGTH_SHORT);</div><div class="line">mySnackbar.setAction(R.string.undo_string, <span class="keyword">new</span> MyUndoListener());</div><div class="line">mySnackbar.show();</div></pre></td></tr></table></figure>
</li>
<li><h5 id="管理系统界面"><a href="#管理系统界面" class="headerlink" title="管理系统界面"></a><strong>管理系统界面</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This example uses decor view, but you can use any visible view.</span></div><div class="line">View decorView = getActivity().getWindow().getDecorView();</div><div class="line"><span class="keyword">int</span> uiOptions = View.SYSTEM_UI_FLAG_LOW_PROFILE;</div><div class="line">decorView.setSystemUiVisibility(uiOptions);</div><div class="line"></div><div class="line">View decorView = getActivity().getWindow().getDecorView();</div><div class="line"><span class="comment">// Calling setSystemUiVisibility() with a value of 0 clears</span></div><div class="line"><span class="comment">// all flags.</span></div><div class="line">decorView.setSystemUiVisibility(<span class="number">0</span>);</div></pre></td></tr></table></figure>
</li>
<li><h6 id="隐藏状态栏"><a href="#隐藏状态栏" class="headerlink" title="隐藏状态栏"></a>隐藏状态栏</h6><p>当失去焦点时会无效，比如触摸其他，后台重新进入界面</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">View decorView = getWindow().getDecorView();</div><div class="line"><span class="comment">// Hide the status bar.</span></div><div class="line"><span class="keyword">int</span> uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN;</div><div class="line">decorView.setSystemUiVisibility(uiOptions);</div><div class="line"><span class="comment">// Remember that you should never show the action bar if the</span></div><div class="line"><span class="comment">// status bar is hidden, so hide that too if necessary.</span></div><div class="line">ActionBar actionBar = getActionBar();</div><div class="line">actionBar.hide();</div><div class="line"></div><div class="line"><span class="comment">//配合setFitsSystemWindows()</span></div><div class="line">View.SYSTEM_UI_FLAG_FULLSCREEN | <span class="comment">//隐藏状态栏</span></div><div class="line">View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| <span class="comment">//内容填充状态栏</span></div><div class="line">View.SYSTEM_UI_FLAG_LAYOUT_STABLE| <span class="comment">//保持布局稳定</span></div><div class="line">View.SYSTEM_UI_FLAG_HIDE_NAVIGATION|<span class="comment">//隐藏导航虚拟按键</span></div><div class="line">View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION|<span class="comment">//内容填充导航虚拟按键</span></div><div class="line">View.SYSTEM_UI_FLAG_IMMERSIVE|<span class="comment">//沉浸式全屏</span></div><div class="line">View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY<span class="comment">//沉浸式全屏 划出状态栏，状态栏会自动消失</span></div><div class="line"></div><div class="line"><span class="comment">//处理状态栏被显示的问题</span></div><div class="line">getWindow().getDecorView().setOnSystemUiVisibilityChangeListener</div><div class="line">onWindowFocusChanged()</div><div class="line">  </div><div class="line">mDecorView.setOnSystemUiVisibilityChangeListener(<span class="keyword">new</span> View.OnSystemUiVisibilityChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSystemUiVisibilityChange</span><span class="params">(<span class="keyword">int</span> visibility)</span> </span>&#123;</div><div class="line">                <span class="comment">// Note that system bars will only be "visible" if none of the</span></div><div class="line">                <span class="comment">// LOW_PROFILE, HIDE_NAVIGATION, or FULLSCREEN flags are set.</span></div><div class="line">                <span class="keyword">if</span> ((visibility &amp; View.SYSTEM_UI_FLAG_FULLSCREEN) == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// <span class="doctag">TODO:</span> The system bars are visible. Make any desired</span></div><div class="line">                    <span class="comment">// adjustments to your UI, such as showing the action bar or</span></div><div class="line">                    <span class="comment">// other navigational controls.</span></div><div class="line">                  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// <span class="doctag">TODO:</span> The system bars are NOT visible. Make any desired</span></div><div class="line">                    <span class="comment">// adjustments to your UI, such as hiding the action bar or</span></div><div class="line">                    <span class="comment">// other navigational controls.</span></div><div class="line">                  </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
</li>
<li><h5 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h5><p>定制状态栏</p>
<p><img src="https://developer.android.google.cn/training/material/images/ThemeColors.png" alt="状态栏"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当recycleview宽高不变时增删改查时提高性能</span></div><div class="line">mRecyclerView.setHasFixedSize(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>阴影</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Z = elevation + translationZ</div><div class="line"><span class="comment">//自定义阴影轮廓，因为实际轮廓都是正方形</span></div><div class="line">扩展 ViewOutlineProvider 类别。</div><div class="line">替代 getOutline() 方法。</div><div class="line">利用 View.setOutlineProvider() 方法向您的视图指定新的轮廓提供程序。</div></pre></td></tr></table></figure>
</li>
<li><h5 id="定制动画"><a href="#定制动画" class="headerlink" title="定制动画"></a><strong>定制动画</strong></h5><h6 id="触摸反馈（水波纹）"><a href="#触摸反馈（水波纹）" class="headerlink" title="触摸反馈（水波纹）"></a>触摸反馈（水波纹）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//矩形边框水波纹</span></div><div class="line">android:background=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line"></div><div class="line"><span class="comment">//无边框限制水波纹</span></div><div class="line">android:background=<span class="string">"?android:attr/selectableItemBackgroundBorderless"</span></div></pre></td></tr></table></figure>
<h6 id="自定义水波纹"><a href="#自定义水波纹" class="headerlink" title="自定义水波纹"></a>自定义水波纹</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Creates a new ripple drawable with the specified ripple color and</span></div><div class="line"><span class="comment"> * optional content and mask drawables.</span></div><div class="line"><span class="comment"> * 通过指定波纹的颜色、操作内容、蒙板边界 创建新的ripple drawable 。</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> color The ripple color  波纹颜色 </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> content The content drawable, may be &#123;<span class="doctag">@code</span> null&#125; 指定content drawable</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> mask The mask drawable, may be &#123;<span class="doctag">@code</span> null&#125;  蒙板边界 、为null时，无边界</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">RippleDrawable</span><span class="params">(@NonNull ColorStateList color, @Nullable Drawable content,</span></span></div><div class="line"><span class="function"><span class="params">        @Nullable Drawable mask)</span> </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line">RippleDrawable rd = <span class="keyword">new</span> RippleDrawable(</div><div class="line">		ColorStateList.valueOf(</div><div class="line">      	getResources().getColor(R.color.bg_gray)),</div><div class="line">      	drawable, </div><div class="line">      	getShape()</div><div class="line">      );</div><div class="line">tvColor.setBackgroundDrawable(rd);</div></pre></td></tr></table></figure>
<h6 id="揭露动画"><a href="#揭露动画" class="headerlink" title="揭露动画"></a>揭露动画</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// create the animator for this view (the start radius is zero)</span></div><div class="line">Animator anim =</div><div class="line">    ViewAnimationUtils.createCircularReveal(myView, cx, cy, <span class="number">0</span>, finalRadius);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 官网基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动画]]></title>
      <url>/2018/01/07/%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<h2 id="动画笔记"><a href="#动画笔记" class="headerlink" title="动画笔记"></a>动画笔记</h2><blockquote>
<p>作者：彭欢亮  </p>
<p>时间：2018/1/7 星期日 上午 10:10:10 </p>
</blockquote>
<p><strong>Android 动画的分类 ：</strong> </p>
<h3 id="一、帧动画"><a href="#一、帧动画" class="headerlink" title="一、帧动画"></a>一、帧动画</h3><blockquote>
<p>实现帧动画的两种方式 </p>
</blockquote>
<ol>
<li>利用xml形式实现</li>
</ol>
<blockquote>
<p>在drawable目录下创建一个animation-list xml 文件，</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">	&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;animation-list xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</div><div class="line">&lt;item</div><div class="line">    android:drawable=<span class="string">"@mipmap/ic_setup"</span></div><div class="line">    android:duration=<span class="string">"500"</span> /&gt;</div><div class="line"></div><div class="line">&lt;item</div><div class="line">    android:drawable=<span class="string">"@mipmap/ic_should_get"</span></div><div class="line">    android:duration=<span class="string">"500"</span> /&gt;</div><div class="line"></div><div class="line">&lt;item</div><div class="line">    android:drawable=<span class="string">"@mipmap/ic_should_pay"</span></div><div class="line">    android:duration=<span class="string">"500"</span> /&gt;</div><div class="line">&lt;/animation-list&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>MainActivity代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ImageView imageView = (ImageView) findViewById(R.id.iv);</div><div class="line">imageView.setImageResource(R.drawable.animation_z);</div><div class="line">AnimationDrawable animation = (AnimationDrawable) imageView.getDrawable();</div><div class="line"><span class="comment">//        animation.start();</span></div><div class="line"><span class="comment">//将animationDrawable设置为imageView的背景</span></div><div class="line">imageView.setBackground(animation);</div></pre></td></tr></table></figure>
<ol>
<li>帧动画实现的第二种方式，利用代码实现 （使用场景：帧动画图片太多的情况下，建议使用此方法，不用在xml文件中一个个添加）</li>
</ol>
<blockquote>
<p>MainActivity</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ImageView imageView = (ImageView) findViewById(R.id.iv)</div><div class="line">AnimationDrawable anim = <span class="keyword">new</span> AnimationDrawable();</div><div class="line">anim.addFrame(bit2dra(R.mipmap.ic_setup), <span class="number">200</span>);</div><div class="line">anim.addFrame(bit2dra(R.mipmap.ic_should_get), <span class="number">200</span>);</div><div class="line">anim.addFrame(bit2dra(R.mipmap.ic_should_pay), <span class="number">200</span>);</div><div class="line">anim.setOneShot(<span class="keyword">false</span>);</div><div class="line">imageView.setImageDrawable(anim);</div><div class="line"></div><div class="line"><span class="comment">//bit2dra 将bitmap转换为drawable对象</span></div><div class="line"><span class="function"><span class="keyword">private</span> Drawable <span class="title">bit2dra</span><span class="params">(<span class="keyword">int</span> sourceId)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BitmapDrawable(getResources(), BitmapFactory.decodeResource(getResources(), sourceId));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 anim.setOneShot(boolean arg) 表示 ：帧动画是否执行一次 true表示执行一次，false表示循环</p>
<h3 id="二、补间动画"><a href="#二、补间动画" class="headerlink" title="二、补间动画"></a>二、补间动画</h3><ul>
<li>补间动画的分类：</li>
</ul>
<p>补间动画又可以分为四种形式，分别是 alpha（淡入淡出），translate（位移），scale（缩放大小），rotate（旋转）。</p>
<blockquote>
<p>补间动画实现方式：</p>
</blockquote>
<ol>
<li>利用xml实现</li>
</ol>
<p>首先在res目录下创建一个anim文件夹，即我们xml实现补间动画都是在res/anim/目录下添加</p>
<p><strong>alpha_anim.xml动画实现</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;alpha xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">android:duration=<span class="string">"1000"</span></div><div class="line">android:fromAlpha=<span class="string">"1.0"</span></div><div class="line">android:interpolator=<span class="string">"@android:anim/accelerate_decelerate_interpolator"</span></div><div class="line">android:toAlpha=<span class="string">"0"</span> /&gt;</div></pre></td></tr></table></figure>
<p><strong>scale_anim.xml动画实现</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;scale xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">android:duration=<span class="string">"1000"</span></div><div class="line">android:fromXScale=<span class="string">"1.0"</span></div><div class="line">android:fromYScale=<span class="string">"1.0"</span></div><div class="line">android:pivotX=<span class="string">"50%"</span></div><div class="line">android:pivotY=<span class="string">"50%"</span></div><div class="line">android:toXScale=<span class="string">"0.0"</span></div><div class="line">android:toYScale=<span class="string">"0.0"</span> /&gt;</div></pre></td></tr></table></figure>
<p>集合动画</p>
<p><strong>set_anim.xml动画集合</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;set xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">android:duration=<span class="string">"持续时间"</span></div><div class="line">android:interpolator=<span class="string">"@[package:]anim/interpolator_resource"</span></div><div class="line">android:shareInterpolator=<span class="string">"boolean"</span>&gt;</div><div class="line"></div><div class="line">&lt;alpha</div><div class="line">    android:fromAlpha=<span class="string">"float"</span></div><div class="line">    android:toAlpha=<span class="string">"float"</span> /&gt;</div><div class="line"></div><div class="line">&lt;scale</div><div class="line">    android:fromXScale=<span class="string">"float"</span></div><div class="line">    android:fromYScale=<span class="string">"float"</span></div><div class="line">    android:pivotX=<span class="string">"float"</span></div><div class="line">    android:pivotY=<span class="string">"float"</span></div><div class="line">    android:toXScale=<span class="string">"float"</span></div><div class="line">    android:toYScale=<span class="string">"float"</span> /&gt;</div><div class="line"></div><div class="line">&lt;translate</div><div class="line">    android:fromXDelta=<span class="string">"float"</span></div><div class="line">    android:fromYDelta=<span class="string">"float"</span></div><div class="line">    android:toXDelta=<span class="string">"float"</span></div><div class="line">    android:toYDelta=<span class="string">"float"</span> /&gt;</div><div class="line"></div><div class="line">&lt;rotate</div><div class="line">    android:fromDegrees=<span class="string">"float"</span></div><div class="line">    android:pivotX=<span class="string">"float"</span></div><div class="line">    android:pivotY=<span class="string">"float"</span></div><div class="line">    android:toDegrees=<span class="string">"float"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<p><strong>MainActivity代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ImageView imageView = (ImageView) findViewById(R.id.iv);</div><div class="line">Animation animation = AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.scale_anim);</div><div class="line">imageView.startAnimation(animation);</div></pre></td></tr></table></figure>
<p>AnimationUtils是系统实现的动画工具类</p>
<p><img src="http://yychat.oss-cn-hangzhou.aliyuncs.com/images/table.png.png" alt=""></p>
<ol>
<li>补间动画通过代码实现</li>
</ol>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alpha</span><span class="params">(View v)</span></span>&#123;</div><div class="line">AlphaAnimation anim = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.0f</span>, <span class="number">1.0f</span>);</div><div class="line">anim.setDuration(<span class="number">1000</span>);</div><div class="line">v.startAnimation(anim);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(View v)</span></span>&#123;</div><div class="line">RotateAnimation anim = <span class="keyword">new</span> RotateAnimation(<span class="number">0.0f</span>, -<span class="number">360f</span>, v.getWidth()/<span class="number">2</span>, v.getHeight()/<span class="number">2</span>);</div><div class="line">anim.setDuration(<span class="number">1000</span>);</div><div class="line">v.startAnimation(anim);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(View v)</span></span>&#123;</div><div class="line">ScaleAnimation anim = <span class="keyword">new</span> ScaleAnimation(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, v.getWidth() / <span class="number">2</span>, v.getHeight() / <span class="number">2</span>);</div><div class="line">anim.setDuration(<span class="number">1000</span>);</div><div class="line">v.startAnimation(anim);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">translate</span><span class="params">(View v)</span></span>&#123;</div><div class="line">TranslateAnimation anim = <span class="keyword">new</span> TranslateAnimation(<span class="number">0.0f</span>, <span class="number">10.0f</span>, <span class="number">100f</span>, <span class="number">200f</span>);</div><div class="line">anim.setDuration(<span class="number">1000</span>);</div><div class="line">v.startAnimation(anim);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(View v)</span></span>&#123;</div><div class="line">AnimationSet anim = <span class="keyword">new</span> AnimationSet(<span class="keyword">this</span>, <span class="keyword">null</span>);</div><div class="line">AlphaAnimation alpha = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.0f</span>, <span class="number">1.0f</span>);</div><div class="line">RotateAnimation rotate = <span class="keyword">new</span> RotateAnimation(<span class="number">0.0f</span>, -<span class="number">360f</span>, v.getWidth()/<span class="number">2</span>, v.getHeight()/<span class="number">2</span>);</div><div class="line">anim.setDuration(<span class="number">1000</span>);</div><div class="line">anim.addAnimation(alpha);</div><div class="line">anim.addAnimation(rotate);</div><div class="line">v.startAnimation(anim);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、-Android-属性动画（Property-Animation）"><a href="#三、-Android-属性动画（Property-Animation）" class="headerlink" title="三、 Android 属性动画（Property Animation）"></a>三、 Android 属性动画（Property Animation）</h3><blockquote>
<p>属性动画相关的类：</p>
</blockquote>
<ol>
<li>ObjectAnimator (动画的执行类)</li>
<li>ValueAnimator (动画的执行类)</li>
<li>AnimatorSet (用于控制一组动画的执行：线性，一起，每个动画的先后执行等)</li>
<li>AnimatorInflater （ 用户加载属性动画的xml文件）</li>
<li>TypeEvaluator （类型估值，主要用于设置动画操作属性的值）</li>
<li>TimeInterpolator（时间插值） </li>
</ol>
<p><strong>属性动画与补间动画的区别：</strong></p>
<p>补间动画有一个最大的缺陷，就是它只是改变了View的显示效果而已，并不会真正的改变View的属性。场景：如果要改变view的宽度，补间动画实现不了，而属性动画可以。</p>
<p><strong>ObjectAnimator用法</strong></p>
<blockquote>
<p>ObjectAnimator提供了几个方法（ofInt、ofFloat、ofObject…），都是用来设置动画作用的元素、作用的属性、动画开始、结束、以及中间的任意个属性值。</p>
</blockquote>
<ul>
<li>translationX、translationY：这两个属性作为一种增量来控制着View对象从它布局容器的左上角坐标开始的位置。</li>
<li>rotation、rotationX、rotationY：这三个属性控制着View对象围绕它的支点进行2D和3D的旋转。</li>
<li>scaleX和scaleY：这两个属性控制着View对象围绕它的支点进行2D缩放。</li>
<li>pivotX和pivotY：这两个属性控制着View对象的支点位置，围绕这个支点进行旋转和缩放变换处理。默认情况下，该支点的位置就是View对象的中心点。</li>
<li>alpha：它表示View对象的alpha透明度。</li>
<li>x、y：这是两个简单的实用的属性，它描述了View对象在它的容器中最终的位置。</li>
<li>BackgroundColor：改变背景颜色</li>
</ul>
<blockquote>
<p>注意 缩放、反转等都有中心点或者轴，默认中心缩放，和中间对称线为反转线</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator.ofFloat(imageView,<span class="string">"rotationX"</span>,<span class="number">0.0f</span>,<span class="number">360</span>.f,<span class="number">90.0f</span>,<span class="number">360.0f</span>)</div><div class="line">           .setDuration(<span class="number">2000</span>)</div><div class="line">           .start();</div></pre></td></tr></table></figure>
<blockquote>
<p>PropertyValuesHolder：以先将动画属性和值暂时的存储起来，后一起执行，在有些时候可以使用替换掉AnimatorSet，减少代码量。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PropertyValuesHolder scaleX = PropertyValuesHolder.ofFloat(<span class="string">"scaleX"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5f</span>);</div><div class="line">   PropertyValuesHolder scaleY = PropertyValuesHolder.ofFloat(<span class="string">"scaleY"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5f</span>);</div><div class="line">   PropertyValuesHolder alpha = PropertyValuesHolder.ofFloat(<span class="string">"alpha"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5f</span>);</div><div class="line">   ObjectAnimator.ofPropertyValuesHolder(imageView,scaleX,scaleY,alpha)</div><div class="line">           .setDuration(<span class="number">2000</span>)</div><div class="line">           .start();</div></pre></td></tr></table></figure>
<p>ObjectAnimator简单的用法介绍完毕下面开始介绍ValueAnimator</p>
<p><strong>ValueAnimator介绍以及用法</strong></p>
<p>ValueAnimator是整个属性动画中最核心的一个类，前面介绍的ObjectAnimator也是继承自ValueAnimator。通过前面对ObjectAnimator的介绍，我们知道属性动画的实现机制是通过不断的地对View属性进行操作来实现的，而初始值和结束值之间的动画过渡就是由ValueAnimator这个类负责计算的。 </p>
<p>它的内部使用一种时间循环的机制来计算值与值之间的动画过渡，我们只需要将初始值和结束值提供给ValueAnimator，并且告诉它动画所需运行的时长，那么ValueAnimator就会自动帮助我们完成从初始值平滑过渡到结束值这样的效果。 </p>
<p>ValueAnimator本身不提供任何动画效果，它更像一个数值发生器，用来产生具有一定规律的数字，从而让调用者来控制动画的实现过程。通常情况下，在ValueAnimator的AnimatorUpdateListener中监听数值的变化，从而完成动画的切换。</p>
<blockquote>
<p>实现一个计时器效果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startTimeClock</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class="number">0</span>, <span class="number">60</span>);</div><div class="line">valueAnimator.setDuration(<span class="number">1000</span> * <span class="number">60</span>);</div><div class="line">valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> time = (<span class="keyword">int</span>) valueAnimator.getAnimatedValue();</div><div class="line">        Log.e(TAG, <span class="string">"time="</span> + time);</div><div class="line">        mTextView.setText(time + <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">valueAnimator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>实现一个物体自由落体</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verticalRun</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mHeight = getResources().getDisplayMetrics().heightPixels;</div><div class="line">    ValueAnimator animator = ValueAnimator.ofFloat(<span class="number">0</span>, mHeight - mBlueBall.getHeight());</div><div class="line">    animator.setTarget(mBlueBall);</div><div class="line">    animator.setDuration(<span class="number">1000</span>)</div><div class="line">            .start();</div><div class="line">    animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener()</div><div class="line">    &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span></span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            Float value = (Float) animation.getAnimatedValue();</div><div class="line">            Log.e(TAG, <span class="string">"onAnimationUpdate: value = "</span>+value );</div><div class="line"></div><div class="line">            mBlueBall.setTranslationY((Float) animation.getAnimatedValue());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>动画的监听事件</strong></p>
<ol>
<li>animator.addListener(AnimatorListener、AnimatorUpdateListener 对象)</li>
</ol>
<blockquote>
<p>实现AnimatorLisener对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">animator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>实现AnimatorUpdateListener对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">animator.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">       &#125;</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>实现AnimatorLisener、AnimatorUpdateListener 区别在于：前面这个监听需要实现所有的方法，而后面这个只需要实现其中一种方法即可。</p>
</blockquote>
<ol>
<li>animator.addUpdateListener(AnimatorUpdateListener)</li>
</ol>
<p>上面有个计时器的例子，可以通过实现的方法onAnimationUpdate（ValueAnimator animation）拿到相应的对象</p>
<p><strong>AnimatorSet介绍与使用</strong></p>
<p>介绍：动画的集合，在补间动画中也有个一个动画的集合类AnimationSet,所以AnimatorSet同样的效果，可以帮助我们实现组合属性动画的效果。</p>
<p>AnimatorSet这个类提供了一个play()方法，如果我们向这个方法中传入一个Animator对象(ObjectAnimator或者ValueAnimator)将会返回一个AnimatorSet.Builder的实例，AnimatorSet.Builder中包含了以下四个方法：</p>
<ul>
<li>after(Animator anim) ： 将现有动画插入到传入的动画之后执行。</li>
<li>after(long delay)：将现有的动画延迟指定的毫秒后执行。</li>
<li>before(Animator anim)：将现有的动画插入到传入的动画之前执行。</li>
<li>with(Animator anim)：将现有的动画和传入的动画同时执行。</li>
</ul>
<p>例如我们想让一个TextView先从屏幕外移动到屏幕内，然后旋转360度，同时旋转过程中进行淡入淡出的效果，就可以写出如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">multiAnimator</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 移动动画</span></div><div class="line">ObjectAnimator transAnimator = ObjectAnimator.ofFloat(mTextView, <span class="string">"translationX"</span>, -<span class="number">500f</span>, <span class="number">300f</span>);</div><div class="line"></div><div class="line"><span class="comment">// 旋转动画</span></div><div class="line">ObjectAnimator rotationAnimator = ObjectAnimator.ofFloat(mTextView, <span class="string">"rotation"</span>, <span class="number">0f</span>, <span class="number">360f</span>);</div><div class="line"></div><div class="line"><span class="comment">// 淡入淡出</span></div><div class="line">ObjectAnimator alphaAnimator = ObjectAnimator.ofFloat(mTextView, <span class="string">"alpha"</span>, <span class="number">1f</span>, <span class="number">0f</span>, <span class="number">1f</span>);</div><div class="line"></div><div class="line">AnimatorSet animatorSet = <span class="keyword">new</span> AnimatorSet();</div><div class="line">animatorSet.play(rotationAnimator).with(alphaAnimator).after(transAnimator);</div><div class="line">animatorSet.setDuration(<span class="number">5000</span>);</div><div class="line">animatorSet.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</div><div class="line">animatorSet.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Animator监听器</strong></p>
<p>一个完整的动画具有start、Repeat、End、Cancel四个过程，Android提供了接口，让我们能够很容易监听到这些事件。示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">animatorSet.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">    Log.e(TAG, <span class="string">"onAnimationStart"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">    Log.e(TAG, <span class="string">"onAnimationEnd"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">    Log.e(TAG, <span class="string">"onAnimationCancel"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">    Log.e(TAG, <span class="string">"onAnimationRepeat"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>使用xml文件创建属性动画</strong></p>
<ol>
<li>在res下创建一个animator的文件夹，即res/animator/.xml</li>
</ol>
<p><strong>例如：sacleX.xml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;  </div><div class="line">&lt;objectAnimator xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </div><div class="line">android:duration=<span class="string">"1000"</span>  </div><div class="line">android:propertyName=<span class="string">"scaleX"</span>  </div><div class="line">android:valueFrom=<span class="string">"1.0"</span>  </div><div class="line">android:valueTo=<span class="string">"2.0"</span>  </div><div class="line">android:valueType=<span class="string">"floatType"</span> &gt;  </div><div class="line">&lt;/objectAnimator&gt;</div></pre></td></tr></table></figure>
<ol>
<li>使用AnimatorInflater来加载动画的资源文件，然后设置给相应的target即可。</li>
</ol>
<p><strong>MainActivity.java 代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadXml</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">Animator animator = AnimatorInflater.loadAnimator(<span class="keyword">this</span>, R.animator.scalex);</div><div class="line">animator.setTarget(mBlueBall);</div><div class="line">animator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其它类似一致，下面讲解利用xml实现属性动画集合</p>
<p><strong>animator_set</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;  </div><div class="line">&lt;set xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </div><div class="line">android:ordering=<span class="string">"together"</span> &gt;  </div><div class="line">  </div><div class="line">&lt;objectAnimator  </div><div class="line">    android:duration=<span class="string">"1000"</span>  </div><div class="line">    android:propertyName=<span class="string">"scaleX"</span>  </div><div class="line">    android:valueFrom=<span class="string">"1"</span>  </div><div class="line">    android:valueTo=<span class="string">"0.5"</span> &gt;  </div><div class="line">&lt;/objectAnimator&gt;  </div><div class="line">&lt;objectAnimator  </div><div class="line">    android:duration=<span class="string">"1000"</span>  </div><div class="line">    android:propertyName=<span class="string">"scaleY"</span>  </div><div class="line">    android:valueFrom=<span class="string">"1"</span>  </div><div class="line">    android:valueTo=<span class="string">"0.5"</span> &gt;  </div><div class="line">&lt;/objectAnimator&gt;  </div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<p>使用set标签，有一个orderring属性设置为together,还有另一个值：sequentially（表示一个接一个执行)。</p>
<p><strong>MainActivity.java代码如下</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Animator animator = AnimatorInflater.loadAnimator(<span class="keyword">this</span>, R.animator.scalex);</div><div class="line">    animator.setTarget(mBlueBall);</div><div class="line">    animator.start();</div></pre></td></tr></table></figure>
<p>代码同上。</p>
<p><strong>布局动画</strong></p>
<p>主要使用LayoutTransition为布局的容器设置动画，当容器中的视图层次发生变化时存在过渡的动画效果。（略）</p>
<p><strong>View的anim方法</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mBlueBall.animate().alpha(<span class="number">0</span>)</div><div class="line">            .y(<span class="number">200</span>)</div><div class="line">            .setDuration(<span class="number">3000</span>)</div><div class="line">            .withStartAction(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    Log.e(TAG, <span class="string">"run: withStartAction"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .withEndAction(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    Log.e(TAG, <span class="string">"run: withEndAction"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .start();</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>属性动画原理</strong></p>
</blockquote>
<p>属性动画要求动画作用的对象提供该属性的get和set方法，属性动画根据你传递的该熟悉的初始值和最终值，以动画的效果多次去调用set方法，每次传递给set方法的值都不一样，确切来说是随着时间的推移，所传递的值越来越接近最终值。如果让属性动画生效，要同时满足两个条件：</p>
<ol>
<li>object必须要提供setXxx方法，如果动画的时候没有传递初始值，那么还要提供getXxx方法，因为系统要去拿xxx属性的初始值（如果这条不满足，程序直接Crash）</li>
<li>object的setXxx对属性xxx所做的改变必须能够通过某种方法反映出来，比如会带来ui的改变啥的（如果这条不满足，动画无效果但不会Crash）</li>
</ol>
<blockquote>
<p>属性动画为什么不能改变Button的宽高</p>
</blockquote>
<p>因为Button的内部并没有自己的getWith()、setWidth()方法，为什么这样说，button继承至TextView,持有TextView的get、set方法。所以我们对Button做宽高的改变是，没有 效果的。</p>
<ol>
<li><strong>解决方法 1 ： 用一个类来包装原始对象，间接为其提供get和set方法</strong></li>
</ol>
<blockquote>
<p>包装类如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewWrapper</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> View mView;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewWrapper</span><span class="params">(View mView)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mView = mView;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</div><div class="line">    mView.getLayoutParams().width = width;</div><div class="line">    mView.requestLayout();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mView.getLayoutParams().width;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">    mView.getLayoutParams().height = height;</div><div class="line">    mView.requestLayout();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mView.getLayoutParams().height;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>MainActivity.java 代码：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ViewWrapper viewWrapper = <span class="keyword">new</span> ViewWrapper(mBtn);</div><div class="line">PropertyValuesHolder proW = PropertyValuesHolder.ofInt(<span class="string">"width"</span>, width, width * <span class="number">2</span>);</div><div class="line">PropertyValuesHolder proH = PropertyValuesHolder.ofInt(<span class="string">"height"</span>, height, height * <span class="number">3</span>);</div><div class="line">ObjectAnimator objectAnimator = ObjectAnimator.ofPropertyValuesHolder(viewWrapper, proW, proH);</div><div class="line"></div><div class="line">objectAnimator.setDuration(<span class="number">3000</span>).start();</div></pre></td></tr></table></figure>
<ol>
<li><strong>解决方法2： 采用ValueAnimator，监听动画过程，自己实现属性的改变</strong></li>
</ol>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performAnimate</span><span class="params">(<span class="keyword">final</span> View mTarget, <span class="keyword">final</span> <span class="keyword">int</span> start, <span class="keyword">final</span> <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class="number">1</span>, <span class="number">100</span>);</div><div class="line">    valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        <span class="comment">//持有一个IntEvaluator对象，用来估值使用</span></div><div class="line">        <span class="keyword">private</span> IntEvaluator mEvaluator = <span class="keyword">new</span> IntEvaluator();</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">            <span class="comment">//获得当前动画的进度</span></div><div class="line">            <span class="keyword">int</span> value = (Integer) animation.getAnimatedValue();</div><div class="line">            Log.e(TAG, <span class="string">"onAnimationUpdate: curr value = "</span> + value);</div><div class="line">            <span class="keyword">float</span> fraction = value / <span class="number">100f</span>;</div><div class="line">            mTarget.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);</div><div class="line">            mTarget.requestLayout();</div><div class="line">            mTarget.invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    valueAnimator.setDuration(<span class="number">3000</span>).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>用ValueAnimator来做动画。ValueAnimator并不会实质的做什么。所以需要后面的AnimatorUpdateListener来做一些粗活儿。这里指定的从1到100也没有什么实质的作用。并不是把按钮的宽度从1变到100。后面的代码很清晰的表达了这一点。</li>
<li>据这个fraction的百分比来计算当前时间片对应的按钮宽度是多少。当前宽度 = 初始宽度 + fraction * （结束宽度 - 初始宽度）。</li>
</ul>
<p>​    </p>
]]></content>
      
        <categories>
            
            <category> 动画 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 动画 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
