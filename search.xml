<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ButterKnife源码分析</title>
      <link href="/2019/08/07/ButterKnife%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/08/07/ButterKnife%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>又到一年七夕节，祝愿全天下的有情人终成眷属。</p><p>一直以来项目中都是使用别人的框架，使用起来很熟练，但是源码一般都是大致粗略的看一下，弄懂整个流程就不去管他了，这段时间我都是在跟源码打交到深有体会，除非知识有一定的沉淀，否则学到的终究只是皮毛。所以打算想要学习的更深入，建议还是多多看源码，不光技术提升，对设计模式、封装思想也会有更深刻的领悟。</p><p>本篇文章不涉及如何自定义ButterKnifeAPT插件，如果需要请浏览我写的Demo，效果图如下：</p><p><img src="https://penghuanliang.github.io/images/pics/bg_butterknife_result.png" alt="1565162963976"></p><blockquote><p>基本的BindView()，以及OnClick()是没有问题的，至于其它的BindColor()原理都是一样</p></blockquote><h3 id="ButterKnife简介"><a href="#ButterKnife简介" class="headerlink" title="ButterKnife简介"></a>ButterKnife简介</h3><p>ButterKnife是由Android之神<a href="https://github.com/JakeWharton" target="_blank" rel="noopener">JakeWharton</a>开发出来的，通过APT在编译时期获取Java代码中相应的注解并生成对应代码，告别了传统的手动findViewById()，setOnClickListener()等，从而提升代码可读性、开发效率。</p><h3 id="ButterKnife工作流程"><a href="#ButterKnife工作流程" class="headerlink" title="ButterKnife工作流程"></a>ButterKnife工作流程</h3><p><img src="https://penghuanliang.github.io/images/pics/ic_butterknife_process.png" alt="流程图"></p><blockquote><p>APT工作流程大致为两步：</p><ol><li>APT通过扫描解析Java源文件，获取相应的注解，并通过注解生成相应的Java文件。</li><li>生成的Java文件后继续编译，APT继续扫描，如果有相应的文件生成则继续重复此步骤。</li></ol></blockquote><h3 id="ButterKnife源码分析"><a href="#ButterKnife源码分析" class="headerlink" title="ButterKnife源码分析"></a>ButterKnife源码分析</h3><ul><li>首先我们看下ButterKnifeProcessor#init()初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterKnifeProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment env)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(env);</span><br><span class="line">        <span class="comment">//...省略</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这里获取到抽象语法树（AST）下面简单描述一下AST</span></span><br><span class="line">            trees = Trees.instance(processingEnv);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象语法树(AST)：</strong> 全称为abstract  synatx tree，是通过语法分析器将源代码读入、解析，并建立语法树。</p><p><a href="https://www.jianshu.com/p/0f1c7b3e907f" target="_blank" rel="noopener">这里有关于AST详细描述与简单的使用</a></p><p><strong>为什么这里需要使用到AST?</strong></p><p>我们在使用<figure class="highlight plain"><figcaption><span>必须是常量，但是在我们library项目中所有生成的资源ID是静态变量，这也是为什么我们在library中资源文件为什么不能使用switch-case的原因。从而导致了ButterKnife不能正常使用。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">为了解决该问题，通过利用 ```AST``` 拷贝一份 ```R.java``` 命名成 ```R2.java```，```R2.java``` 里面的资源声明都是 final 的。这样就躲过了语法检查。同时使用自定义```TreeScanner```扫描注解中的资源声明例如```R.id.tv_frist```拿到```tv_first```存储起来，后续遍历生成源文件时写入。这里下面分析他是如何做到的，这里就不再过多描述了。</span><br><span class="line"></span><br><span class="line">- ##### 接下来开始从```ButterKnifeProcessor#process()``` 入口开始分析：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@AutoService(Processor.class)</span><br><span class="line">public final class ButterKnifeProcessor extends AbstractProcessor &#123;</span><br><span class="line">    //方法注解、监听一些基本事件</span><br><span class="line">    private static final List&lt;Class&lt;? extends Annotation&gt;&gt; LISTENERS = Arrays.asList(</span><br><span class="line">            OnCheckedChanged.class,</span><br><span class="line">            OnClick.class,</span><br><span class="line">            OnEditorAction.class,</span><br><span class="line">            OnFocusChange.class, </span><br><span class="line">            OnItemClick.class, </span><br><span class="line">            OnItemLongClick.class, </span><br><span class="line">            OnItemSelected.class, </span><br><span class="line">            OnLongClick.class, </span><br><span class="line">            OnPageChange.class, </span><br><span class="line">            OnTextChanged.class, </span><br><span class="line">            OnTouch.class </span><br><span class="line">    );</span><br><span class="line">    //...省略</span><br><span class="line">    @Override</span><br><span class="line">    public boolean process(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env) &#123;</span><br><span class="line">        //解析注解</span><br><span class="line">        Map&lt;TypeElement, BindingSet&gt; bindingMap = findAndParseTargets(env);</span><br><span class="line">        //遍历注解生成java文件</span><br><span class="line">        for (Map.Entry&lt;TypeElement, BindingSet&gt; entry : bindingMap.entrySet()) &#123;</span><br><span class="line">            TypeElement typeElement = entry.getKey();</span><br><span class="line">            BindingSet binding = entry.getValue();</span><br><span class="line">            </span><br><span class="line">            JavaFile javaFile = binding.brewJava(sdk, debuggable);</span><br><span class="line">            try &#123;</span><br><span class="line">                javaFile.writeTo(filer);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                error(typeElement, &quot;Unable to write binding for type %s: %s&quot;, </span><br><span class="line">                      typeElement, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>接下来我们分析一下findAndParseTargets()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;TypeElement, BindingSet&gt; <span class="title">findAndParseTargets</span><span class="params">(RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">        Map&lt;TypeElement, BindingSet.Builder&gt; builderMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        Set&lt;TypeElement&gt; erasedTargetNames = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">//...省略其它注解</span></span><br><span class="line">    <span class="comment">//遍历@BindView,然后将其过滤存储起来</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : env.getElementsAnnotatedWith(BindView.class)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                parseBindView(element, builderMap);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                error(element, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历各种事件,然后将其过滤存储起来</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;? extends Annotation&gt; listener : LISTENERS) &#123;</span><br><span class="line">            findAndParseListener(env, listener, builderMap, erasedTargetNames);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builderMap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="分析-BindView-parseBindView-做了什么"><a href="#分析-BindView-parseBindView-做了什么" class="headerlink" title="@分析 BindView#parseBindView()做了什么"></a>@分析 BindView#parseBindView()做了什么</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseBindView</span><span class="params">(Element element, Map&lt;TypeElement, BindingSet.Builder&gt; builderMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Set&lt;TypeElement&gt; erasedTargetNames)</span> </span>&#123;</span><br><span class="line">        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</span><br><span class="line"><span class="comment">// 这里先做校验，检测@BindView注解是否作用在field属性上,检测是否作用在系统类中的属性上</span></span><br><span class="line">    <span class="comment">//下面列出代码 #1</span></span><br><span class="line">        <span class="keyword">boolean</span> hasError = isInaccessibleViaGeneratedCode(BindView.class, <span class="string">"fields"</span>, element)</span><br><span class="line">                || isBindingInWrongPackage(BindView.class, element);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验元素是否作用在View 或者 继承至View的子类上</span></span><br><span class="line">        TypeMirror elementType = element.asType();</span><br><span class="line">        <span class="keyword">if</span> (elementType.getKind() == TypeKind.TYPEVAR) &#123;</span><br><span class="line">            TypeVariable typeVariable = (TypeVariable) elementType;</span><br><span class="line">            elementType = typeVariable.getUpperBound();</span><br><span class="line">        &#125;</span><br><span class="line">        Name qualifiedName = enclosingElement.getQualifiedName();</span><br><span class="line">        Name simpleName = element.getSimpleName();</span><br><span class="line">        <span class="keyword">if</span> (!isSubtypeOfType(elementType, VIEW_TYPE) &amp;&amp; !isInterface(elementType)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elementType.getKind() == TypeKind.ERROR) &#123;</span><br><span class="line">                note(element, <span class="string">"@%s field with unresolved type (%s) "</span></span><br><span class="line">                                + <span class="string">"must elsewhere be generated as a View or interface. (%s.%s)"</span>,</span><br><span class="line">                        BindView.class.getSimpleName(), elementType, qualifiedName, simpleName);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                error(element, <span class="string">"@%s fields must extend from View or be an interface. (%s.%s)"</span>,</span><br><span class="line">                        BindView.class.getSimpleName(), qualifiedName, simpleName);</span><br><span class="line">                hasError = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasError) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取属性信息: id 、 name  </span></span><br><span class="line">        <span class="keyword">int</span> id = element.getAnnotation(BindView.class).value();</span><br><span class="line">        BindingSet.Builder builder = builderMap.get(enclosingElement);</span><br><span class="line">    <span class="comment">//------ 这里画重点,在下面分析 在#2.1分析 elementToId()</span></span><br><span class="line">        Id resourceId = elementToId(element, BindView.class, id);</span><br><span class="line">        <span class="keyword">if</span> (builder != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//从集合中获取,如果已经绑定过,则输出error信息</span></span><br><span class="line">            String existingBindingName = builder.findExistingBindingName(resourceId);</span><br><span class="line">            <span class="keyword">if</span> (existingBindingName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                error(element, <span class="string">"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)"</span>,</span><br><span class="line">                        BindView.class.getSimpleName(), id, existingBindingName,</span><br><span class="line">                        enclosingElement.getQualifiedName(), element.getSimpleName());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//初始化 BindingSet.Builder, 在#2.2分析 getOrCreateBindingBuilder()</span></span><br><span class="line">            builder = getOrCreateBindingBuilder(builderMap, enclosingElement);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//--------end---------</span></span><br><span class="line">        String name = simpleName.toString();</span><br><span class="line">        TypeName type = TypeName.get(elementType);</span><br><span class="line">        <span class="keyword">boolean</span> required = isFieldRequired(element);</span><br><span class="line">    <span class="comment">//将属性添加至BindingSet.Builder中, 在#3分析</span></span><br><span class="line">        builder.addField(resourceId, <span class="keyword">new</span> FieldViewBinding(name, type, required));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the type-erased version to the valid binding targets set.</span></span><br><span class="line">        erasedTargetNames.add(enclosingElement);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里主要做了三件事情：</p><ol><li>校验@BindView作用范围、作用对象是否正确，其次校验是否是作用于View对象获取View的子类对象。</li><li>通过创建BindingSet.Builder对象，然后将获取到的注解 id、name 、type 存至该对象。将BindingSet.Builder存放到builderMap中，用于后续过滤去重或者添加其它属性。</li><li>addField() 将注解对象添加至builder对象中</li></ol><p>这里创建BindingSet.Builder对象不仅仅是用于存储某一个注解的单独属性，它存储的是同一个类型所有注解属性、方法，用于后续遍历生成Java文件时写入相关的代码</p></blockquote><ol><li>校验如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.这个方法主要是校验修饰符、作用是否在class中、最后再校验class修饰符</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInaccessibleViaGeneratedCode</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   String targetThing, Element element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasError = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//返回当前 类</span></span><br><span class="line">        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断field修饰符,如果时private static修饰 抛出异常</span></span><br><span class="line">        Set&lt;Modifier&gt; modifiers = element.getModifiers();</span><br><span class="line">        <span class="keyword">if</span> (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) &#123;</span><br><span class="line">            error(element, <span class="string">"@%s %s must not be private or static. (%s.%s)"</span>,</span><br><span class="line">                    annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),</span><br><span class="line">                    element.getSimpleName());</span><br><span class="line">            hasError = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不是在class中使用该注解,抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (enclosingElement.getKind() != CLASS) &#123;</span><br><span class="line">            error(enclosingElement, <span class="string">"@%s %s may only be contained in classes. (%s.%s)"</span>,</span><br><span class="line">                    annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),</span><br><span class="line">                    element.getSimpleName());</span><br><span class="line">            hasError = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验类的修饰符</span></span><br><span class="line">        <span class="keyword">if</span> (enclosingElement.getModifiers().contains(PRIVATE)) &#123;</span><br><span class="line">            error(enclosingElement, <span class="string">"@%s %s may not be contained in private classes. (%s.%s)"</span>,</span><br><span class="line">                    annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),</span><br><span class="line">                    element.getSimpleName());</span><br><span class="line">            hasError = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hasError;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//2.这个方法主要是校验class位置是否为系统类 </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBindingInWrongPackage</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Element element)</span> </span>&#123;</span><br><span class="line">        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</span><br><span class="line">        String qualifiedName = enclosingElement.getQualifiedName().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qualifiedName.startsWith(<span class="string">"android."</span>)) &#123;</span><br><span class="line">            error(element, <span class="string">"@%s-annotated class incorrectly in Android framework package. (%s)"</span>,</span><br><span class="line">                    annotationClass.getSimpleName(), qualifiedName);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (qualifiedName.startsWith(<span class="string">"java."</span>)) &#123;</span><br><span class="line">            error(element, <span class="string">"@%s-annotated class incorrectly in Java framework package. (%s)"</span>,</span><br><span class="line">                    annotationClass.getSimpleName(), qualifiedName);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//3.校验类型@BindView时这里传入的typeMirror="android.widget.TextView"、otherType="android.view.View"</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSubtypeOfType</span><span class="params">(TypeMirror typeMirror, String otherType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果两者一致直接 return true</span></span><br><span class="line">        <span class="keyword">if</span> (isTypeEqual(typeMirror, otherType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//如果 typeMirror 不是类/接口 return false</span></span><br><span class="line">        <span class="keyword">if</span> (typeMirror.getKind() != TypeKind.DECLARED) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//举例: 如果是TextView, declaredType: android.widget.TextView</span></span><br><span class="line">        DeclaredType declaredType = (DeclaredType) typeMirror;</span><br><span class="line">    <span class="comment">// typeArguments 这里主要是用于获取泛型中的属性,判断泛型种类型</span></span><br><span class="line">        List&lt;? extends TypeMirror&gt; typeArguments = declaredType.getTypeArguments();</span><br><span class="line">        <span class="keyword">if</span> (typeArguments.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            StringBuilder typeString = <span class="keyword">new</span> StringBuilder(declaredType.asElement().toString());</span><br><span class="line">            typeString.append(<span class="string">'&lt;'</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; typeArguments.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    typeString.append(<span class="string">','</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                typeString.append(<span class="string">'?'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            typeString.append(<span class="string">'&gt;'</span>);</span><br><span class="line">            <span class="keyword">if</span> (typeString.toString().equals(otherType)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Element element = declaredType.asElement();</span><br><span class="line">        <span class="keyword">if</span> (!(element <span class="keyword">instanceof</span> TypeElement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TypeElement typeElement = (TypeElement) element;</span><br><span class="line">    <span class="comment">//判断父类是否与otherType一致</span></span><br><span class="line">        TypeMirror superType = typeElement.getSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (isSubtypeOfType(superType, otherType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//继承接口判断</span></span><br><span class="line">        <span class="keyword">for</span> (TypeMirror interfaceType : typeElement.getInterfaces()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSubtypeOfType(interfaceType, otherType)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>校验就到这里结束了，主要做了这几个判断：</p><p>注解作用对象，作用类，修饰符检测以及判断是否是View类型或继承类型</p></blockquote><ol start="2"><li><p>1 在BindingSet.Builder构建之前，通过 #elementToId(element, BindView.class, id) 生成了一个Id对象 。</p><p>下面我们看看具体做了什么：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Id <span class="title">elementToId</span><span class="params">(Element element, Class&lt;? extends Annotation&gt; annotation, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取给定element上的@BindView的tree节点,如果找不到就为null</span></span><br><span class="line">        <span class="comment">//这里的tree = @BindView(value = R.id.tv_first)</span></span><br><span class="line">        JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));</span><br><span class="line">        <span class="keyword">if</span> (tree != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//每次都会清空集合</span></span><br><span class="line">            rScanner.reset();</span><br><span class="line">            <span class="comment">//通过TreeScanner根据给定的JCTree对象提供的位置查找到具体的对象</span></span><br><span class="line">            <span class="comment">//如果存在，回调RScanner中的 visitSelect()</span></span><br><span class="line">            tree.accept(rScanner);</span><br><span class="line">            <span class="keyword">if</span> (!rScanner.resourceIds.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//返回Id 对象</span></span><br><span class="line">                <span class="keyword">return</span> rScanner.resourceIds.values().iterator().next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Id(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RScanner</span> <span class="keyword">extends</span> <span class="title">TreeScanner</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Id&gt; resourceIds = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSelect</span><span class="params">(JCTree.JCFieldAccess jcFieldAccess)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//symbol可以看作注解相关的控件，比如这里symbol相当于TextView</span></span><br><span class="line">            <span class="comment">//其中包含一些TetVeiw属性,比如 控件id name type等</span></span><br><span class="line">            Symbol symbol = jcFieldAccess.sym;</span><br><span class="line">            <span class="keyword">if</span> (symbol.getEnclosingElement() != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; symbol.getEnclosingElement().getEnclosingElement() != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; symbol.getEnclosingElement().getEnclosingElement().enclClass() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//这里获取控件id</span></span><br><span class="line">                    <span class="keyword">int</span> value = (Integer) requireNonNull(((Symbol.VarSymbol) symbol).getConstantValue());</span><br><span class="line">                    <span class="comment">//创建Id并存放至resourceIds集合中,用于后续判断，防止重复添加注解对象</span></span><br><span class="line">                    resourceIds.put(value, <span class="keyword">new</span> Id(value, symbol));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitLiteral</span><span class="params">(JCTree.JCLiteral jcLiteral)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> value = (Integer) jcLiteral.value;</span><br><span class="line">                resourceIds.put(value, <span class="keyword">new</span> Id(value));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            resourceIds.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>主要就是创建注解所对应的Id对象，这里有两个关键的东西：</p><ul><li>JCTree ： 在编译时期我们的代码会被JavacParser按照一定的规则进行解析形成具有一定结构的语法树，每一个语法树上的节点我们称之为JCTree，JCTree包含了对象所在语法树上的位置(pos)、类型(type)等信息</li><li>Symbol ：我在这里就把它看作是包含TextView部分属性的一个对象，<a href="https://static.javadoc.io/org.kohsuke.sorcerer/sorcerer-javac/0.11/javax/lang/model/element/Element.html" target="_blank" rel="noopener">Symbol专业描述点这里</a></li></ul><p>为什么不直接通过反射获取注解里面的属性，而要通过获取JCTree上节点？</p><p>我们知道 Android 项目中会通过自动生成一个 R.java 类的方式来保存项目中所有资源文件的标识。在主项目中生成的 R.java 中的资源声明是一个静态常量，而在 module 中它却是一个静态变量。这是为什么呢？我们知道在 java 中如果某个值被声明成常量（用 final 修饰），则在编译后，该常量会被直接替换成值。</p><p>而通过获取到<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt; AST到这里算是使用结束了，就是在编译时期获取相应的代码字段，存储在Id中，用于后续文件输出，也是避免library中资源id带来的一些问题。</span><br><span class="line"></span><br><span class="line">2. 2 分析 BindingSet.Builder对象构建：</span><br><span class="line"></span><br><span class="line">```java </span><br><span class="line">private BindingSet.Builder getOrCreateBindingBuilder(</span><br><span class="line">            Map&lt;TypeElement, BindingSet.Builder&gt; builderMap, TypeElement enclosingElement) &#123;</span><br><span class="line">        BindingSet.Builder builder = builderMap.get(enclosingElement);</span><br><span class="line">        if (builder == null) &#123;</span><br><span class="line">            //构建Builder对象</span><br><span class="line">            builder = BindingSet.newBuilder(enclosingElement);</span><br><span class="line">            builderMap.put(enclosingElement, builder);</span><br><span class="line">        &#125;</span><br><span class="line">        return builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">// BindingSet.Builder#newBuilder(obj),具体构建流程如下，这里obj:com.zl.custombutterknife.MainActivity</span><br><span class="line">static Builder newBuilder(TypeElement enclosingElement) &#123;</span><br><span class="line">    //typeMirror:com.zl.custombutterknife.MainActivity | 输入具体的代码看起来更形象</span><br><span class="line">    TypeMirror typeMirror = enclosingElement.asType();</span><br><span class="line">//这里 VIEW_TYPE、isSubtypeOfType（）是ButterKnifeProcessor中的 VIEW_TYPE=&quot;android.view.View&quot;</span><br><span class="line">    //区分当前类型是 View、Activity、Dialog </span><br><span class="line">    boolean isView = isSubtypeOfType(typeMirror, VIEW_TYPE);//这个就是false 了</span><br><span class="line">    boolean isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE); //这个就是 true 了</span><br><span class="line">    boolean isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE); // false </span><br><span class="line">//这个TypeName是获取 typeMirror一些属性，比如：packageName,simpleName,canonicalName等</span><br><span class="line">    TypeName targetType = TypeName.get(typeMirror);</span><br><span class="line">    if (targetType instanceof ParameterizedTypeName) &#123;</span><br><span class="line">      targetType = ((ParameterizedTypeName) targetType).rawType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String packageName = getPackage(enclosingElement).getQualifiedName().toString();</span><br><span class="line">    String className = enclosingElement.getQualifiedName().toString().substring(</span><br><span class="line">        packageName.length() + 1).replace(&apos;.&apos;, &apos;$&apos;);</span><br><span class="line">    //创建ClassName: com.zl.custombutterknife.MainActivity_ViewBinding</span><br><span class="line">    ClassName bindingClassName = ClassName.get(packageName, className + &quot;_ViewBinding&quot;);</span><br><span class="line">//final final修饰符</span><br><span class="line">    boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);</span><br><span class="line">    //Builder构建,这里将注解所在的类，以及将要生成的类信息构建在Builder对象中</span><br><span class="line">    return new Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Builder对象基本的构建就完成，主要就是将获取注解、注解所在的class构建在一块，</p><p>当然这个对象不仅仅只是存储属性，后续的一些listener事件，color、drawable、string等资源需要初始化都将集中在BindingSet对象中</p></blockquote><ol start="3"><li>addField() 将 生成的Id、FieldViewBinding对象添加至builder中，我们看看做了些什么操作吧：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseBindView</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//...省略</span></span><br><span class="line">    Id resourceId = elementToId(element, BindView.class, id);</span><br><span class="line">String name = simpleName.toString();</span><br><span class="line">    <span class="comment">//TypeName 相当于 TextView class</span></span><br><span class="line">    TypeName type = TypeName.get(elementType);</span><br><span class="line">    <span class="keyword">boolean</span> required = isFieldRequired(element);</span><br><span class="line">    <span class="comment">//1 先构建FieldViewBinding对象 2 将Id 及 FieldViewBinding 添加至 builder</span></span><br><span class="line">    builder.addField(resourceId, <span class="keyword">new</span> FieldViewBinding(name, type, required));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看看是如何addFeild：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BuildSet.Builder</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...省略</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Id, ViewBinding.Builder&gt; viewIdMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addField</span><span class="params">(Id id, FieldViewBinding binding)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//生成ViewBinding.Builder对象,然后设置FieldViewBinding</span></span><br><span class="line">      getOrCreateViewBindings(id).setFieldBinding(binding);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//创建ViewBinding.Builder对象</span></span><br><span class="line">  <span class="keyword">private</span> ViewBinding.<span class="function">Builder <span class="title">getOrCreateViewBindings</span><span class="params">(Id id)</span> </span>&#123;</span><br><span class="line">      ViewBinding.Builder viewId = viewIdMap.get(id);</span><br><span class="line">      <span class="keyword">if</span> (viewId == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//这里构建ViewBinding.Builder 下面分析</span></span><br><span class="line">        viewId = <span class="keyword">new</span> ViewBinding.Builder(id);</span><br><span class="line">        viewIdMap.put(id, viewId);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> viewId;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体分析ViewBinding对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewBinding</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...省略相关代码</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Id id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ListenerClass, Map&lt;ListenerMethod, Set&lt;MethodViewBinding&gt;&gt;&gt; methodBindings =</span><br><span class="line">        <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="meta">@Nullable</span> FieldViewBinding fieldBinding;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//构造方法在这里</span></span><br><span class="line">    Builder(Id id) &#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//JavaFiler.writeout() 时 判断含有相关的listener()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMethodBinding</span><span class="params">(ListenerClass listener, ListenerMethod method)</span> </span>&#123;</span><br><span class="line">      Map&lt;ListenerMethod, Set&lt;MethodViewBinding&gt;&gt; methods = methodBindings.get(listener);</span><br><span class="line">      <span class="keyword">return</span> methods != <span class="keyword">null</span> &amp;&amp; methods.containsKey(method);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//同一个控件如果存在 listener()  会调用此方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMethodBinding</span><span class="params">(ListenerClass listener, ListenerMethod method,</span></span></span><br><span class="line"><span class="function"><span class="params">        MethodViewBinding binding)</span> </span>&#123;</span><br><span class="line">      Map&lt;ListenerMethod, Set&lt;MethodViewBinding&gt;&gt; methods = methodBindings.get(listener);</span><br><span class="line">      Set&lt;MethodViewBinding&gt; set = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (methods == <span class="keyword">null</span>) &#123;</span><br><span class="line">        methods = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        methodBindings.put(listener, methods);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        set = methods.get(method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (set == <span class="keyword">null</span>) &#123;</span><br><span class="line">        set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        methods.put(method, set);</span><br><span class="line">      &#125;</span><br><span class="line">      set.add(binding);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//属性fieldBinding 设置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFieldBinding</span><span class="params">(FieldViewBinding fieldBinding)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.fieldBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.fieldBinding = fieldBinding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewBinding <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ViewBinding(id, methodBindings, fieldBinding);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在butterKnife中@BindView、@OnClick 等listener存放都在这个对象中了。</p><p>其它的相关注解：</p><p>@BindViews() 存放在 FieldCollectionViewBinding对象集合中</p><p>@BindAnim() 存放在 FieldAnimationBinding对象中</p><p>…</p></blockquote><p>我们回忆一下@BindView大致经历了哪些过程？</p><ul><li>process()开始，通过 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- 一些列判断过滤掉使用不当的注解对象，比如：修饰符 ```private```、```static```作用不在```View```或```View```子类的对象上，以及判断所在的class是否正确，如果位置错误（android.*，java.*）或者修饰符错误也将过滤。</span><br><span class="line">- 通过创建```Id```，```FieldViewBinding```，```ViewBinding```将注解对应的属性，方法集中在一起，方便代码生成时一起输出。</span><br><span class="line"></span><br><span class="line">&gt;  @BindView分析到此就结束了。下面分析listener()是如何添加到BingdSet.Builder对象中的。</span><br><span class="line"></span><br><span class="line">##### 下面分析各种listener事件</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//仍然是在ButterKnifeProcessor # findAndParseTargets开始解析@OnClick</span><br><span class="line">public final class ButterKnifeProcessor extends AbstractProcessor &#123;</span><br><span class="line">    //各种listener adapter view checkbox 事件等等</span><br><span class="line">    private static final List&lt;Class&lt;? extends Annotation&gt;&gt; LISTENERS = Arrays.asList(</span><br><span class="line">            OnCheckedChanged.class, OnClick.class, OnEditorAction.class, </span><br><span class="line">            OnFocusChange.class, OnItemClick.class, OnItemLongClick.class, </span><br><span class="line">            OnItemSelected.class, OnLongClick.class, OnPageChange.class, </span><br><span class="line">            OnTextChanged.class, OnTouch.class </span><br><span class="line">    );</span><br><span class="line">    //开始遍历</span><br><span class="line">    private Map&lt;TypeElement, BindingSet&gt; findAndParseTargets(RoundEnvironment env) &#123;</span><br><span class="line">        for (Class&lt;? extends Annotation&gt; listener : LISTENERS) &#123;</span><br><span class="line">            //从这里开发解析</span><br><span class="line">            findAndParseListener(env, listener, builderMap, erasedTargetNames);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="这里-OnClick为基准简单分析，由于流程跟-BindView基本一致，我将会省略大部分代码。"><a href="#这里-OnClick为基准简单分析，由于流程跟-BindView基本一致，我将会省略大部分代码。" class="headerlink" title="这里@OnClick为基准简单分析，由于流程跟@BindView基本一致，我将会省略大部分代码。"></a>这里@OnClick为基准简单分析，由于流程跟@BindView基本一致，我将会省略大部分代码。</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义的OnClick注解对象</span></span><br><span class="line"><span class="meta">@Target</span>(METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="meta">@ListenerClass</span>(</span><br><span class="line">    targetType = <span class="string">"android.view.View"</span>,</span><br><span class="line">    setter = <span class="string">"setOnClickListener"</span>,</span><br><span class="line">    type = <span class="string">"butterknife.internal.DebouncingOnClickListener"</span>,</span><br><span class="line">    method = <span class="meta">@ListenerMethod</span>(</span><br><span class="line">        name = <span class="string">"doClick"</span>,</span><br><span class="line">        parameters = <span class="string">"android.view.View"</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OnClick &#123;</span><br><span class="line">  <span class="comment">/** View IDs to which the method will be bound. */</span></span><br><span class="line">  <span class="meta">@IdRes</span> <span class="keyword">int</span>[] value() <span class="keyword">default</span> &#123; View.NO_ID &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数省略</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseListenerAnnotation</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//判断是否是方法</span></span><br><span class="line">    <span class="keyword">if</span> (!(element <span class="keyword">instanceof</span> ExecutableElement) || element.getKind() != METHOD) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(String.format(<span class="string">"@%s annotation must be on a method."</span>,      annotationClass.getSimpleName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取@OnClick注解中的 value 值 </span></span><br><span class="line">    <span class="keyword">int</span>[] ids = (<span class="keyword">int</span>[]) annotationValue.invoke(annotation);</span><br><span class="line">    <span class="comment">//方法名字</span></span><br><span class="line">    String name = executableElement.getSimpleName().toString();</span><br><span class="line">    <span class="keyword">boolean</span> required = isListenerRequired(executableElement);</span><br><span class="line">    TypeMirror returnType = executableElement.getReturnType();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建MethodViewBinding对象,将方法名、参数、是否有必要添加方法、是否有返回值</span></span><br><span class="line">    MethodViewBinding binding =</span><br><span class="line">                <span class="keyword">new</span> MethodViewBinding(name, Arrays.asList(parameters), required, hasReturnValue);</span><br><span class="line">    <span class="comment">//根据class获取BindingSet.Builder对象</span></span><br><span class="line">        BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);</span><br><span class="line">        Map&lt;Integer, Id&gt; resourceIds = elementToIds(element, annotationClass, ids);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Id&gt; entry : resourceIds.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//向builder添加方法,这个过程会先获取ViewBinding对象，然后再设置给builer</span></span><br><span class="line">            <span class="keyword">if</span> (!builder.addMethod(entry.getValue(), listener, method, binding)) &#123;</span><br><span class="line">                error(element, <span class="string">"Multiple listener methods with return value specified for ID %d. (%s.%s)"</span>,</span><br><span class="line">                        entry.getKey(), enclosingElement.getQualifiedName(), element.getSimpleName());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the type-erased version to the valid binding targets set.</span></span><br><span class="line">        erasedTargetNames.add(enclosingElement);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简要的描述一下@OnClick的流程：</p><ul><li>通过一些列判断过滤掉使用不当的方法，比如：修饰符 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">- 然后将获取到的method对象的相关属性添加至MethodViewBinding对象中，在```builder.addMethod()```会先获取ViewBinding对象。</span><br><span class="line">- 最后将ViewBinding交付于BindingSet.Builder统一管理进行管理，这一切操作都是为了代码输出时对象、方法能够一一对应的上。</span><br><span class="line"></span><br><span class="line">由于之前分析过@BindView注解流程，@OnClick我就简单提了提。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 文件的输出，通过借助[JavaPoet](https://github.com/square/javapoet)编写</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//java文件创建从这里开始</span><br><span class="line">private TypeSpec createType(int sdk, boolean debuggable) &#123;</span><br><span class="line">    //创建com.zl.custombutterknife.MainActivity_ViewBinding 修饰符为public</span><br><span class="line">    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())</span><br><span class="line">        .addModifiers(PUBLIC);</span><br><span class="line">    //是否final修饰</span><br><span class="line">    if (isFinal) &#123;</span><br><span class="line">      result.addModifiers(FINAL);</span><br><span class="line">    &#125;</span><br><span class="line">//添加parent class and interface</span><br><span class="line">    if (parentBinding != null) &#123;</span><br><span class="line">      result.superclass(parentBinding.bindingClassName);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      result.addSuperinterface(UNBINDER);</span><br><span class="line">    &#125;</span><br><span class="line">//创建成员变量 target Activity,这里为MainActivity</span><br><span class="line">    if (hasTargetField()) &#123;</span><br><span class="line">      result.addField(targetTypeName, &quot;target&quot;, PRIVATE);</span><br><span class="line">    &#125;</span><br><span class="line">//根据创建builder时传入判断是View、Activity、Dialog,在构造方法中初始化属性，以及方法调用</span><br><span class="line">    if (isView) &#123;</span><br><span class="line">      result.addMethod(createBindingConstructorForView());</span><br><span class="line">    &#125; else if (isActivity) &#123;</span><br><span class="line">      result.addMethod(createBindingConstructorForActivity());</span><br><span class="line">    &#125; else if (isDialog) &#123;</span><br><span class="line">      result.addMethod(createBindingConstructorForDialog());</span><br><span class="line">    &#125;</span><br><span class="line">    if (!constructorNeedsView()) &#123;</span><br><span class="line">      // Add a delegating constructor with a target type + view signature for reflective use.</span><br><span class="line">      result.addMethod(createBindingViewDelegateConstructor());</span><br><span class="line">    &#125;</span><br><span class="line">    result.addMethod(createBindingConstructor(sdk, debuggable));</span><br><span class="line"></span><br><span class="line">    //添加unBind() 资源释放</span><br><span class="line">    if (hasViewBindings() || parentBinding == null) &#123;</span><br><span class="line">      result.addMethod(createBindingUnbindMethod(result));</span><br><span class="line">    &#125;</span><br><span class="line">//build()正常情况生成Java文件</span><br><span class="line">    return result.build();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如果不了解<a href="https://github.com/square/javapoet" target="_blank" rel="noopener">JavaPoet</a>，点击此处的火箭前往学习一个小时就能学会使用。</p></blockquote><p>到这里就结束了，感谢观看。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何调试AbstractProcessor</title>
      <link href="/2019/08/01/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95AbstractProcessor/"/>
      <url>/2019/08/01/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95AbstractProcessor/</url>
      
        <content type="html"><![CDATA[<h5 id="背景由来"><a href="#背景由来" class="headerlink" title="背景由来"></a>背景由来</h5><p>在自定义ButterKnife时，通过APT方式生成Java代码，因为是编译时期生成，我们无法像Android项目一般运行起来之后通过debug方式来调试，一旦项目无法调试，对于开发者来说是一件很痛苦的事情，下面我们介绍如何 <strong>debug</strong> 自定义</p><p><strong>AbstractProcessor</strong></p><h5 id="项目准备阶段"><a href="#项目准备阶段" class="headerlink" title="项目准备阶段"></a>项目准备阶段</h5><blockquote><p>需要配置Gradle环境变量，后期需要通过gradle命令开启守护线程，以及项目构建</p></blockquote><h5 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h5><ul><li>在AS中点击 <strong>Edit Configurations</strong> ，如图所示：</li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_remote_debug1.jpg" alt="Edit Configurations"></p><ul><li>创建Remote Debug，如图所示：</li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_remote_debug2.jpg" alt="Remote Debug"></p><blockquote><p>第一步： 点击左上角添加按钮，在弹窗中选中remote</p><p>第二步：给Remote调试随意取个名字</p><p>第三步：设置Host，Port ，一般默认就行，如果有多个请更改端口</p><p>第四步：复制刚刚配置的参数，-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</p><p>最后点击Ok创建就行</p></blockquote><ul><li>配置gradle.properties文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将刚刚生成的 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 填入</span></span><br><span class="line">org.gradle.daemon=<span class="literal">true</span></span><br><span class="line">org.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=5005</span><br></pre></td></tr></table></figure><ul><li>打开命令窗口开启守护线程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启守护线程</span></span><br><span class="line">$ gradle --daemon</span><br><span class="line"><span class="comment">#提示build successful 表示开启成功了</span></span><br><span class="line">$ BUILD SUCCESSFUL <span class="keyword">in</span> 11s</span><br><span class="line">$ 1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><ul><li>选择刚刚添加的Remote Debug，在项目中打好断点，开启debug模式，如图所示：</li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_remote_debug3.jpg" alt="开启Debug模式"></p><blockquote><p>点击小虫子后显示：Connected to the target VM, address: ‘localhost:5005’, transport: ‘socket’表示开启成功，如果提示连接不上，请重复上一步骤</p></blockquote><ul><li>最后通过输入gradle命令进行构建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定位到相应的项目目录下面构建</span></span><br><span class="line"><span class="variable">$gradle</span> clean assembleDebug</span><br></pre></td></tr></table></figure><blockquote><p>这里执行了两个task：</p><p>task clean ：delete rootProject.buildDir</p><p>task assembleDebug ：系统封装好的debug构建 task</p></blockquote><p>执行上述命令之后，表示已经成功进入调试了</p><p><img src="https://penghuanliang.github.io/images/pics/ic_remote_debug4.png" alt="成功如图所示"></p><p>到这里就结束了，感谢观看。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解笔记</title>
      <link href="/2019/08/01/%E6%B3%A8%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/01/%E6%B3%A8%E8%A7%A3%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h5 id="为什么会有本篇文章？"><a href="#为什么会有本篇文章？" class="headerlink" title="为什么会有本篇文章？"></a>为什么会有本篇文章？</h5><blockquote><p>现在很多主流库都是通过APT(Annotation Processing Tool 简称注解处理工具)在代码编译时期，通过解析注解，并且生成新能Java文件，减少开发者手动书写代码，极大的提升了开发效率。</p><p>本篇在学习APT开发时随手记录的，先简单介绍一下注解、然后写一个小Demo加深印象。</p></blockquote><h5 id="Annotation官网描述"><a href="#Annotation官网描述" class="headerlink" title="Annotation官网描述"></a>Annotation官网描述</h5><blockquote><p>The common interface extended by all annotation types. Note that an interface that manually extends this one does <em>not</em> define an annotation type. Also note that this interface does not itself define an annotation type.</p><p>大致的意思是：所有的注解类型接口都继承Annotation接口，自定义继承Annotation不会定义注解类型。</p><p>个人认为：注解就相当于代码注释一样，然后我们可以通过获取到其属性做一下相关操作，从而优化整个项目。</p></blockquote><h5 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h5><p>​    举例介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本身BindView是一个注解，@Retention</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindView &#123;</span><br><span class="line"><span class="comment">//可以给定一个默认值</span></span><br><span class="line">    <span class="meta">@IdRes</span> <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>继承至Annotation接口的接口，如@BindVeiw、@Retention、@Target都属于注解，但是@Retention、@Target又有区别，它们定义为：<strong>元注解</strong></p></blockquote><h5 id="元注解定义："><a href="#元注解定义：" class="headerlink" title="元注解定义："></a>元注解定义：</h5><p>​    定义在注解上面的注解，我们就称为元注解，它与一般注解的区别就在于Target的作用范围，举例说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Documented 将注解中的元素包含到 Javadoc 中去</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//这里作用于ANNOTATION_TYPE，所以@Retention属于元注解</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="下面主要介绍-Retention、-Target、-Documented、-Inherited四种常见注解"><a href="#下面主要介绍-Retention、-Target、-Documented、-Inherited四种常见注解" class="headerlink" title="下面主要介绍@Retention、@Target、@Documented、@Inherited四种常见注解"></a>下面主要介绍@Retention、@Target、@Documented、@Inherited四种常见注解</h5><table><thead><tr><th align="center">注解</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">@Retention</td><td align="left">用来定义注解的生命周期，由RetentionPolicy枚举类定义<br>SOURCE:注解在编译器时就会丢弃，不会保留在编译后的class文件中<br>CLASS：注解会保留在class文件中，但是不会加载到JVM中，在运行时候反射是无法获取到相关注解属性<br>RUNTIME:从编译、加载、运行期间会一直保留，可以通过反射的方式获取</td></tr><tr><td align="center">@Target</td><td align="left">注解的作用域，ElementType枚举类定义<br>CONSTRUCTOR：注解用于  构造函数<br>FIELD：注解用于 成员变量（包括枚举）<br>LOCAL_VARIABLE：注解用于  局部变量<br>METHOD：注解用于  方法<br>PACKAGE：注解用于 包<br>PARAMETER：注解用于 方法中参数<br>TYPE：注解用于  类、接口、枚举类<br>ANNOTATION_TYPE：注解用于 注解，该注解属于元注解</td></tr><tr><td align="center">@Documented</td><td align="left">表示注解会被包含在Java API文档中</td></tr><tr><td align="center">@Inherited</td><td align="left">允许子类继承父类的注解</td></tr></tbody></table><h5 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h5><blockquote><p>自定义@BindView注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindView &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IdRes</span> <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h5><ul><li>通过反射的方式，在运行时期获取 value </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindView</span>(R.id.tv_content)</span><br><span class="line">    <span class="keyword">public</span> TextView mTvContent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        Class&lt;? extends MainActivity&gt; clazz = getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field mTvContent = clazz.getField(<span class="string">"mTvContent"</span>);</span><br><span class="line">            <span class="comment">//属性字段上是否为@BindView修饰</span></span><br><span class="line">            <span class="keyword">if</span> (mTvContent.isAnnotationPresent(BindView.class)) &#123;</span><br><span class="line">                BindView annotation = mTvContent.getAnnotation(BindView.class);</span><br><span class="line">                <span class="comment">//是否是@BindView注解</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == annotation) &#123;</span><br><span class="line">                    Log.e(<span class="string">"TAG"</span>, <span class="string">"未获取到相关注解: "</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.e(<span class="string">"TAG"</span>, <span class="string">"annotation value is "</span> + annotation.value() + <span class="string">" mTvContent id is "</span> + R.id.tv_content);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Annotation[] annotations = mTvContent.getAnnotations();</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>, <span class="string">"注解长度: "</span>+annotations.length);</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span>==annotations.length) &#123;</span><br><span class="line">                    Log.e(<span class="string">"TAG"</span>, <span class="string">"未获取到相关注解"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打印的结果：</p><p>TAG: 注解长度: 0<br>未获取到相关注解</p></blockquote><p>打印结果没有问题，因为@BindView的生命周期为 CLASS ，注解虽然会保留在class文件中，但是不会加载到JVM中， 所以我们在运行时候反射是无法获取到相关注解属性。</p><ul><li>修改BindView之后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改为 RUNTIME </span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindView &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IdRes</span> <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打印的结果：<br>TAG: annotation value is 2131165325 mTvContent id is 2131165325</p></blockquote><p>修改了注解的Retention之后，可以正常获取value值，所以注解在使用时多多注意@Target、@Retention使用。</p><h5 id="下节介绍"><a href="#下节介绍" class="headerlink" title="下节介绍"></a>下节介绍</h5><p>注解相关的描述到此就结束了，下一节先介绍如何配置AS,让我们能够<strong>debug</strong>编译时期代码，然后再介绍通过APT编写自定义ButterKnife。感谢观看。</p>]]></content>
      
      
      <categories>
          
          <category> 随手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventBus巧用APT插件提升性能</title>
      <link href="/2019/07/30/EventBus%E5%B7%A7%E7%94%A8APT%E6%8F%92%E4%BB%B6%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD/"/>
      <url>/2019/07/30/EventBus%E5%B7%A7%E7%94%A8APT%E6%8F%92%E4%BB%B6%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>在上一篇研究了<a href="https://penghuanliang.github.io/2019/07/29/EventBus%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">EventBus源码</a>时，默认情况下EventBus是通过在运行时反射的方式去获取订阅者中所有@Subscribe注解的方法信息，这种方式是比较损耗性能的。</p><h3 id="EventBus是如何提升效率？"><a href="#EventBus是如何提升效率？" class="headerlink" title="EventBus是如何提升效率？"></a>EventBus是如何提升效率？</h3><blockquote><p>与Butterknife类似，采用编译时注解，在项目编译时将所有的订阅者注解的方法集中到生成class文件中，通过这种方式有效的避免了反射获取注解类的方法信息带来的性能损耗。</p></blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>在项目中集成apt插件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                <span class="comment">//通过自定义注解处理器生成索引类，如果不配置，类则不生成，下面分析,verbose是否打印日志</span></span><br><span class="line">                arguments = [eventBusIndex : applicationId + <span class="string">'.eventbus.CustomEventBusIndex'</span>,</span><br><span class="line">                             verbose : <span class="string">"true"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//加入EventBus</span></span><br><span class="line">    implementation <span class="string">'org.greenrobot:eventbus:3.1.1'</span></span><br><span class="line">    <span class="comment">//apt加入</span></span><br><span class="line">    annotationProcessor <span class="string">'org.greenrobot:eventbus-annotation-processor:3.1.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>先Make Project，apt插件会帮我们生成CustomEventBusIndex</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEventBusIndex</span> <span class="keyword">implements</span> <span class="title">SubscriberInfoIndex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象初始化的时候将所有订阅者及注解方法信息统一存储</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SUBSCRIBER_INDEX = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();</span><br><span class="line"></span><br><span class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(com.custom.plugin.MainActivity.class, <span class="keyword">true</span>, <span class="keyword">new</span> SubscriberMethodInfo[] &#123;</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"doSomething"</span>, com.custom.plugin.bean.SendBean.class, ThreadMode.MAIN, <span class="number">100</span>, <span class="keyword">true</span>),</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"doBackgroundThing"</span>, com.custom.plugin.bean.TBean.class, ThreadMode.MAIN_ORDERED,</span><br><span class="line">                    <span class="number">100</span>, <span class="keyword">false</span>),</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putIndex</span><span class="params">(SubscriberInfo info)</span> </span>&#123;</span><br><span class="line">        SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法在SubscriberMethodFinder#findUsingInfo()中调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SubscriberInfo <span class="title">getSubscriberInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">        SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> info;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>EventBus自定义初始化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">//通过build方式构建EventBus</span></span><br><span class="line">        EventBus.builder()</span><br><span class="line">            <span class="comment">//若为true,则是通过反射方式，默认是false,先从获取eventBusIndex，若为null再通过反射调用</span></span><br><span class="line">                .ignoreGeneratedIndex(<span class="keyword">false</span>)</span><br><span class="line">            <span class="comment">//自定义添加apt生成的类</span></span><br><span class="line">                .addIndex(<span class="keyword">new</span> CustomEventBusIndex())</span><br><span class="line">            <span class="comment">//构建EventBus</span></span><br><span class="line">                .installDefaultEventBus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过APT插件获取所有订阅者注解信息放入生成class类中，避免运行时反射带来的性能损耗了。</p></blockquote><h3 id="插件源码分析"><a href="#插件源码分析" class="headerlink" title="插件源码分析"></a>插件源码分析</h3><ul><li>首先分析EventBusAnnotationProcessor#process ()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个注解表示：告知Processor哪些注解需要处理（建议通过复写getSupportedAnnotationTypes()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SupportedAnnotationTypes</span>()也是一种实现方式，适用于数量较少的情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(<span class="string">"org.greenrobot.eventbus.Subscribe"</span>)</span><br><span class="line"><span class="meta">@SupportedOptions</span>(value = &#123;<span class="string">"eventBusIndex"</span>, <span class="string">"verbose"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusAnnotationProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPTION_EVENT_BUS_INDEX = <span class="string">"eventBusIndex"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPTION_VERBOSE = <span class="string">"verbose"</span>;</span><br><span class="line">    <span class="comment">//...省略：指定java版本、支持的注解类型</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里扫描、处理注解、生成Java文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">        Messager messager = processingEnv.getMessager();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取 eventBusIndex 配置项，如果没有获取到配置将会打印错误信息，并return false</span></span><br><span class="line">            String index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="keyword">null</span>) &#123;</span><br><span class="line">                messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"No option "</span> + OPTION_EVENT_BUS_INDEX +<span class="string">" passed to annotation processor"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取 verbose 配置，是否打印日志</span></span><br><span class="line">            verbose = Boolean.parseBoolean(processingEnv.getOptions().get(OPTION_VERBOSE));</span><br><span class="line">            <span class="keyword">int</span> lastPeriod = index.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">            <span class="comment">//获取包名</span></span><br><span class="line">            String indexPackage = lastPeriod != -<span class="number">1</span> ? index.substring(<span class="number">0</span>, lastPeriod) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            round++;</span><br><span class="line">            <span class="comment">//打印编译时的一些信息</span></span><br><span class="line">            <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">                messager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"Processing round "</span> + round + <span class="string">", new annotations: "</span> + !annotations.isEmpty() + <span class="string">", processingOver: "</span> + env.processingOver());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (env.processingOver()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!annotations.isEmpty()) &#123;</span><br><span class="line">                    messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Unexpected processing state: annotations still available after processing over"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//没有扫描到相关注解直接return</span></span><br><span class="line">            <span class="keyword">if</span> (annotations.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//状态异常情况下，直接return</span></span><br><span class="line">            <span class="keyword">if</span> (writerRoundDone) &#123;</span><br><span class="line">                messager.printMessage(Diagnostic.Kind.ERROR,</span><br><span class="line">                        <span class="string">"Unexpected processing state: annotations still available after writing."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//1.添加@Subscribe注解的订阅者及方法，放至集合中</span></span><br><span class="line">            collectSubscribers(annotations, env, messager);</span><br><span class="line">            <span class="comment">//2.过滤掉订阅者 类与方法都是不可见(非public、static修饰)的情况</span></span><br><span class="line">            checkForSubscribersToSkip(messager, indexPackage);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!methodsByClass.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//3.生成java文件</span></span><br><span class="line">                createInfoIndexFile(index);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                messager.printMessage(Diagnostic.Kind.WARNING, <span class="string">"No @Subscribe annotations found"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            writerRoundDone = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            <span class="comment">// IntelliJ does not handle exceptions nicely, so log and print a message</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            messager.printMessage(Diagnostic.Kind.ERROR, </span><br><span class="line">                                  <span class="string">"Unexpected error in EventBusAnnotationProcessor: "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>主要通过分析<strong>添加订阅者</strong>，<strong>过滤非法订阅者或方法</strong>，<strong>生成java文件</strong>这三个步骤</p></blockquote><ul><li>分析1 collectSubscribers()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collectSubscribers</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env, Messager messager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TypeElement annotation : annotations) &#123;</span><br><span class="line">        Set&lt;? extends Element&gt; elements = env.getElementsAnnotatedWith(annotation);</span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="comment">//ExecutableElement类型：表示某个类/接口的方法、构造方法...</span></span><br><span class="line">            <span class="keyword">if</span> (element <span class="keyword">instanceof</span> ExecutableElement) &#123;</span><br><span class="line">                ExecutableElement method = (ExecutableElement) element;</span><br><span class="line">                <span class="comment">//方法的Modifier(修饰符)、Parameters(参数)检测</span></span><br><span class="line">                <span class="keyword">if</span> (checkHasNoErrors(method, messager)) &#123;</span><br><span class="line">                    TypeElement classElement = (TypeElement) method.getEnclosingElement();</span><br><span class="line">                    <span class="comment">//将订阅者及注解方法添加至集合中，后续输出</span></span><br><span class="line">                    methodsByClass.putElement(classElement, method);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//注解作用在其它属性上，打印错误信息</span></span><br><span class="line">                messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"@Subscribe is only valid for methods"</span>, element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>checkHasNoErrors() 过滤static、非public、无参的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkHasNoErrors</span><span class="params">(ExecutableElement element, Messager messager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.getModifiers().contains(Modifier.STATIC)) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Subscriber method must not be static"</span>, element);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!element.getModifiers().contains(Modifier.PUBLIC)) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Subscriber method must be public"</span>, element);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;? extends VariableElement&gt; parameters = ((ExecutableElement) element).getParameters();</span><br><span class="line">    <span class="keyword">if</span> (parameters.size() != <span class="number">1</span>) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Subscriber method must have exactly 1 parameter"</span>, element);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分析2 checkForSubscribersToSkip()，如果订阅者 类与方法都是不可见的 添加至过滤classesToSkip集合，后续进行过滤</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForSubscribersToSkip</span><span class="params">(Messager messager, String myPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TypeElement skipCandidate : methodsByClass.keySet()) &#123;</span><br><span class="line">        TypeElement subscriberClass = skipCandidate;</span><br><span class="line">        <span class="keyword">while</span> (subscriberClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//过滤订阅者，下面分析isVisible()</span></span><br><span class="line">            <span class="keyword">if</span> (!isVisible(myPackage, subscriberClass)) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> added = classesToSkip.add(skipCandidate);</span><br><span class="line">                <span class="keyword">if</span> (added) &#123;</span><br><span class="line">                    String msg;</span><br><span class="line">                    <span class="keyword">if</span> (subscriberClass.equals(skipCandidate)) &#123;</span><br><span class="line">                        msg = <span class="string">"Falling back to reflection because class is not public"</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        msg = <span class="string">"Falling back to reflection because "</span> + skipCandidate +</span><br><span class="line">                                <span class="string">" has a non-public super class"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    messager.printMessage(Diagnostic.Kind.NOTE, msg, subscriberClass);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这里是过滤订阅方法</span></span><br><span class="line">            List&lt;ExecutableElement&gt; methods = methodsByClass.get(subscriberClass);</span><br><span class="line">            <span class="keyword">if</span> (methods != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ExecutableElement method : methods) &#123;</span><br><span class="line">                    String skipReason = <span class="keyword">null</span>;</span><br><span class="line">                    VariableElement param = method.getParameters().get(<span class="number">0</span>);</span><br><span class="line">                    TypeMirror typeMirror = getParamTypeMirror(param, messager);</span><br><span class="line">                    <span class="comment">//判断方法中参数类型是不是class、interface、基本数据类型、java.util.Set&lt;String&gt;</span></span><br><span class="line">                    <span class="comment">//过滤掉非法参数</span></span><br><span class="line">                    <span class="keyword">if</span> (!(typeMirror <span class="keyword">instanceof</span> DeclaredType) ||</span><br><span class="line">                            !(((DeclaredType) typeMirror).asElement() <span class="keyword">instanceof</span> TypeElement)) &#123;</span><br><span class="line">                        skipReason = <span class="string">"event type cannot be processed"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//过滤非public、static修饰方法 </span></span><br><span class="line">                    <span class="keyword">if</span> (skipReason == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();</span><br><span class="line">                        <span class="keyword">if</span> (!isVisible(myPackage, eventTypeElement)) &#123;</span><br><span class="line">                            skipReason = <span class="string">"event type is not public"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//添加至过滤集合</span></span><br><span class="line">                    <span class="keyword">if</span> (skipReason != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">boolean</span> added = classesToSkip.add(skipCandidate);</span><br><span class="line">                        <span class="keyword">if</span> (added) &#123;</span><br><span class="line">                            String msg = <span class="string">"Falling back to reflection because "</span> + skipReason;</span><br><span class="line">                            <span class="keyword">if</span> (!subscriberClass.equals(skipCandidate)) &#123;</span><br><span class="line">                                msg += <span class="string">" (found in super class for "</span> + skipCandidate + <span class="string">")"</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            messager.printMessage(Diagnostic.Kind.NOTE, msg, param);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历父类，继续过滤</span></span><br><span class="line">            subscriberClass = getSuperclass(subscriberClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面有一个isVisible()，用于判断元素的修饰符</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVisible</span><span class="params">(String myPackage, TypeElement typeElement)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回此元素的修饰符、不包括注解，但包括显式修饰符，比如接口成员的 public 和 static 修饰符</span></span><br><span class="line">    Set&lt;Modifier&gt; modifiers = typeElement.getModifiers();</span><br><span class="line">    <span class="keyword">boolean</span> visible;</span><br><span class="line">    <span class="keyword">if</span> (modifiers.contains(Modifier.PUBLIC)) &#123;</span><br><span class="line">        visible = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.PROTECTED)) &#123;</span><br><span class="line">        visible = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//包名判断，写入文件时走这里</span></span><br><span class="line">        String subscriberPackage = getPackageElement(typeElement).getQualifiedName().toString();</span><br><span class="line">        <span class="keyword">if</span> (myPackage == <span class="keyword">null</span>) &#123;</span><br><span class="line">            visible = subscriberPackage.length() == <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            visible = myPackage.equals(subscriberPackage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> visible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分析3 createInfoIndex(index)，java文件生成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createInfoIndexFile</span><span class="params">(String index)</span> </span>&#123;</span><br><span class="line">    BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建我们定义好的路径文件com.xx.xx.eventbus.CustomEventBusIndex.java</span></span><br><span class="line">        JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(index);</span><br><span class="line">        <span class="keyword">int</span> period = index.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">        String myPackage = period &gt; <span class="number">0</span> ? index.substring(<span class="number">0</span>, period) : <span class="keyword">null</span>;</span><br><span class="line">        String clazz = index.substring(period + <span class="number">1</span>);</span><br><span class="line">        writer = <span class="keyword">new</span> BufferedWriter(sourceFile.openWriter());</span><br><span class="line">        <span class="comment">//下面就是代码的书写了，包名第一，然后就是导报，在是代码书写</span></span><br><span class="line">        <span class="keyword">if</span> (myPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            writer.write(<span class="string">"package "</span> + myPackage + <span class="string">";\n\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SimpleSubscriberInfo;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SubscriberMethodInfo;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SubscriberInfo;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SubscriberInfoIndex;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.ThreadMode;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import java.util.HashMap;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import java.util.Map;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"/** This class is generated by EventBus, do not edit. */\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"public class "</span> + clazz + <span class="string">" implements SubscriberInfoIndex &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    private static final Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    static &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        SUBSCRIBER_INDEX = new HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();\n\n"</span>);</span><br><span class="line">        <span class="comment">//这里就是将上面获取的订阅者及@Subscribe注解方法的集合遍历写入，过滤上述不合适的订阅者及方法</span></span><br><span class="line">        writeIndexLines(writer, myPackage);</span><br><span class="line">        writer.write(<span class="string">"    &#125;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    private static void putIndex(SubscriberInfo info) &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    &#125;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    @Override\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    public SubscriberInfo getSubscriberInfo(Class&lt;?&gt; subscriberClass) &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        if (info != null) &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"            return info;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        &#125; else &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"            return null;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        &#125;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    &#125;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"&#125;\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not write source for "</span> + index, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//关流 刷新</span></span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">//Silent</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>让我们看看writeIndexLines(writer, myPackage)到底做了什么操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeIndexLines</span><span class="params">(BufferedWriter writer, String myPackage)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TypeElement subscriberTypeElement : methodsByClass.keySet()) &#123;</span><br><span class="line">        <span class="comment">//过滤</span></span><br><span class="line">        <span class="keyword">if</span> (classesToSkip.contains(subscriberTypeElement)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getClassString()主要是参数包名的处理，如com.custom.plugin.MainActivity.class</span></span><br><span class="line">        String subscriberClass = getClassString(subscriberTypeElement, myPackage);</span><br><span class="line">        <span class="keyword">if</span> (isVisible(myPackage, subscriberTypeElement)) &#123;</span><br><span class="line">            writeLine(writer, <span class="number">2</span>,</span><br><span class="line">                    <span class="string">"putIndex(new SimpleSubscriberInfo("</span> + subscriberClass + <span class="string">".class,"</span>,</span><br><span class="line">                    <span class="string">"true,"</span>, <span class="string">"new SubscriberMethodInfo[] &#123;"</span>);</span><br><span class="line">            List&lt;ExecutableElement&gt; methods = methodsByClass.get(subscriberTypeElement);</span><br><span class="line">            writeCreateSubscriberMethods(writer, methods, <span class="string">"new SubscriberMethodInfo"</span>, myPackage);</span><br><span class="line">            writer.write(<span class="string">"        &#125;));\n\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writer.write(<span class="string">"        // Subscriber not visible to index: "</span> + subscriberClass + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>很明显就是集合的遍历写入，其中包括过滤不合适的订阅者及方法。</p><p>到这里EventBusAnnotationProcessor类就分析完成了，接下来打算写一篇自定义ButterKnife文章，深刻学习自定义AbstractProcessor。</p><p>感谢观看。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventBus源码分析</title>
      <link href="/2019/07/29/EventBus%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/07/29/EventBus%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="EventBus简介"><a href="#EventBus简介" class="headerlink" title="EventBus简介"></a>EventBus简介</h3><p>EventBus是一种基于Android的事件发布-订阅总线。</p><p><img src="https://penghuanliang.github.io/images/pics/ic_eventbus_top.png" alt="摘抄与github"></p><h4 id="EventBus官网描述："><a href="#EventBus官网描述：" class="headerlink" title="EventBus官网描述："></a>EventBus官网描述：</h4><blockquote><ul><li>simplifies the communication between components<ul><li>decouples event senders and receivers</li><li>performs well with Activities, Fragments, and background threads</li><li>avoids complex and error-prone dependencies and life cycle issues</li></ul></li><li>makes your code simpler</li><li>is fast</li><li>is tiny (~50k jar)</li><li>is proven in practice by apps with 100,000,000+ installs</li><li>has advanced features like delivery threads, subscriber priorities, etc.</li></ul></blockquote><p>大致的意思是：EventBus能够简化各个组件之间的通信，解耦了事件发送与接收，让我们的代码更简洁快速，包50KB体积小，支持不同线程切换，具有优先级等特性。</p><h3 id="EventBus源码分析"><a href="#EventBus源码分析" class="headerlink" title="EventBus源码分析"></a>EventBus源码分析</h3><h5 id="从函数构建开始分析："><a href="#从函数构建开始分析：" class="headerlink" title="从函数构建开始分析："></a>从函数构建开始分析：</h5><ul><li>EventBus#getDefault()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 volatile 关键字 使得线程可见</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> EventBus defaultInstance;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双重验证加锁单例，确保唯一</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventBus <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (EventBus.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                defaultInstance = <span class="keyword">new</span> EventBus();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> defaultInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件的订阅："><a href="#事件的订阅：" class="headerlink" title="事件的订阅："></a>事件的订阅：</h5><ul><li>EventBus#getDefault()#register(Object)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订阅事件的入口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; subscriberClass = subscriber.getClass();</span><br><span class="line">    <span class="comment">//内部通过反射方式，获取订阅者事件的方法</span></span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class="line">            <span class="comment">//接下来就是一些订阅者事件、方法的存储以及如果存在粘性事件将立即发送该粘性事件</span></span><br><span class="line">            subscribe(subscriber, subscriberMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先分析一下如何获取订阅者方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找订阅者方法</span></span><br><span class="line"><span class="function">List&lt;SubscriberMethod&gt; <span class="title">findSubscriberMethods</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从缓存中获取订阅者</span></span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</span><br><span class="line">    <span class="comment">//不为空则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (subscriberMethods != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//若不使用EventBusBuilder自己定义,ignoreGeneratedIndex 默认是 false,</span></span><br><span class="line">    <span class="keyword">if</span> (ignoreGeneratedIndex) &#123;</span><br><span class="line">        <span class="comment">//直接通过放射获取</span></span><br><span class="line">        subscriberMethods = findUsingReflection(subscriberClass);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//下面分析</span></span><br><span class="line">        subscriberMethods = findUsingInfo(subscriberClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果订阅者中不存在@Subscribe注解的方法，则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (subscriberMethods.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriberClass</span><br><span class="line">                + <span class="string">" and its super classes have no public methods with the @Subscribe annotation"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//放入缓存池中然后 return 订阅方法</span></span><br><span class="line">        METHOD_CACHE.put(subscriberClass, subscriberMethods);</span><br><span class="line">        <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>findUsingInfo(subscriberClass)，这里有两种情况注意：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">findUsingInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化FindState</span></span><br><span class="line">    FindState findState = prepareFindState();</span><br><span class="line">    <span class="comment">//将subscriberClass赋值</span></span><br><span class="line">    findState.initForSubscriber(subscriberClass);</span><br><span class="line">    <span class="comment">//这里遍历有两种情况</span></span><br><span class="line">    <span class="keyword">while</span> (findState.clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//1.通过APT插件生成的类中获取，避免使用反射，节约性能，这里暂不做分析，下篇研究使用该方式获取</span></span><br><span class="line">        <span class="comment">//需要导入apt:annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.1.1'</span></span><br><span class="line">        findState.subscriberInfo = getSubscriberInfo(findState);</span><br><span class="line">        <span class="keyword">if</span> (findState.subscriberInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//直接从apt生成的类中获取</span></span><br><span class="line">            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</span><br><span class="line">            <span class="keyword">for</span> (SubscriberMethod subscriberMethod : array) &#123;</span><br><span class="line">                <span class="keyword">if</span> (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</span><br><span class="line">                    findState.subscriberMethods.add(subscriberMethod);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//2.直接通过反射的方式获取 注解@Subscribe定义的方法，下面继续分析该方法</span></span><br><span class="line">            findUsingReflectionInSingleClass(findState);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//继续遍历父类</span></span><br><span class="line">        findState.moveToSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过上面的获取findState中的List&lt;SubscriberMethod&gt;，然后释放findState</span></span><br><span class="line">    <span class="keyword">return</span> getMethodsAndRelease(findState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过反射方式获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接调用反射获取</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findUsingReflectionInSingleClass</span><span class="params">(FindState findState)</span> </span>&#123;</span><br><span class="line">    Method[] methods;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//通过反射获取所有方法</span></span><br><span class="line">        methods = findState.clazz.getDeclaredMethods();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">     <span class="comment">//异常走这里</span></span><br><span class="line">        methods = findState.clazz.getMethods();</span><br><span class="line">        findState.skipSuperClasses = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始遍历所有方法</span></span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        <span class="keyword">int</span> modifiers = method.getModifiers();</span><br><span class="line">        <span class="comment">//方法过滤掉不是public修饰，static,abstract,</span></span><br><span class="line">        <span class="keyword">if</span> ((modifiers &amp; Modifier.PUBLIC) != <span class="number">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//获取方法参数</span></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">if</span> (parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//获取@Subscribe注解的方法</span></span><br><span class="line">                Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);</span><br><span class="line">                <span class="keyword">if</span> (subscribeAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">                    <span class="comment">//校验是否存在同名的方法，如果存在则替换，集合中添加eventType,与method</span></span><br><span class="line">                    <span class="keyword">if</span> (findState.checkAdd(method, eventType)) &#123;</span><br><span class="line">                        <span class="comment">//获取方法所在的threadMode(线程模型)</span></span><br><span class="line">                        ThreadMode threadMode = subscribeAnnotation.threadMode();</span><br><span class="line">                        <span class="comment">//将SubscriberMethod存储至findState中</span></span><br><span class="line">                        findState.subscriberMethods.add(</span><br><span class="line">                        <span class="keyword">new</span> SubscriberMethod(method,</span><br><span class="line">                                             eventType,</span><br><span class="line">                                             threadMode,</span><br><span class="line">                                    subscribeAnnotation.priority(),</span><br><span class="line">                                             subscribeAnnotation.sticky()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">                String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"@Subscribe method "</span> + methodName +</span><br><span class="line">                        <span class="string">"must have exactly 1 parameter but has "</span> + parameterTypes.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">            String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(methodName +</span><br><span class="line">                    <span class="string">" is a illegal @Subscribe method: must be public, non-static, and non-abstract"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述基本的获取 @Subscribe 注解分析到此就结束了，下面是分析获取到的method 及 eventType存储及订阅</p></blockquote><ul><li>register()中的遍历集合中的SubscriberMethod，然后调用此方法subscribe()存储及订阅</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Object subscriber, SubscriberMethod subscriberMethod)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取事件类型</span></span><br><span class="line">    Class&lt;?&gt; eventType = subscriberMethod.eventType;</span><br><span class="line">    <span class="comment">//构建 Subscription 便于管理以及事件发送</span></span><br><span class="line">    Subscription newSubscription = <span class="keyword">new</span> Subscription(subscriber, subscriberMethod);</span><br><span class="line">    <span class="comment">//从集合中获取，若不存在，则创建添加</span></span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class="line">    <span class="keyword">if</span> (subscriptions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscriptions = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        subscriptionsByEventType.put(eventType, subscriptions);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//对象已经调用过register(),重复调用,则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (subscriptions.contains(newSubscription)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriber.getClass() + <span class="string">" already registered to event "</span>+ eventType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> size = subscriptions.size();</span><br><span class="line">    <span class="comment">//根据设置的priority向集合中相应的位置进行添加</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == size||subscriberMethod.priority&gt;subscriptions.get(i).subscriberMethod.priority) &#123;</span><br><span class="line">            subscriptions.add(i, newSubscription);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//typesBySubscriber用于管理订阅者注销</span></span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</span><br><span class="line">    <span class="keyword">if</span> (subscribedEvents == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscribedEvents = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        typesBySubscriber.put(subscriber, subscribedEvents);</span><br><span class="line">    &#125;</span><br><span class="line">    subscribedEvents.add(eventType);</span><br><span class="line"><span class="comment">//判断该订阅方法是否为粘性事件，粘性事件发送使用，EventBus.postSticky(obj)</span></span><br><span class="line">    <span class="keyword">if</span> (subscriberMethod.sticky) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">            <span class="comment">//遍历所有的粘性事件</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</span><br><span class="line">                Class&lt;?&gt; candidateEventType = entry.getKey();</span><br><span class="line">                <span class="keyword">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</span><br><span class="line">                    Object stickyEvent = entry.getValue();</span><br><span class="line">                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//从stickyEvents集合中获取该事件，进行发送</span></span><br><span class="line">            Object stickyEvent = stickyEvents.get(eventType);</span><br><span class="line">            checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：粘性事件存储在stickyEvents中，如果遍历的时候发现这个订阅方法为粘性，遍历stickyEvents集合，判断如果存在相同的<strong>eventType</strong>，则立即发送，到这里register()所有的源码分析就结束了。</p></blockquote><h5 id="事件的发送"><a href="#事件的发送" class="headerlink" title="事件的发送"></a>事件的发送</h5><blockquote><p>EventBus通过post(obj)发送事件,期间包括线程的切换等</p></blockquote><ul><li>post 发送事件event</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前线程中的PostingThreadState状态信息</span></span><br><span class="line">    PostingThreadState postingState = currentPostingThreadState.get();</span><br><span class="line">    List&lt;Object&gt; eventQueue = postingState.eventQueue;</span><br><span class="line">    eventQueue.add(event);</span><br><span class="line"><span class="comment">//event不是发送状态，防止多次调用</span></span><br><span class="line">    <span class="keyword">if</span> (!postingState.isPosting) &#123;</span><br><span class="line">        <span class="comment">//设置当前线程是否为主线程、发送状态、以及状态判断</span></span><br><span class="line">        postingState.isMainThread = isMainThread();</span><br><span class="line">        postingState.isPosting = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (postingState.canceled) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Internal error. Abort state was not reset"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//发送该事件</span></span><br><span class="line">                postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            postingState.isPosting = <span class="keyword">false</span>;</span><br><span class="line">            postingState.isMainThread = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>postSingleEvent </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postSingleEvent</span><span class="params">(Object event, PostingThreadState postingState)</span> <span class="keyword">throws</span> Error </span>&#123;</span><br><span class="line">    Class&lt;?&gt; eventClass = event.getClass();</span><br><span class="line">    <span class="keyword">boolean</span> subscriptionFound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">        <span class="comment">//查询所有的父类所包含的event事件对象</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</span><br><span class="line">        <span class="keyword">int</span> countTypes = eventTypes.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = eventTypes.get(h);</span><br><span class="line">            <span class="comment">//将获取到的event、postingState、class对象交付于postSingleEventForEventType()处理</span></span><br><span class="line">            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有找到相应的订阅者</span></span><br><span class="line">    <span class="keyword">if</span> (!subscriptionFound) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logNoSubscriberMessages) &#123;</span><br><span class="line">            logger.log(Level.FINE, <span class="string">"No subscribers registered for event "</span> + eventClass);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重置事件，结束事件发送</span></span><br><span class="line">        <span class="keyword">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</span><br><span class="line">                eventClass != SubscriberExceptionEvent.class) &#123;</span><br><span class="line">            post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>postSingleEventForEventType</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">postSingleEventForEventType</span><span class="params">(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass)</span> </span>&#123;</span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//从集合中获取 register()存储的 Subscription</span></span><br><span class="line">        subscriptions = subscriptionsByEventType.get(eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">            postingState.event = event;</span><br><span class="line">            postingState.subscription = subscription;</span><br><span class="line">            <span class="keyword">boolean</span> aborted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//发送消息</span></span><br><span class="line">                postToSubscription(subscription, event, postingState.isMainThread);</span><br><span class="line">                aborted = postingState.canceled;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postingState.event = <span class="keyword">null</span>;</span><br><span class="line">                postingState.subscription = <span class="keyword">null</span>;</span><br><span class="line">                postingState.canceled = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (aborted) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>postToSubscription()</li></ul><blockquote><p>最终调用，通过threadMode进行相应的处理，通过反射、Handler.sendMessage()、提交任务至线程池执行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> POSTING:</span><br><span class="line">            <span class="comment">//直接在调用Post所在的线程中调用该方法</span></span><br><span class="line">            invokeSubscriber(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MAIN:</span><br><span class="line">            <span class="comment">//如果post()在主线程直接通过反射调用，否则通过handler的方式进行消息分发处理</span></span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MAIN_ORDERED:</span><br><span class="line">            <span class="comment">//Android下一通过handler的方式进行消息分发处理，不管是不是在UI线程</span></span><br><span class="line">            <span class="keyword">if</span> (mainThreadPoster != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// HandlerPost创建失败，不在Android环境下直接调用反射</span></span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BACKGROUND:</span><br><span class="line">            <span class="comment">//如果post()在UI线程，则提交至线程池处理 调用run</span></span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                backgroundPoster.enqueue(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果post()在子线程中直接通过反射调用</span></span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASYNC:</span><br><span class="line">            <span class="comment">//使用ASYNC关键字，不管post()在什么线程中，都交付于线程池去处理</span></span><br><span class="line">            asyncPoster.enqueue(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>EventBus主要是通过维护一个线程池与Handler，在不同的thredMode下进行事件的分发调用，这就所谓的不同threadMode下执行的环境也是不同</p></blockquote><h5 id="线程切换的两个类"><a href="#线程切换的两个类" class="headerlink" title="线程切换的两个类"></a>线程切换的两个类</h5><ul><li>HandlerPoster</li></ul><blockquote><p>通过传入UI线程中的looper创建Handler使其在主线程中处理相应的Subscriber方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerPoster</span> <span class="keyword">extends</span> <span class="title">Handler</span> <span class="keyword">implements</span> <span class="title">Poster</span> </span>&#123;</span><br><span class="line"><span class="comment">//省略部分代码。。。。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            queue.enqueue(pendingPost);</span><br><span class="line">            <span class="keyword">if</span> (!handlerActive) &#123;</span><br><span class="line">                handlerActive = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//此处发送消息</span></span><br><span class="line">                <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在这里处理消息</span></span><br><span class="line">        <span class="keyword">boolean</span> rescheduled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> started = SystemClock.uptimeMillis();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">//从PendingPostQueue取出PendingPost</span></span><br><span class="line">                PendingPost pendingPost = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                        <span class="comment">// 双重校验</span></span><br><span class="line">                        pendingPost = queue.poll();</span><br><span class="line">                        <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            handlerActive = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//此处通过反射调用</span></span><br><span class="line">                eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">                <span class="keyword">long</span> timeInMethod = SystemClock.uptimeMillis() - started;</span><br><span class="line">                <span class="keyword">if</span> (timeInMethod &gt;= maxMillisInsideHandleMessage) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    rescheduled = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            handlerActive = rescheduled;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BackgroundPoster</li></ul><blockquote><p>用于处理异步任务，通过run()中执行相应事件的调用，所有任务提交至线程池中处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundPoster</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Poster</span> </span>&#123;</span><br><span class="line"><span class="comment">//省略部分代码。。。。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            queue.enqueue(pendingPost);</span><br><span class="line">            <span class="keyword">if</span> (!executorRunning) &#123;</span><br><span class="line">                executorRunning = <span class="keyword">true</span>;</span><br><span class="line">                eventBus.getExecutorService().execute(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    PendingPost pendingPost = queue.poll(<span class="number">1000</span>);</span><br><span class="line">                    <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                            <span class="comment">// 双重校验</span></span><br><span class="line">                            pendingPost = queue.poll();</span><br><span class="line">                            <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                executorRunning = <span class="keyword">false</span>;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//继续调用EventBus.invokeSubscriber(), 在非UI线程中直接通过反射调用@Subscriber方法</span></span><br><span class="line">                    eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + <span class="string">" was interruppted"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executorRunning = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>AsyncPoster与BackgroundPoster类似，都是通过提交run至线程池处理，公用一个线程池</p></blockquote><h5 id="订阅注销操作"><a href="#订阅注销操作" class="headerlink" title="订阅注销操作"></a>订阅注销操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//register中提到过这个类，专门用户注销订阅者集合</span></span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);</span><br><span class="line">    <span class="comment">//以下就是遍历，注销操作</span></span><br><span class="line">    <span class="keyword">if</span> (subscribedTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; eventType : subscribedTypes) &#123;</span><br><span class="line">            unsubscribeByEventType(subscriber, eventType);</span><br><span class="line">        &#125;</span><br><span class="line">        typesBySubscriber.remove(subscriber);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.log(Level.WARNING, <span class="string">"Subscriber to unregister was not registered before: "</span> + subscriber.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>到这里EventBus主要源码分析到此就结束了，感谢收看。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享</title>
      <link href="/2018/09/11/%E5%88%86%E4%BA%AB/"/>
      <url>/2018/09/11/%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="主题：开心有趣、健康"><a href="#主题：开心有趣、健康" class="headerlink" title="主题：开心有趣、健康"></a>主题：开心有趣、健康</h2><blockquote><p>姓名：彭欢亮</p><p>时间：201/9/11  星期二    20:23:12</p><p>描述：本文素材均来源于网络，非本人出品</p></blockquote><p>众所周知笑对人体的好处多多，不过小心过犹不及，乐极生悲。微笑又或者是开怀大笑都是有莫大的好处的。</p><h3 id="开心一刻"><a href="#开心一刻" class="headerlink" title="开心一刻"></a>开心一刻</h3><p><img src="https://penghuanliang.github.io/images/pics/ic_head.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_fun0.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_fun2.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_fun3.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_fun4.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_fun5.jpg" alt="img"></p><h3 id="来自小学生试卷："><a href="#来自小学生试卷：" class="headerlink" title="来自小学生试卷："></a>来自小学生试卷：</h3><p><img src="https://penghuanliang.github.io/images/pics/ic_test1.jpeg" alt="img"></p><blockquote><p>这位同学对饮食健康很有研究嘛！</p></blockquote><p><img src="https://penghuanliang.github.io/images/pics/ic_test2.jpeg" alt="img"></p><blockquote><p>同学你去学画画吧，是块料</p></blockquote><p><img src="https://penghuanliang.github.io/images/pics/ic_test3.jpeg" alt="img"></p><blockquote><p>我只想知道，你爸爸看过后是什么表情</p></blockquote><p><img src="https://penghuanliang.github.io/images/pics/ic_test4.jpeg" alt="img"></p><blockquote><p>熊孩子出品</p></blockquote><p><img src="https://penghuanliang.github.io/images/pics/ic_test5.jpg" alt="img"></p><blockquote><p>老师居然给98分，逆天了！</p></blockquote><h3 id="网络大神PS"><a href="#网络大神PS" class="headerlink" title="网络大神PS"></a>网络大神PS</h3><ul><li><strong>求大神P个霸气的坐骑</strong>：</li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_ps1.jpg" alt="img"></p><blockquote><p>大神回复：</p></blockquote><p><img src="https://penghuanliang.github.io/images/pics/ic_ps2.jpg" alt="img"></p><ul><li><strong>求大神整个飘逸的发型</strong></li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_ps3.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_ps4.jpg" alt="img"></p><ul><li><strong>求大神把我P成霸气侧漏的样子</strong></li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_ps5.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_ps6.jpg" alt="img"></p><ul><li><strong>求大神把我P出梦幻的感觉</strong></li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_ps7.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_ps8.jpg" alt="img"></p><ul><li><strong>帮我P个好看难忘的背景</strong></li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_ps9.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_ps10.jpg" alt="img"></p><ul><li><strong>麻烦帮我在身下放个女朋友</strong></li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_ps11.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_ps12.jpg" alt="img"></p><ul><li><strong>把跳起来的那家伙去掉</strong></li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_ps13.jpg" alt="img"></p><p><img src="https://penghuanliang.github.io/images/pics/ic_ps14.jpg" alt="img"></p><ul><li><strong>求大神p的更霸气，更帅气</strong></li></ul><p><img src="https://penghuanliang.github.io/images/pics/ic_ps15.jpg" alt="img"></p><h3 id="视频分享：大份鸭肉套餐老板只卖12元"><a href="#视频分享：大份鸭肉套餐老板只卖12元" class="headerlink" title="视频分享：大份鸭肉套餐老板只卖12元"></a>视频分享：<a href="http://wemedia.ifeng.com/76108178/wemedia.shtml" target="_blank" rel="noopener">大份鸭肉套餐老板只卖12元</a></h3><h3 id="趣事"><a href="#趣事" class="headerlink" title="趣事"></a>趣事</h3><h4 id="橘子类的水果，母的比较好吃，那么问题来了怎么区分公母？"><a href="#橘子类的水果，母的比较好吃，那么问题来了怎么区分公母？" class="headerlink" title="橘子类的水果，母的比较好吃，那么问题来了怎么区分公母？"></a>橘子类的水果，母的比较好吃，那么问题来了怎么区分公母？</h4><p><img src="https://penghuanliang.github.io/images/pics/ic_fun.jpg" alt="img"></p><blockquote><p><a href="https://penghuanliang.github.io/images/pics/ic_melon.jpg" target="_blank" rel="noopener">西瓜</a>、<a href="https://penghuanliang.github.io/images/pics/ic_apple1.jpg" target="_blank" rel="noopener">苹果</a>、<a href="https://penghuanliang.github.io/images/pics/ic_apple2.jpg" target="_blank" rel="noopener">苹果</a>、<a href="https://penghuanliang.github.io/images/pics/ic_pear.jpg" target="_blank" rel="noopener">梨</a></p></blockquote><h4 id="不要喂狗吃巧克力！"><a href="#不要喂狗吃巧克力！" class="headerlink" title="不要喂狗吃巧克力！"></a>不要喂狗吃巧克力！</h4><p><img src="https://penghuanliang.github.io/images/pics/ic_fun21.jpg" alt="img"></p><h4 id="兔子很少吃胡萝卜！"><a href="#兔子很少吃胡萝卜！" class="headerlink" title="兔子很少吃胡萝卜！"></a>兔子很少吃胡萝卜！</h4><p><img src="https://penghuanliang.github.io/images/pics/ic_fun22.jpg" alt="img"></p><h4 id="鸳鸯的感情专一吗？"><a href="#鸳鸯的感情专一吗？" class="headerlink" title="鸳鸯的感情专一吗？"></a>鸳鸯的感情专一吗？</h4><p><img src="https://penghuanliang.github.io/images/pics/ic_fun23.jpg" alt="img"></p><h4 id="牛其实是色盲！"><a href="#牛其实是色盲！" class="headerlink" title="牛其实是色盲！"></a>牛其实是色盲！</h4><p><img src="https://penghuanliang.github.io/images/pics/ic_fun24.jpg" alt="img"></p><h4 id="不能边吃葡萄边吃海鲜，尤其是吃自助的时候不要忘记！"><a href="#不能边吃葡萄边吃海鲜，尤其是吃自助的时候不要忘记！" class="headerlink" title="不能边吃葡萄边吃海鲜，尤其是吃自助的时候不要忘记！"></a>不能边吃葡萄边吃海鲜，尤其是吃自助的时候不要忘记！</h4><p><img src="https://penghuanliang.github.io/images/pics/ic_fun25.jpg" alt="img"></p><h3 id="健康类（饮食类）"><a href="#健康类（饮食类）" class="headerlink" title="健康类（饮食类）"></a>健康类（饮食类）</h3><h4 id="它属于“一级至癌物”，发病率高达90-，每家都无视它还在吃！"><a href="#它属于“一级至癌物”，发病率高达90-，每家都无视它还在吃！" class="headerlink" title="它属于“一级至癌物”，发病率高达90%，每家都无视它还在吃！"></a>它属于“一级至癌物”，发病率高达90%，每家都无视它还在吃！</h4><p><img src="https://penghuanliang.github.io/images/pics/ic_health1.jpg" alt="img"></p><blockquote><p>禽“尖翅”，其实指的就是鸡、鸭、鹅等禽类屁股上端长尾羽的部位，它其实是个藏污纳垢的“仓库”。不宜食用。</p></blockquote><p><img src="https://penghuanliang.github.io/images/pics/ic_health2.jpg" alt="img"></p><blockquote><p>鸡头，鸡越老，鸡头毒性就越大的说法并不十分准确，但是鸡头不宜食用却是事实。医学专家分析，鸡在啄食中会吃进有害的重金属物，鸡头中含有重金属，所以鸡头还是少吃为好。</p><p><strong>十年鸡头胜砒霜</strong></p></blockquote><p><img src="https://penghuanliang.github.io/images/pics/ic_health3.webp" alt="img"></p><blockquote><p>煎炸过焦后，产生致癌物质多环芳烃。咖啡烧焦后，苯并芘会增加20倍。油煎饼、臭豆腐、煎炸芋角、油条等，因多数是使用重复多次的油，高温下会产生致癌物。</p><p>多环芳烃：是煤，石油，木材，烟草，有机高分子化合物等有机物不完全燃烧时产生的挥发性碳氢化合物，是重要的环境和食品污染物</p></blockquote><p><img src="https://penghuanliang.github.io/images/pics/ic_health4.webp" alt="img"></p><blockquote><p>黄曲霉素主要存在于霉变的坚果、大米和玉米等，吃这些食物时一定要注意清洗和储存得当。</p><p>黄曲霉毒素具有很强的致癌性、致突变性和致畸性。</p></blockquote><h4 id="不是所有的肉都是可以吃的-这6种肉千万别贪嘴-有剧毒"><a href="#不是所有的肉都是可以吃的-这6种肉千万别贪嘴-有剧毒" class="headerlink" title="不是所有的肉都是可以吃的,这6种肉千万别贪嘴,有剧毒!"></a>不是所有的肉都是可以吃的,这6种肉千万别贪嘴,有剧毒!</h4><blockquote><p>肉类虽然好，但不是什么部位的肉都可以吃的，这6种肉大家千万别贪嘴，有剧毒！</p></blockquote><h5 id="猪脖子肉："><a href="#猪脖子肉：" class="headerlink" title="猪脖子肉："></a>猪脖子肉：</h5><p><img src="https://penghuanliang.github.io/images/pics/ic_health6.jpg" alt="img"></p><blockquote><p>猪脖子肉上会有圆圆的疙瘩，大概有黄豆大小，呈灰色或者暗红色，这样的肉坚决不能食用，因为这大多数是淋巴结或者未摘除的淋巴腺体！当猪发生疾病时，是疾病转移最明显的地方，藏有大量的毒素和病菌！</p></blockquote><h5 id="鸡屁股肉："><a href="#鸡屁股肉：" class="headerlink" title="鸡屁股肉："></a>鸡屁股肉：</h5><p><img src="https://penghuanliang.github.io/images/pics/ic_health7.jpg" alt="img"></p><blockquote><p>鸡屁股肉也是不能吃的，但很多人就好这一口，在鸡屁股的后上方有两种腺体，鸡的成千上万个淋巴都集中在这个地方，除了鸡屁股以外，鸡头也是不建议吃的，我国有句民谚：十年鸡头胜砒霜。虽然鸡身上的这两个部位的肉都很好吃，但大家还是别贪嘴！</p></blockquote><h5 id="虾："><a href="#虾：" class="headerlink" title="虾："></a>虾：</h5><p><img src="https://penghuanliang.github.io/images/pics/ic_health8.webp" alt="img"></p><blockquote><p>很多人吃虾的时候连同虾头也一并吃掉了，毕竟已经煮熟了，寄生虫啊等坏的物质都已经消失了，其实不然，虾头中含有虾的胃，心脏、肝脏等器官，很多重金属都储存在虾头里，即使煮熟以后，也依然还在！</p></blockquote><h5 id="鱼腹中的黑膜："><a href="#鱼腹中的黑膜：" class="headerlink" title="鱼腹中的黑膜："></a>鱼腹中的黑膜：</h5><p><img src="https://penghuanliang.github.io/images/pics/ic_health9.webp" alt="img"></p><blockquote><p>鱼肚子里面的两侧都有一层薄薄的黑色膜衣，很多人都没有注意，直接和鱼肉一同烹饪，一起就吃掉了，其实这层膜衣是腥味，泥土最浓烈的部位，还聚集着一些重金属物质，不建议食用</p></blockquote><h5 id="羊蹄上有羊悬筋："><a href="#羊蹄上有羊悬筋：" class="headerlink" title="羊蹄上有羊悬筋："></a>羊蹄上有羊悬筋：</h5><p><img src="https://penghuanliang.github.io/images/pics/ic_health10.webp" alt="img"></p><blockquote><p>羊身上也有不能吃的部位，有的羊蹄上有羊“悬筋”， 又称蹄白珠，为圆珠形，串粒状，是羊蹄内发生病变的一种病毒组织。若是误食的话，很容易被感染，我们在吃羊蹄时，一定要看清楚，如果有蹄白珠的话必须摘除。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 开心一刻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射笔记</title>
      <link href="/2018/04/09/%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/04/09/%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="1-反射定义："><a href="#1-反射定义：" class="headerlink" title="1. 反射定义："></a>1. 反射定义：</h3><blockquote><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</p><p>(总结) 反射就是把java类中的各种成分映射成一个个的Java对象</p></blockquote><h3 id="2-泛型问题系列：（摘自码农每日一题）"><a href="#2-泛型问题系列：（摘自码农每日一题）" class="headerlink" title="2. 泛型问题系列：（摘自码农每日一题）"></a>2. 泛型问题系列：（摘自码农每日一题）</h3><p><strong>List<object> 与 List 原始类型之间的区别？</object></strong></p><p>主要区别有两点。</p><ul><li>原始类型和带泛型参数类型 <object> 之间的主要区别是在编译时编译器不会对原始类型进行类型安全检查，却会对带参数的类型进行检查，通过使用 Object 作为类型可以告知编译器该方法可以接受任何类型的对象（比如 String 或 Integer）。</object></li><li>我们可以把任何带参数的类型传递给原始类型 List，但却不能把 List<string> 传递给接受 List<object> 的方法，因为会产生编译错误。</object></string></li></ul><p><strong>简单说说 List<object> 与 List&lt;?&gt; 类型之间的区别？</object></strong></p><p>List<?> 是一个未知类型的 List，而 List<object> 其实是任意类型的 List，我们可以把 List<string>、List<integer> 赋值给 List<?>，却不能把 List<string> 赋值给 List<object>。譬如：</object></string></integer></string></object></p><ol><li><code>List&lt;?&gt; listOfAnyType;</code></li><li><code>List&lt;Object&gt; listOfObject = new ArrayList&lt;Object&gt;();</code></li><li><code>List&lt;String&gt; listOfString = new ArrayList&lt;String&gt;();</code></li><li><code>List&lt;Integer&gt; listOfInteger = new ArrayList&lt;Integer&gt;();</code></li><li><code>listOfAnyType = listOfString; //legal</code></li><li><code>listOfAnyType = listOfInteger; //legal</code></li><li><code>listOfObjectType = (List&lt;Object&gt;) listOfString; //compiler error</code></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwang.april;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zwang.april.bean.Student;</span><br><span class="line"><span class="keyword">import</span> com.zwang.april.bean.WorkMan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ●●●</span></span><br><span class="line"><span class="comment"> * 反射的概述:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，</span></span><br><span class="line"><span class="comment"> * 都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</span></span><br><span class="line"><span class="comment"> * 要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * (总结) 反射就是把java类中的各种成分映射成一个个的Java对象</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * ●●●</span></span><br><span class="line"><span class="comment"> * 深拷贝 与 浅拷贝 : 大部分都是浅拷贝（通过实现Cloneable接口，重写clone()方法，调用super.clone()来实现深拷贝）</span></span><br><span class="line"><span class="comment"> * 真正的深拷贝：通过实现Serializable 接口并用对象的序列化和反序列化来实现真正的深度克隆做法：（参阅下列的 clone()）</span></span><br><span class="line"><span class="comment"> * 通过ByteArrayOutputStream ObjectArrayOutputStream write() 再通过ByteArrayInputStream ObjectArrayInputStream read()实现</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * ●●●</span></span><br><span class="line"><span class="comment"> * 泛型的协变 与 逆变 : 协变---&gt; List&lt;? extends Number&gt; list = new ArrayList&lt;&gt;(); 逆变 ---&gt; List&lt;? super Number&gt; list =new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 泛型的上边界 与 下边界 : ? extends Number 指定了上边界    ? super Number 指定了下边界</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * description: 练习处</span></span><br><span class="line"><span class="comment"> * author: phl</span></span><br><span class="line"><span class="comment"> * date: 2018-04-09 下午 2:06</span></span><br><span class="line"><span class="comment"> * update:</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1 获取类名三种方式：</span></span><br><span class="line"><span class="comment">     * 1.1 通过对象 getClass()</span></span><br><span class="line"><span class="comment">     * 1.2 通过对象 .class</span></span><br><span class="line"><span class="comment">     * 1.3 通过包名全路径 Class.forName(String package)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.1 获取类名 (创建一个对象实例，然后通过getClass()方法获取---对象都已经拿到了，反射用处不大)</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        Class&lt;? extends Student&gt; aClass1 = stu.getClass();</span><br><span class="line">        System.out.println(aClass1.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.2 获取类名 (通过 .class --- 需要导入包，依赖性较强)</span></span><br><span class="line">        Class&lt;Student&gt; aClass2 = Student.class;</span><br><span class="line">        System.out.println(aClass1 == aClass2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.3 获取类名（通过包名全路径+Class --- 一个字符串就可以，相对于更加优势）</span></span><br><span class="line">            Class&lt;?&gt; aClass3 = Class.forName(<span class="string">"com.zwang.april.bean.Student"</span>);</span><br><span class="line">            System.out.println(aClass1 == aClass3);</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(<span class="string">"java.util.ArrayList"</span>);</span><br><span class="line">            System.out.print(aClass.getName());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2 通过Class对象获取构造方法，成员变量，成员方法，并访问成员</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 2.1 通过Class对象获取构造方法</span></span><br><span class="line"><span class="comment">     * 批量</span></span><br><span class="line"><span class="comment">     * class.getConstructors() 获取该所有public修饰的Constructor</span></span><br><span class="line"><span class="comment">     * 单个</span></span><br><span class="line"><span class="comment">     * class.getConstructor(Class... parameterTypes) 获取指定的public修饰的构造方法</span></span><br><span class="line"><span class="comment">     * 批量</span></span><br><span class="line"><span class="comment">     * class.getDeclaredConstructors() 获取所有的Constructor</span></span><br><span class="line"><span class="comment">     * 单个</span></span><br><span class="line"><span class="comment">     * class.getDeclaredConstructors(Class... parameterTypes) 获取指定的Constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constructor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; stuClass = Class.forName(<span class="string">"com.zwang.april.bean.Student"</span>);</span><br><span class="line">            Constructor&lt;?&gt;[] pubCons = stuClass.getConstructors();</span><br><span class="line">            <span class="keyword">for</span> (Constructor con : pubCons) &#123;</span><br><span class="line">                System.out.println(con);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"**********************所有构造方法*********************************"</span>);</span><br><span class="line"></span><br><span class="line">            Constructor&lt;?&gt;[] allCons = stuClass.getDeclaredConstructors();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Constructor con : allCons) &#123;</span><br><span class="line">                System.out.println(con);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"**********************指定构造方法*********************************"</span>);</span><br><span class="line"></span><br><span class="line">            Constructor&lt;?&gt; constructor = stuClass.getDeclaredConstructor(<span class="keyword">int</span>.class);</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不能直接访问非public修饰的构造方法、属性或者方法 否则 Framework Method invoke Explosively</span></span><br><span class="line">            <span class="comment">//暴力访问: setAccessible（true）忽略掉访问修饰符</span></span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//Uses the constructor represented by this &#123;@code Constructor&#125; object to</span></span><br><span class="line">            <span class="comment">//create and initialize a new instance of the constructor's declaring class</span></span><br><span class="line">            Object instance = constructor.newInstance(<span class="number">1</span>);</span><br><span class="line">            System.out.println(instance);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.2 访问成员变量并调用</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 批量</span></span><br><span class="line"><span class="comment">     * class.getFields() 访问所有public修饰的字段</span></span><br><span class="line"><span class="comment">     * class.getDeclaredFields() 访问所有字段</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 单个</span></span><br><span class="line"><span class="comment">     * class.getField(String name) 访问一个指定public修饰的字段</span></span><br><span class="line"><span class="comment">     * class.getDeclaredField(String name) 访问所有的字段</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 举例：获取某个public修饰的字段 并调用</span></span><br><span class="line"><span class="comment">     * (1) Class&lt;?&gt; wClass = Class.forName(); 先获取class对象</span></span><br><span class="line"><span class="comment">     * (2) Field f = wClass.getField("name"); 通过getField(String name) 获取public修饰的字段</span></span><br><span class="line"><span class="comment">     * (3) Object obj = wClass.getConstructor().newInstance(); 通过构造函数初始化该对象</span></span><br><span class="line"><span class="comment">     * (4) f.set(obj,"刘德华"); Field.set(Object obj, Object value); Object ---&gt; 修改字段的对象 value ---&gt; 修改改参数的值(若为private修饰，需要添加访问权限)</span></span><br><span class="line"><span class="comment">     * (5) WorkMan man = (WorkMan)obj;</span></span><br><span class="line"><span class="comment">     * (6) 打印man</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; workClass = Class.forName(<span class="string">"com.zwang.april.bean.WorkMan"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"****************访问所有public字段****************"</span>);</span><br><span class="line">            Field[] pubFields = workClass.getFields();</span><br><span class="line">            <span class="keyword">for</span> (Field f : pubFields) &#123;</span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"****************访问所有字段（包括private、protect、默认）****************"</span>);</span><br><span class="line">            Field[] allFields = workClass.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field f : allFields) &#123;</span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Field name = workClass.getDeclaredField(<span class="string">"sex"</span>);</span><br><span class="line">            System.out.println(name);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//实例化一个对象</span></span><br><span class="line">            Object obj = workClass.getConstructor().newInstance();</span><br><span class="line">            <span class="comment">//添加字段访问权限</span></span><br><span class="line">            name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//为字段设置值</span></span><br><span class="line">            name.set(obj, <span class="string">'男'</span>);</span><br><span class="line">            WorkMan workMan = (WorkMan) obj;</span><br><span class="line">            System.out.println(workMan);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchFieldException | IllegalAccessException | InvocationTargetException | InstantiationException | NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.3 获取成员方法并调用</span></span><br><span class="line"><span class="comment">     * 批量</span></span><br><span class="line"><span class="comment">     * class.getMethods()</span></span><br><span class="line"><span class="comment">     * class.getDeclaredMethods()</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 单个</span></span><br><span class="line"><span class="comment">     * class.getMethod(String name, Class&lt;?&gt;... parameterTypes)  name ---&gt; 方法名   parameterTypes ---&gt;方法中的参数</span></span><br><span class="line"><span class="comment">     * class.getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)  name ---&gt; 方法名   parameterTypes ---&gt;方法中的参数</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 调用方法</span></span><br><span class="line"><span class="comment">     * ① Class&lt;?&gt; tClass = Class.forName("com.zwang.april.bean.Teacher"); 获取Class对象</span></span><br><span class="line"><span class="comment">     * ② Method method = tClass.getDeclaredMethod("show4",int.class);  获取相应的方法</span></span><br><span class="line"><span class="comment">     * ③ Object obj = tClass.getConstructor().newInstance();  通过构造函数进行实例化，生成Class 对象</span></span><br><span class="line"><span class="comment">     * ④ method.setAccessible(true);   私有方法需要添加访问权限</span></span><br><span class="line"><span class="comment">     * ⑤ Object objectResult = method.invoke(Object obj, Object... args);  obj ---&gt; 实例 ，args ---&gt; 传入相应的参数</span></span><br><span class="line"><span class="comment">     * 打印</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; tClass = Class.forName(<span class="string">"com.zwang.april.bean.Teacher"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"*****************获取所有public修饰的方法*****************"</span>);</span><br><span class="line">            Method[] pubMethod = tClass.getMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method m : pubMethod) &#123;</span><br><span class="line">                System.out.println(m);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"*****************获取指定public修饰的方法*****************"</span>);</span><br><span class="line">            Method show1 = tClass.getMethod(<span class="string">"show1"</span>, String.class);</span><br><span class="line">            System.out.println(show1);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"*****************获取所有方法*****************"</span>);</span><br><span class="line">            Method[] allMethod = tClass.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method m : allMethod) &#123;</span><br><span class="line">                System.out.println(m);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"*****************获取指定private修饰的方法*****************"</span>);</span><br><span class="line">            Method show4 = tClass.getDeclaredMethod(<span class="string">"show4"</span>, <span class="keyword">int</span>.class);</span><br><span class="line">            System.out.println(show4);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用</span></span><br><span class="line">            Object obj = tClass.getConstructor().newInstance();</span><br><span class="line">            <span class="comment">//允许访问</span></span><br><span class="line">            show4.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object result = show4.invoke(obj, <span class="number">15</span>);</span><br><span class="line">            System.out.println(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.4 反射main方法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * ┞ Class&lt;?&gt; mClass = Class.forName("com.zwang.april.bean.StaticMethod"); 获取类名</span></span><br><span class="line"><span class="comment">     * ┞ Method mMethod = mClass.getMethod("main", String[].class); 获取main()</span></span><br><span class="line"><span class="comment">     * ┞ 因为是静态方法，所以不需要对象调用，可以直接传入null值</span></span><br><span class="line"><span class="comment">     * ┞ mMethod.invoke(null,new Object[]&#123;new String[]&#123;"1","2","3"&#125;&#125;);</span></span><br><span class="line"><span class="comment">     * ┞ 亦或者传入class</span></span><br><span class="line"><span class="comment">     * ┞ mMethod.invoke(mClass,new Object[]&#123;new String[]&#123;"1","2","3"&#125;&#125;);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessMain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; mClass = Class.forName(<span class="string">"com.zwang.april.bean.StaticMethod"</span>);</span><br><span class="line">            Method mMethod = mClass.getMethod(<span class="string">"main"</span>, String[].class);</span><br><span class="line"><span class="comment">//            mMethod.invoke(null, (Object) new String[]&#123;"1","2","3"&#125;);</span></span><br><span class="line">            <span class="comment">//因为是静态方法，所以不需要对象调用，此处可以传null或者是mClass(通过类去调用)</span></span><br><span class="line">            <span class="comment">// mMethod.invoke(null,new Object[]&#123;new String[]&#123;"1","2","3"&#125;&#125;);</span></span><br><span class="line">            mMethod.invoke(mClass, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.利用反射 、 越过泛型检查  如下</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherUse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        strList.add(<span class="string">"aaa"</span>);</span><br><span class="line">        strList.add(<span class="string">"bbb"</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;ArrayList&gt; listClass = ArrayList.class;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method addMethod = listClass.getMethod(<span class="string">"add"</span>, Object.class);</span><br><span class="line">            addMethod.invoke(strList, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Object obj : strList) &#123;</span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*********************第二种方式***********************"</span>);</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"aaa"</span>);</span><br><span class="line">        list.add(<span class="string">"bbb"</span>);</span><br><span class="line">        ArrayList mList = list;</span><br><span class="line">        mList.add(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object obj : mList) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 深拷贝</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 通过实现Serializable接口，并用对象的序列化与反序列化实现真正的深拷贝</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends Serializable&gt; <span class="function">T <span class="title">clone</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        T cloneObj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream byteOut = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream objOut = <span class="keyword">new</span> ObjectOutputStream(byteOut);</span><br><span class="line">            objOut.writeObject(obj);</span><br><span class="line">            objOut.close();</span><br><span class="line"></span><br><span class="line">            ByteArrayInputStream byteInput = <span class="keyword">new</span> ByteArrayInputStream(byteOut.toByteArray());</span><br><span class="line">            ObjectInputStream objInput = <span class="keyword">new</span> ObjectInputStream(byteInput);</span><br><span class="line">            cloneObj = (T) objInput.readObject();</span><br><span class="line">            objInput.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneObj;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 泛型的协变与逆变</span></span><br><span class="line"><span class="comment">     * 定义：（≦ 表示继承关系 例如：String extends Object . f(Object) ---&gt; 有Object对象构造出来的一种类型 例如: Object[] 、List）</span></span><br><span class="line"><span class="comment">     * 当A ≦ B时,如果有f(A) ≦ f(B),那么f叫做协变；</span></span><br><span class="line"><span class="comment">     * 当A ≦ B时,如果有f(B) ≦ f(A),那么f叫做逆变；</span></span><br><span class="line"><span class="comment">     * 如果上面两种关系都不成立则叫做不可变。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 现在问题来了：究竟什么时候用extends什么时候用super呢？《Effective Java》给出了答案：</span></span><br><span class="line"><span class="comment">     * PECS: producer-extends, consumer-super.</span></span><br><span class="line"><span class="comment">     * java.util.Collections的copy方法(JDK1.7)完美地诠释了PECS：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object[] objects = <span class="keyword">new</span> String[<span class="number">3</span>]; <span class="comment">//协变</span></span><br><span class="line">        List&lt;? extends Number&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">//协变 （extends指定泛型的上边界 super指定泛型的下边界）</span></span><br><span class="line">        List&lt;? <span class="keyword">super</span> Number&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">//逆变</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 反射笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官网基础</title>
      <link href="/2018/01/15/%E5%AE%98%E7%BD%91%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/01/15/%E5%AE%98%E7%BD%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="官网基础"><a href="#官网基础" class="headerlink" title="官网基础"></a>官网基础</h2><h5 id="定义样式"><a href="#定义样式" class="headerlink" title="定义样式"></a><strong>定义样式</strong></h5><p>要创建一组样式，请在您的项目的 <code>res/values/</code> 目录中保存一个 XML 文件。 可任意指定该 XML 文件的名称，但它必须使用 <code>.xml</code> 扩展名，并且必须保存在 <code>res/values/</code> 文件夹内。</p><p>该 XML 文件的根节点必须是 <code>&lt;resources&gt;</code>。</p><p>对于您想创建的每个样式，向该文件添加一个 <code>&lt;style&gt;</code> 元素，该元素带有对样式进行唯一标识的 <code>name</code> 属性（该属性为必需属性）。然后为该样式的每个属性添加一个 <code>&lt;item&gt;</code> 元素，该元素带有声明样式属性以及属性值的 <code>name</code>（该属性为必需属性）。 根据样式属性，<code>&lt;item&gt;</code> 的值可以是关键字字符串、十六进制颜色值、对另一资源类型的引用或其他值。以下是一个包含单个样式的示例文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;style name=<span class="string">"CodeFont"</span> parent=<span class="string">"@android:style/TextAppearance.Medium"</span>&gt;</span><br><span class="line">        &lt;item name="android:layout_width"&gt;fill_parent&lt;/item&gt;</span><br><span class="line">        &lt;item name="android:layout_height"&gt;wrap_content&lt;/item&gt;</span><br><span class="line">        &lt;item name="android:textColor"&gt;#00FF00&lt;/item&gt;</span><br><span class="line">        &lt;item name="android:typeface"&gt;monospace&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;resources&gt;</code> 元素的每个子项都会在编译时转换成一个应用资源对象，该对象可由 <code>&lt;style&gt;</code> 元素的 <code>name</code> 属性中的值引用。 可从 XML 布局以 <code>@style/CodeFont</code> 形式引用该示例样式（如上文引言中所示）。</p><p><code>&lt;style&gt;</code> 元素中的 <code>parent</code> 属性是可选属性，它指定应作为此样式所继承属性来源的另一样式的资源 ID。 如果愿意，您可在随后替换这些继承的样式属性。</p><p>​</p><h5 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h5><h6 id="向应用栏添加项目"><a href="#向应用栏添加项目" class="headerlink" title="向应用栏添加项目"></a><strong>向应用栏添加项目</strong></h6><p>您的片段可以通过实现 <code>onCreateOptionsMenu()</code> 向 Activity 的<a href="https://developer.android.google.cn/guide/topics/ui/menus.html#options-menu" target="_blank" rel="noopener">选项菜单</a>（并因此向<a href="https://developer.android.google.cn/training/appbar/index.html" target="_blank" rel="noopener">应用栏</a>）贡献菜单项。不过，为了使此方法能够收到调用，您必须在<code>onCreate()</code> 期间调用 <code>setHasOptionsMenu()</code>，以指示片段想要向选项菜单添加菜单项（否则，片段将不会收到对 <code>onCreateOptionsMenu()</code> 的调用）。</p><p>您之后从片段添加到选项菜单的任何菜单项都将追加到现有菜单项之后。 选定菜单项时，片段还会收到对 <code>onOptionsItemSelected()</code> 的回调。</p><p>您还可以通过调用 <code>registerForContextMenu()</code>，在片段布局中注册一个视图来提供上下文菜单。用户打开上下文菜单时，片段会收到对<code>onCreateContextMenu()</code> 的调用。当用户选择某个菜单项时，片段会收到对 <code>onContextItemSelected()</code> 的调用。</p><blockquote><p><strong>注</strong>：尽管您的片段会收到与其添加的每个菜单项对应的菜单项选定回调，但当用户选择菜单项时，Activity 会首先收到相应的回调。 如果 Activity 对菜单项选定回调的实现不会处理选定的菜单项，则系统会将事件传递到片段的回调。 这适用于选项菜单和上下文菜单。</p></blockquote><h5 id="intent"><a href="#intent" class="headerlink" title="intent"></a><strong>intent</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证是否存在接收intent的应用</span></span><br><span class="line">PackageManager packageManager = getPackageManager();</span><br><span class="line">List activities = packageManager.queryIntentActivities(intent,</span><br><span class="line">        PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line"><span class="keyword">boolean</span> isIntentSafe = activities.size() &gt; <span class="number">0</span>;</span><br><span class="line"><span class="comment">//添加意图选择</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Always use string resources for UI text.</span></span><br><span class="line"><span class="comment">// This says something like "Share this photo with"</span></span><br><span class="line">String title = getResources().getString(R.string.chooser_title);</span><br><span class="line"><span class="comment">// Create intent to show chooser</span></span><br><span class="line">Intent chooser = Intent.createChooser(intent, title);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify the intent will resolve to at least one activity</span></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    startActivity(chooser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;！--隐式启动--&gt;</span><br><span class="line">&lt;activity android:name=<span class="string">"ShareActivity"</span>&gt;</span><br><span class="line">&lt;!-- filter <span class="keyword">for</span> sending text; accepts SENDTO action with sms URI schemes --&gt;</span><br><span class="line">&lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">"android.intent.action.SENDTO"</span>/&gt;</span><br><span class="line">    &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span><br><span class="line">    &lt;data android:scheme=<span class="string">"sms"</span> /&gt;</span><br><span class="line">    &lt;data android:scheme=<span class="string">"smsto"</span> /&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br><span class="line">&lt;!-- filter <span class="keyword">for</span> sending text or images; accepts SEND action and text or image data --&gt;</span><br><span class="line">&lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">"android.intent.action.SEND"</span>/&gt;</span><br><span class="line">    &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span><br><span class="line">    &lt;data android:mimeType=<span class="string">"image/*"</span>/&gt;</span><br><span class="line">    &lt;data android:mimeType=<span class="string">"text/plain"</span>/&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the intent that started this activity</span></span><br><span class="line"></span><br><span class="line">Intent intent = getIntent();</span><br><span class="line">Uri data = intent.getData();</span><br><span class="line"><span class="comment">// Figure out what to do based on the intent type</span></span><br><span class="line"><span class="keyword">if</span> (intent.getType().indexOf(<span class="string">"image/"</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Handle intents with image data ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getType().equals(<span class="string">"text/plain"</span>)) &#123;</span><br><span class="line">    <span class="comment">// Handle intents with text ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="危险权限申请"><a href="#危险权限申请" class="headerlink" title="危险权限申请"></a><strong>危险权限申请</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Here, thisActivity is the current activity</span></span><br><span class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(thisActivity,</span><br><span class="line">                Manifest.permission.READ_CONTACTS)</span><br><span class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Should we show an explanation?</span></span><br><span class="line">    <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,</span><br><span class="line">            Manifest.permission.READ_CONTACTS)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Show an expanation to the user *asynchronously* -- don't block</span></span><br><span class="line">        <span class="comment">// this thread waiting for the user's response! After the user</span></span><br><span class="line">        <span class="comment">// sees the explanation, try again to request the permission.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// No explanation needed, we can request the permission.</span></span><br><span class="line"></span><br><span class="line">        ActivityCompat.requestPermissions(thisActivity,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;Manifest.permission.READ_CONTACTS&#125;,</span><br><span class="line">                MY_PERMISSIONS_REQUEST_READ_CONTACTS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an</span></span><br><span class="line">        <span class="comment">// app-defined int constant. The callback method gets the</span></span><br><span class="line">        <span class="comment">// result of the request.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理回调</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">        String permissions[], <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> MY_PERMISSIONS_REQUEST_READ_CONTACTS: &#123;</span><br><span class="line">            <span class="comment">// If request is cancelled, the result arrays are empty.</span></span><br><span class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// permission was granted, yay! Do the</span></span><br><span class="line">                <span class="comment">// contacts-related task you need to do.</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// permission denied, boo! Disable the</span></span><br><span class="line">                <span class="comment">// functionality that depends on this permission.</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// other 'case' lines to check for other</span></span><br><span class="line">        <span class="comment">// permissions this app might request</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基础写</span></span><br><span class="line">String filename = <span class="string">"myfile"</span>;</span><br><span class="line">String string = <span class="string">"Hello world!"</span>;</span><br><span class="line">FileOutputStream outputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  outputStream = openFileOutput(filename, Context.MODE_PRIVATE);</span><br><span class="line">  outputStream.write(string.getBytes());</span><br><span class="line">  outputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//临时文件</span></span><br><span class="line">String fileName = Uri.parse(url).getLastPathSegment();</span><br><span class="line">file = File.createTempFile(fileName, <span class="keyword">null</span>, context.getCacheDir());</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断外部存储是否装载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExternalStorageWritable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String state = Environment.getExternalStorageState();</span><br><span class="line">    <span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(state)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断外部存储是否可读</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExternalStorageReadable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String state = Environment.getExternalStorageState();</span><br><span class="line">    <span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(state) ||</span><br><span class="line">        Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 指定文件外部存储目录，可以传null.</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(context.getExternalFilesDir(</span><br><span class="line">            Environment.DIRECTORY_PICTURES), albumName);</span><br><span class="line"><span class="comment">//查询存储使用信息</span></span><br><span class="line">getCacheDir().getFreeSpace()</span><br><span class="line">getCacheDir().getTotalSpace()</span><br></pre></td></tr></table></figure><h5 id="room数据库的使用："><a href="#room数据库的使用：" class="headerlink" title="room数据库的使用："></a>room数据库的使用：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//By default, Room creates a column for each field that's defined in the entity. </span></span><br><span class="line"><span class="comment">//If an entity has fields that you don't want to persist, you can annotate them using @Ignore. </span></span><br><span class="line"><span class="comment">//You must reference the entity class through the entities array in the Database class.</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    Bitmap picture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复合型主键</span></span><br><span class="line"><span class="meta">@Entity</span>(primaryKeys = &#123;<span class="string">"firstName"</span>, <span class="string">"lastName"</span>&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    Bitmap picture;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表重命名，否则就是以类名作为表的名字  （注意：表名不区分大小写）</span></span><br><span class="line"><span class="meta">@Entity</span>(primaryKeys = &#123;<span class="string">"firstName"</span>, <span class="string">"lastName"</span>&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    Bitmap picture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//columnInfo 作用与tableName相似，声明的字段会作为表的列明，通过@columnInfo可修改列名</span></span><br><span class="line"><span class="meta">@Entity</span>(tableName = <span class="string">"users"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"first_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"last_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    Bitmap picture;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义对象之间的关系（）</span></span><br><span class="line"><span class="meta">@Entity</span>(foreignKeys = <span class="meta">@ForeignKey</span>(entity = User.class,</span><br><span class="line">                                  parentColumns = <span class="string">"id"</span>,</span><br><span class="line">                                  childColumns = <span class="string">"user_id"</span>))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"user_id"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> userId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用注解@Embedded创建嵌套对象 （User表中包含Address的street，state,city,post_code）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String street;</span><br><span class="line">    <span class="keyword">public</span> String state;</span><br><span class="line">    <span class="keyword">public</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"post_code"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> postCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">public</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h5><h6 id="要求相关硬件"><a href="#要求相关硬件" class="headerlink" title="要求相关硬件"></a>要求相关硬件</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest ... &gt;</span><br><span class="line">    &lt;uses-feature android:name=<span class="string">"android.hardware.camera"</span></span><br><span class="line">                  android:required=<span class="string">"true"</span> /&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><h6 id="简单拍照-获取缩略图"><a href="#简单拍照-获取缩略图" class="headerlink" title="简单拍照/获取缩略图"></a>简单拍照/获取缩略图</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_IMAGE_CAPTURE = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//拍照</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchTakePictureIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent takePictureIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    <span class="keyword">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取缩略图</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (requestCode == REQUEST_IMAGE_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</span><br><span class="line">        Bundle extras = data.getExtras();</span><br><span class="line">        Bitmap imageBitmap = (Bitmap) extras.get(<span class="string">"data"</span>);</span><br><span class="line">        mImageView.setImageBitmap(imageBitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="获取唯一文件"><a href="#获取唯一文件" class="headerlink" title="获取唯一文件"></a>获取唯一文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">String mCurrentPhotoPath;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> File <span class="title">createImageFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Create an image file name</span></span><br><span class="line">    String timeStamp = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd_HHmmss"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">    String imageFileName = <span class="string">"JPEG_"</span> + timeStamp + <span class="string">"_"</span>;</span><br><span class="line">    File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);</span><br><span class="line">    File image = File.createTempFile(</span><br><span class="line">        imageFileName,  <span class="comment">/* prefix */</span></span><br><span class="line">        <span class="string">".jpg"</span>,         <span class="comment">/* suffix */</span></span><br><span class="line">        storageDir      <span class="comment">/* directory */</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save a file: path for use with ACTION_VIEW intents</span></span><br><span class="line">    mCurrentPhotoPath = image.getAbsolutePath();</span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="拍照-原图"><a href="#拍照-原图" class="headerlink" title="拍照/原图"></a>拍照/原图</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_TAKE_PHOTO = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchTakePictureIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent takePictureIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    <span class="comment">// Ensure that there's a camera activity to handle the intent</span></span><br><span class="line">    <span class="keyword">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Create the File where the photo should go</span></span><br><span class="line">        File photoFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            photoFile = createImageFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="comment">// Error occurred while creating the File</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Continue only if the File was successfully created</span></span><br><span class="line">        <span class="keyword">if</span> (photoFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Uri photoURI = FileProvider.getUriForFile(<span class="keyword">this</span>,</span><br><span class="line">                                                  <span class="string">"com.example.android.fileprovider"</span>,</span><br><span class="line">                                                  photoFile);</span><br><span class="line">            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);</span><br><span class="line">            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="通知图库更新"><a href="#通知图库更新" class="headerlink" title="通知图库更新"></a>通知图库更新</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以让其他应用访问</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">galleryAddPic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent mediaScanIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);</span><br><span class="line">    File f = <span class="keyword">new</span> File(mCurrentPhotoPath);</span><br><span class="line">    Uri contentUri = Uri.fromFile(f);</span><br><span class="line">    mediaScanIntent.setData(contentUri);</span><br><span class="line">    <span class="keyword">this</span>.sendBroadcast(mediaScanIntent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="尺寸压缩"><a href="#尺寸压缩" class="headerlink" title="尺寸压缩"></a>尺寸压缩</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Get the dimensions of the View</span></span><br><span class="line">    <span class="keyword">int</span> targetW = mImageView.getWidth();</span><br><span class="line">    <span class="keyword">int</span> targetH = mImageView.getHeight();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the dimensions of the bitmap</span></span><br><span class="line">    BitmapFactory.Options bmOptions = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">    bmOptions.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</span><br><span class="line">    <span class="keyword">int</span> photoW = bmOptions.outWidth;</span><br><span class="line">    <span class="keyword">int</span> photoH = bmOptions.outHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine how much to scale down the image</span></span><br><span class="line">    <span class="keyword">int</span> scaleFactor = Math.min(photoW/targetW, photoH/targetH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decode the image file into a Bitmap sized to fill the View</span></span><br><span class="line">    bmOptions.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">    bmOptions.inSampleSize = scaleFactor;</span><br><span class="line">    bmOptions.inPurgeable = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</span><br><span class="line">    mImageView.setImageBitmap(bitmap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="调用相机录制视频"><a href="#调用相机录制视频" class="headerlink" title="调用相机录制视频"></a>调用相机录制视频</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加 &lt;uses-feature android:name="android.hardware.camera" android:required="true" /&gt;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_VIDEO_CAPTURE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchTakeVideoIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent takeVideoIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_VIDEO_CAPTURE);</span><br><span class="line">    <span class="keyword">if</span> (takeVideoIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过使用videoView播放</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (requestCode == REQUEST_VIDEO_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</span><br><span class="line">        Uri videoUri = intent.getData();</span><br><span class="line">        mVideoView.setVideoURI(videoUri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Sence"><a href="#Sence" class="headerlink" title="Sence"></a>Sence</h5><h6 id="布局生成Sence"><a href="#布局生成Sence" class="headerlink" title="布局生成Sence"></a>布局生成Sence</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Scene mAScene;</span><br><span class="line">Scene mAnotherScene;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the scene root for the scenes in this app</span></span><br><span class="line">mSceneRoot = (ViewGroup) findViewById(R.id.scene_root);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the scenes</span></span><br><span class="line">mAScene = Scene.getSceneForLayout(mSceneRoot, R.layout.a_scene, <span class="keyword">this</span>);</span><br><span class="line">mAnotherScene =</span><br><span class="line">    Scene.getSceneForLayout(mSceneRoot, R.layout.another_scene, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h6 id="代码创建Sence"><a href="#代码创建Sence" class="headerlink" title="代码创建Sence"></a>代码创建Sence</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Scene mScene;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain the scene root element</span></span><br><span class="line">mSceneRoot = (ViewGroup) mSomeLayoutElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain the view hierarchy to add as a child of</span></span><br><span class="line"><span class="comment">// the scene root when this scene is entered</span></span><br><span class="line">mViewHierarchy = (ViewGroup) someOtherLayoutElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a scene</span></span><br><span class="line">mScene = <span class="keyword">new</span> Scene(mSceneRoot, mViewHierarchy);</span><br></pre></td></tr></table></figure><h6 id="Transition的创建"><a href="#Transition的创建" class="headerlink" title="Transition的创建"></a>Transition的创建</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过布局的方式创建</span></span><br><span class="line"><span class="comment">//res/transition/fade_transition.xml</span></span><br><span class="line">&lt;fade xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span> /&gt;</span><br><span class="line"></span><br><span class="line">Transition mFadeTransition =</span><br><span class="line">        TransitionInflater.from(<span class="keyword">this</span>).</span><br><span class="line">        inflateTransition(R.transition.fade_transition);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过代码的方式创建Transition [AutoTransition,Fade,ChangeBounds]</span></span><br><span class="line">Transition mFadeTransition = <span class="keyword">new</span> Fade();</span><br></pre></td></tr></table></figure><h6 id="Transition应用有场景的转换"><a href="#Transition应用有场景的转换" class="headerlink" title="Transition应用有场景的转换"></a>Transition应用有场景的转换</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通常用于不同的视图切换</span></span><br><span class="line">TransitionManager.go(mEndingScene, mFadeTransition);</span><br></pre></td></tr></table></figure><h6 id="Transition应用无场景的转换-TransitionManager-beginDelayedTransition-rootview-flag-用于记录视图层次结构"><a href="#Transition应用无场景的转换-TransitionManager-beginDelayedTransition-rootview-flag-用于记录视图层次结构" class="headerlink" title="Transition应用无场景的转换(TransitionManager.beginDelayedTransition(rootview,flag) 用于记录视图层次结构)"></a>Transition应用无场景的转换(TransitionManager.beginDelayedTransition(rootview,flag) 用于记录视图层次结构)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the root view and create a transition</span></span><br><span class="line">mRootView = (ViewGroup) findViewById(R.id.mainLayout);</span><br><span class="line">mFade = <span class="keyword">new</span> Fade(IN);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start recording changes to the view hierarchy</span></span><br><span class="line">TransitionManager.beginDelayedTransition(mRootView, mFade);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add the new TextView to the view hierarchy</span></span><br><span class="line">mRootView.addView(mLabelText);</span><br><span class="line"></span><br><span class="line"><span class="comment">// When the system redraws the screen to show this update,</span></span><br><span class="line"><span class="comment">// the framework will animate the addition as a fade in</span></span><br></pre></td></tr></table></figure><h5 id="PageTransformer"><a href="#PageTransformer" class="headerlink" title="PageTransformer"></a>PageTransformer</h5><p>缩放效果（<a href="https://developer.android.google.cn/training/animation/anim_page_transformer_zoomout.mp4）" target="_blank" rel="noopener">https://developer.android.google.cn/training/animation/anim_page_transformer_zoomout.mp4）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoomOutPageTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_SCALE = <span class="number">0.85f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_ALPHA = <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pageWidth = view.getWidth();</span><br><span class="line">        <span class="keyword">int</span> pageHeight = view.getHeight();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (position &lt; -<span class="number">1</span>) &#123; <span class="comment">// [-Infinity,-1)</span></span><br><span class="line">            <span class="comment">// This page is way off-screen to the left.</span></span><br><span class="line">            view.setAlpha(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) &#123; <span class="comment">// [-1,1]</span></span><br><span class="line">            <span class="comment">// Modify the default slide transition to shrink the page as well</span></span><br><span class="line">            <span class="keyword">float</span> scaleFactor = Math.max(MIN_SCALE, <span class="number">1</span> - Math.abs(position));</span><br><span class="line">            <span class="keyword">float</span> vertMargin = pageHeight * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">float</span> horzMargin = pageWidth * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                view.setTranslationX(horzMargin - vertMargin / <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                view.setTranslationX(-horzMargin + vertMargin / <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Scale the page down (between MIN_SCALE and 1)</span></span><br><span class="line">            view.setScaleX(scaleFactor);</span><br><span class="line">            view.setScaleY(scaleFactor);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Fade the page relative to its size.</span></span><br><span class="line">            view.setAlpha(MIN_ALPHA +</span><br><span class="line">                    (scaleFactor - MIN_SCALE) /</span><br><span class="line">                    (<span class="number">1</span> - MIN_SCALE) * (<span class="number">1</span> - MIN_ALPHA));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// (1,+Infinity]</span></span><br><span class="line">            <span class="comment">// This page is way off-screen to the right.</span></span><br><span class="line">            view.setAlpha(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透明效果（<a href="https://developer.android.google.cn/training/animation/anim_page_transformer_depth.mp4）" target="_blank" rel="noopener">https://developer.android.google.cn/training/animation/anim_page_transformer_depth.mp4）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthPageTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_SCALE = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pageWidth = view.getWidth();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (position &lt; -<span class="number">1</span>) &#123; <span class="comment">// [-Infinity,-1)</span></span><br><span class="line">            <span class="comment">// This page is way off-screen to the left.</span></span><br><span class="line">            view.setAlpha(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">0</span>) &#123; <span class="comment">// [-1,0]</span></span><br><span class="line">            <span class="comment">// Use the default slide transition when moving to the left page</span></span><br><span class="line">            view.setAlpha(<span class="number">1</span>);</span><br><span class="line">            view.setTranslationX(<span class="number">0</span>);</span><br><span class="line">            view.setScaleX(<span class="number">1</span>);</span><br><span class="line">            view.setScaleY(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) &#123; <span class="comment">// (0,1]</span></span><br><span class="line">            <span class="comment">// Fade the page out.</span></span><br><span class="line">            view.setAlpha(<span class="number">1</span> - position);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Counteract the default slide transition</span></span><br><span class="line">            view.setTranslationX(pageWidth * -position);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Scale the page down (between MIN_SCALE and 1)</span></span><br><span class="line">            <span class="keyword">float</span> scaleFactor = MIN_SCALE</span><br><span class="line">                    + (<span class="number">1</span> - MIN_SCALE) * (<span class="number">1</span> - Math.abs(position));</span><br><span class="line">            view.setScaleX(scaleFactor);</span><br><span class="line">            view.setScaleY(scaleFactor);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// (1,+Infinity]</span></span><br><span class="line">            <span class="comment">// This page is way off-screen to the right.</span></span><br><span class="line">            view.setAlpha(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查看大图-https-developer-android-google-cn-training-animation-anim-zoom-mp4"><a href="#查看大图-https-developer-android-google-cn-training-animation-anim-zoom-mp4" class="headerlink" title="查看大图(https://developer.android.google.cn/training/animation/anim_zoom.mp4)"></a>查看大图(<a href="https://developer.android.google.cn/training/animation/anim_zoom.mp4" target="_blank" rel="noopener">https://developer.android.google.cn/training/animation/anim_zoom.mp4</a>)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">zoomImageFromThumb</span><span class="params">(<span class="keyword">final</span> View thumbView, <span class="keyword">int</span> imageResId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// If there's an animation in progress, cancel it</span></span><br><span class="line">    <span class="comment">// immediately and proceed with this one.</span></span><br><span class="line">    <span class="keyword">if</span> (mCurrentAnimator != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mCurrentAnimator.cancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load the high-resolution "zoomed-in" image.</span></span><br><span class="line">    <span class="keyword">final</span> ImageView expandedImageView = (ImageView) findViewById(</span><br><span class="line">            R.id.expanded_image);</span><br><span class="line">    expandedImageView.setImageResource(imageResId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate the starting and ending bounds for the zoomed-in image.</span></span><br><span class="line">    <span class="comment">// This step involves lots of math. Yay, math.</span></span><br><span class="line">    <span class="keyword">final</span> Rect startBounds = <span class="keyword">new</span> Rect();</span><br><span class="line">    <span class="keyword">final</span> Rect finalBounds = <span class="keyword">new</span> Rect();</span><br><span class="line">    <span class="keyword">final</span> Point globalOffset = <span class="keyword">new</span> Point();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The start bounds are the global visible rectangle of the thumbnail,</span></span><br><span class="line">    <span class="comment">// and the final bounds are the global visible rectangle of the container</span></span><br><span class="line">    <span class="comment">// view. Also set the container view's offset as the origin for the</span></span><br><span class="line">    <span class="comment">// bounds, since that's the origin for the positioning animation</span></span><br><span class="line">    <span class="comment">// properties (X, Y).</span></span><br><span class="line">    thumbView.getGlobalVisibleRect(startBounds);</span><br><span class="line">    findViewById(R.id.container)</span><br><span class="line">            .getGlobalVisibleRect(finalBounds, globalOffset);</span><br><span class="line">    startBounds.offset(-globalOffset.x, -globalOffset.y);</span><br><span class="line">    finalBounds.offset(-globalOffset.x, -globalOffset.y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Adjust the start bounds to be the same aspect ratio as the final</span></span><br><span class="line">    <span class="comment">// bounds using the "center crop" technique. This prevents undesirable</span></span><br><span class="line">    <span class="comment">// stretching during the animation. Also calculate the start scaling</span></span><br><span class="line">    <span class="comment">// factor (the end scaling factor is always 1.0).</span></span><br><span class="line">    <span class="keyword">float</span> startScale;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">float</span>) finalBounds.width() / finalBounds.height()</span><br><span class="line">            &gt; (<span class="keyword">float</span>) startBounds.width() / startBounds.height()) &#123;</span><br><span class="line">        <span class="comment">// Extend start bounds horizontally</span></span><br><span class="line">        startScale = (<span class="keyword">float</span>) startBounds.height() / finalBounds.height();</span><br><span class="line">        <span class="keyword">float</span> startWidth = startScale * finalBounds.width();</span><br><span class="line">        <span class="keyword">float</span> deltaWidth = (startWidth - startBounds.width()) / <span class="number">2</span>;</span><br><span class="line">        startBounds.left -= deltaWidth;</span><br><span class="line">        startBounds.right += deltaWidth;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Extend start bounds vertically</span></span><br><span class="line">        startScale = (<span class="keyword">float</span>) startBounds.width() / finalBounds.width();</span><br><span class="line">        <span class="keyword">float</span> startHeight = startScale * finalBounds.height();</span><br><span class="line">        <span class="keyword">float</span> deltaHeight = (startHeight - startBounds.height()) / <span class="number">2</span>;</span><br><span class="line">        startBounds.top -= deltaHeight;</span><br><span class="line">        startBounds.bottom += deltaHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hide the thumbnail and show the zoomed-in view. When the animation</span></span><br><span class="line">    <span class="comment">// begins, it will position the zoomed-in view in the place of the</span></span><br><span class="line">    <span class="comment">// thumbnail.</span></span><br><span class="line">    thumbView.setAlpha(<span class="number">0f</span>);</span><br><span class="line">    expandedImageView.setVisibility(View.VISIBLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the pivot point for SCALE_X and SCALE_Y transformations</span></span><br><span class="line">    <span class="comment">// to the top-left corner of the zoomed-in view (the default</span></span><br><span class="line">    <span class="comment">// is the center of the view).</span></span><br><span class="line">    expandedImageView.setPivotX(<span class="number">0f</span>);</span><br><span class="line">    expandedImageView.setPivotY(<span class="number">0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Construct and run the parallel animation of the four translation and</span></span><br><span class="line">    <span class="comment">// scale properties (X, Y, SCALE_X, and SCALE_Y).</span></span><br><span class="line">    AnimatorSet set = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">    set</span><br><span class="line">            .play(ObjectAnimator.ofFloat(expandedImageView, View.X,</span><br><span class="line">                    startBounds.left, finalBounds.left))</span><br><span class="line">            .with(ObjectAnimator.ofFloat(expandedImageView, View.Y,</span><br><span class="line">                    startBounds.top, finalBounds.top))</span><br><span class="line">            .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X,</span><br><span class="line">            startScale, <span class="number">1f</span>)).with(ObjectAnimator.ofFloat(expandedImageView,</span><br><span class="line">                    View.SCALE_Y, startScale, <span class="number">1f</span>));</span><br><span class="line">    set.setDuration(mShortAnimationDuration);</span><br><span class="line">    set.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</span><br><span class="line">    set.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">            mCurrentAnimator = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">            mCurrentAnimator = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    set.start();</span><br><span class="line">    mCurrentAnimator = set;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Upon clicking the zoomed-in image, it should zoom back down</span></span><br><span class="line">    <span class="comment">// to the original bounds and show the thumbnail instead of</span></span><br><span class="line">    <span class="comment">// the expanded image.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> startScaleFinal = startScale;</span><br><span class="line">    expandedImageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mCurrentAnimator != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mCurrentAnimator.cancel();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Animate the four positioning/sizing properties in parallel,</span></span><br><span class="line">            <span class="comment">// back to their original values.</span></span><br><span class="line">            AnimatorSet set = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">            set.play(ObjectAnimator</span><br><span class="line">                        .ofFloat(expandedImageView, View.X, startBounds.left))</span><br><span class="line">                        .with(ObjectAnimator</span><br><span class="line">                                .ofFloat(expandedImageView,</span><br><span class="line">                                        View.Y,startBounds.top))</span><br><span class="line">                        .with(ObjectAnimator</span><br><span class="line">                                .ofFloat(expandedImageView,</span><br><span class="line">                                        View.SCALE_X, startScaleFinal))</span><br><span class="line">                        .with(ObjectAnimator</span><br><span class="line">                                .ofFloat(expandedImageView,</span><br><span class="line">                                        View.SCALE_Y, startScaleFinal));</span><br><span class="line">            set.setDuration(mShortAnimationDuration);</span><br><span class="line">            set.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</span><br><span class="line">            set.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">                    thumbView.setAlpha(<span class="number">1f</span>);</span><br><span class="line">                    expandedImageView.setVisibility(View.GONE);</span><br><span class="line">                    mCurrentAnimator = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">                    thumbView.setAlpha(<span class="number">1f</span>);</span><br><span class="line">                    expandedImageView.setVisibility(View.GONE);</span><br><span class="line">                    mCurrentAnimator = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            set.start();</span><br><span class="line">            mCurrentAnimator = set;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="更改布局动画（添加、删除、更新）"><a href="#更改布局动画（添加、删除、更新）" class="headerlink" title="更改布局动画（添加、删除、更新）"></a>更改布局动画（添加、删除、更新）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在相应的布局中添加animateLayoutChanges = true--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:animateLayoutChanges</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="尺寸限定符："><a href="#尺寸限定符：" class="headerlink" title="尺寸限定符："></a>尺寸限定符：</h5><p><code>res/layout/main.xml</code>，单窗格（默认）布局：</p><p><code>res/layout-large/main.xml</code>，双窗格布局：    </p><p><code>res/layout-sw600dp/main.xml</code>，双窗格布局：（最小宽度大于或等于 600dp 的设备将选择 <code>layout-sw600dp/main.xml</code>）</p><p>NinePatch(.9图制作详情)</p><blockquote><p>边框沿线的黑色像素。顶部和左侧边框上的黑色像素指示可以拉伸图像的位置，右侧和底部边框上的黑色像素则指示应该放置内容的位置。</p></blockquote><p>DP</p><ul><li><code>xhdpi</code>：2.0</li><li><code>hdpi</code>：1.5</li><li><code>mdpi</code>：1.0（基准）</li><li><code>ldpi</code>：0.75</li></ul><h5 id="ConstraintLayout"><a href="#ConstraintLayout" class="headerlink" title="ConstraintLayout"></a>ConstraintLayout</h5><blockquote><p>官网有详细介绍 <a href="https://developer.android.google.cn/training/constraint-layout/index.html" target="_blank" rel="noopener">https://developer.android.google.cn/training/constraint-layout/index.html</a></p></blockquote><ul><li><h6 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:id</span>=<span class="string">"@+id/my_toolbar"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:elevation</span>=<span class="string">"4dp"</span> 官方推荐</span></span><br><span class="line"><span class="tag">   <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.ActionBar"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><h6 id="SearchView"><a href="#SearchView" class="headerlink" title="SearchView"></a>SearchView</h6><blockquote><p>可以作为menu使用，也可以作为一个控件使用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_search"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:title</span>=<span class="string">"@string/action_search"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_search"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom|collapseActionView"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">app:actionViewClass</span>=<span class="string">"android.support.v7.widget.SearchView"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">    getMenuInflater().inflate(R.menu.main_activity_actions, menu);</span><br><span class="line"></span><br><span class="line">    MenuItem searchItem = menu.findItem(R.id.action_search);</span><br><span class="line">    SearchView searchView =</span><br><span class="line">            (SearchView) MenuItemCompat.getActionView(searchItem);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure the search info and add any event listeners...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以自定义各种状态下的icon</span></span><br><span class="line">actionView.setOnCloseListener();<span class="comment">//监听打开关闭</span></span><br><span class="line">actionView.setOnSuggestionListener();<span class="comment">//推荐列表        </span></span><br><span class="line">actionView.setOnQueryTextListener()<span class="comment">//类似文本间监听 返回false自动收起键盘</span></span><br></pre></td></tr></table></figure></li><li><h6 id="snackbar"><a href="#snackbar" class="headerlink" title="snackbar"></a><strong>snackbar</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Snackbar mySnackbar = Snackbar.make(findViewById(R.id.myCoordinatorLayout),</span><br><span class="line">R.string.email_archived,Snackbar.LENGTH_SHORT);</span><br><span class="line">mySnackbar.setAction(R.string.undo_string, <span class="keyword">new</span> MyUndoListener());</span><br><span class="line">mySnackbar.show();</span><br></pre></td></tr></table></figure></li><li><h5 id="管理系统界面"><a href="#管理系统界面" class="headerlink" title="管理系统界面"></a><strong>管理系统界面</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This example uses decor view, but you can use any visible view.</span></span><br><span class="line">View decorView = getActivity().getWindow().getDecorView();</span><br><span class="line"><span class="keyword">int</span> uiOptions = View.SYSTEM_UI_FLAG_LOW_PROFILE;</span><br><span class="line">decorView.setSystemUiVisibility(uiOptions);</span><br><span class="line"></span><br><span class="line">View decorView = getActivity().getWindow().getDecorView();</span><br><span class="line"><span class="comment">// Calling setSystemUiVisibility() with a value of 0 clears</span></span><br><span class="line"><span class="comment">// all flags.</span></span><br><span class="line">decorView.setSystemUiVisibility(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><h6 id="隐藏状态栏"><a href="#隐藏状态栏" class="headerlink" title="隐藏状态栏"></a>隐藏状态栏</h6><p>当失去焦点时会无效，比如触摸其他，后台重新进入界面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">View decorView = getWindow().getDecorView();</span><br><span class="line"><span class="comment">// Hide the status bar.</span></span><br><span class="line"><span class="keyword">int</span> uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN;</span><br><span class="line">decorView.setSystemUiVisibility(uiOptions);</span><br><span class="line"><span class="comment">// Remember that you should never show the action bar if the</span></span><br><span class="line"><span class="comment">// status bar is hidden, so hide that too if necessary.</span></span><br><span class="line">ActionBar actionBar = getActionBar();</span><br><span class="line">actionBar.hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">//配合setFitsSystemWindows()</span></span><br><span class="line">View.SYSTEM_UI_FLAG_FULLSCREEN | <span class="comment">//隐藏状态栏</span></span><br><span class="line">View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| <span class="comment">//内容填充状态栏</span></span><br><span class="line">View.SYSTEM_UI_FLAG_LAYOUT_STABLE| <span class="comment">//保持布局稳定</span></span><br><span class="line">View.SYSTEM_UI_FLAG_HIDE_NAVIGATION|<span class="comment">//隐藏导航虚拟按键</span></span><br><span class="line">View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION|<span class="comment">//内容填充导航虚拟按键</span></span><br><span class="line">View.SYSTEM_UI_FLAG_IMMERSIVE|<span class="comment">//沉浸式全屏</span></span><br><span class="line">View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY<span class="comment">//沉浸式全屏 划出状态栏，状态栏会自动消失</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理状态栏被显示的问题</span></span><br><span class="line">getWindow().getDecorView().setOnSystemUiVisibilityChangeListener</span><br><span class="line">onWindowFocusChanged()</span><br><span class="line">  </span><br><span class="line">mDecorView.setOnSystemUiVisibilityChangeListener(<span class="keyword">new</span> View.OnSystemUiVisibilityChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSystemUiVisibilityChange</span><span class="params">(<span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Note that system bars will only be "visible" if none of the</span></span><br><span class="line">                <span class="comment">// LOW_PROFILE, HIDE_NAVIGATION, or FULLSCREEN flags are set.</span></span><br><span class="line">                <span class="keyword">if</span> ((visibility &amp; View.SYSTEM_UI_FLAG_FULLSCREEN) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> The system bars are visible. Make any desired</span></span><br><span class="line">                    <span class="comment">// adjustments to your UI, such as showing the action bar or</span></span><br><span class="line">                    <span class="comment">// other navigational controls.</span></span><br><span class="line">                  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> The system bars are NOT visible. Make any desired</span></span><br><span class="line">                    <span class="comment">// adjustments to your UI, such as hiding the action bar or</span></span><br><span class="line">                    <span class="comment">// other navigational controls.</span></span><br><span class="line">                  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li><li><h5 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h5><p>定制状态栏</p><p><img src="https://developer.android.google.cn/training/material/images/ThemeColors.png" alt="状态栏"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当recycleview宽高不变时增删改查时提高性能</span></span><br><span class="line">mRecyclerView.setHasFixedSize(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>阴影</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Z = elevation + translationZ</span><br><span class="line"><span class="comment">//自定义阴影轮廓，因为实际轮廓都是正方形</span></span><br><span class="line">扩展 ViewOutlineProvider 类别。</span><br><span class="line">替代 getOutline() 方法。</span><br><span class="line">利用 View.setOutlineProvider() 方法向您的视图指定新的轮廓提供程序。</span><br></pre></td></tr></table></figure></li><li><h5 id="定制动画"><a href="#定制动画" class="headerlink" title="定制动画"></a><strong>定制动画</strong></h5><h6 id="触摸反馈（水波纹）"><a href="#触摸反馈（水波纹）" class="headerlink" title="触摸反馈（水波纹）"></a>触摸反馈（水波纹）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//矩形边框水波纹</span></span><br><span class="line">android:background=<span class="string">"?android:attr/selectableItemBackground"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无边框限制水波纹</span></span><br><span class="line">android:background=<span class="string">"?android:attr/selectableItemBackgroundBorderless"</span></span><br></pre></td></tr></table></figure><h6 id="自定义水波纹"><a href="#自定义水波纹" class="headerlink" title="自定义水波纹"></a>自定义水波纹</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Creates a new ripple drawable with the specified ripple color and</span></span><br><span class="line"><span class="comment"> * optional content and mask drawables.</span></span><br><span class="line"><span class="comment"> * 通过指定波纹的颜色、操作内容、蒙板边界 创建新的ripple drawable 。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> color The ripple color  波纹颜色 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content The content drawable, may be &#123;<span class="doctag">@code</span> null&#125; 指定content drawable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mask The mask drawable, may be &#123;<span class="doctag">@code</span> null&#125;  蒙板边界 、为null时，无边界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RippleDrawable</span><span class="params">(@NonNull ColorStateList color, @Nullable Drawable content,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable Drawable mask)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">RippleDrawable rd = <span class="keyword">new</span> RippleDrawable(</span><br><span class="line">ColorStateList.valueOf(</span><br><span class="line">      getResources().getColor(R.color.bg_gray)),</span><br><span class="line">      drawable, </span><br><span class="line">      getShape()</span><br><span class="line">      );</span><br><span class="line">tvColor.setBackgroundDrawable(rd);</span><br></pre></td></tr></table></figure><h6 id="揭露动画"><a href="#揭露动画" class="headerlink" title="揭露动画"></a>揭露动画</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create the animator for this view (the start radius is zero)</span></span><br><span class="line">Animator anim =</span><br><span class="line">    ViewAnimationUtils.createCircularReveal(myView, cx, cy, <span class="number">0</span>, finalRadius);</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 官网基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动画</title>
      <link href="/2018/01/07/%E5%8A%A8%E7%94%BB/"/>
      <url>/2018/01/07/%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="动画笔记"><a href="#动画笔记" class="headerlink" title="动画笔记"></a>动画笔记</h2><blockquote><p>作者：彭欢亮  </p><p>时间：2018/1/7 星期日 上午 10:10:10 </p></blockquote><p><strong>Android 动画的分类 ：</strong> </p><h3 id="一、帧动画"><a href="#一、帧动画" class="headerlink" title="一、帧动画"></a>一、帧动画</h3><blockquote><p>实现帧动画的两种方式 </p></blockquote><ol><li>利用xml形式实现</li></ol><blockquote><p>在drawable目录下创建一个animation-list xml 文件，</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;animation-list xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br><span class="line">&lt;item</span><br><span class="line">    android:drawable=<span class="string">"@mipmap/ic_setup"</span></span><br><span class="line">    android:duration=<span class="string">"500"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;item</span><br><span class="line">    android:drawable=<span class="string">"@mipmap/ic_should_get"</span></span><br><span class="line">    android:duration=<span class="string">"500"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;item</span><br><span class="line">    android:drawable=<span class="string">"@mipmap/ic_should_pay"</span></span><br><span class="line">    android:duration=<span class="string">"500"</span> /&gt;</span><br><span class="line">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure><blockquote><p>MainActivity代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ImageView imageView = (ImageView) findViewById(R.id.iv);</span><br><span class="line">imageView.setImageResource(R.drawable.animation_z);</span><br><span class="line">AnimationDrawable animation = (AnimationDrawable) imageView.getDrawable();</span><br><span class="line"><span class="comment">//        animation.start();</span></span><br><span class="line"><span class="comment">//将animationDrawable设置为imageView的背景</span></span><br><span class="line">imageView.setBackground(animation);</span><br></pre></td></tr></table></figure><ol><li>帧动画实现的第二种方式，利用代码实现 （使用场景：帧动画图片太多的情况下，建议使用此方法，不用在xml文件中一个个添加）</li></ol><blockquote><p>MainActivity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ImageView imageView = (ImageView) findViewById(R.id.iv)</span><br><span class="line">AnimationDrawable anim = <span class="keyword">new</span> AnimationDrawable();</span><br><span class="line">anim.addFrame(bit2dra(R.mipmap.ic_setup), <span class="number">200</span>);</span><br><span class="line">anim.addFrame(bit2dra(R.mipmap.ic_should_get), <span class="number">200</span>);</span><br><span class="line">anim.addFrame(bit2dra(R.mipmap.ic_should_pay), <span class="number">200</span>);</span><br><span class="line">anim.setOneShot(<span class="keyword">false</span>);</span><br><span class="line">imageView.setImageDrawable(anim);</span><br><span class="line"></span><br><span class="line"><span class="comment">//bit2dra 将bitmap转换为drawable对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Drawable <span class="title">bit2dra</span><span class="params">(<span class="keyword">int</span> sourceId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BitmapDrawable(getResources(), BitmapFactory.decodeResource(getResources(), sourceId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 anim.setOneShot(boolean arg) 表示 ：帧动画是否执行一次 true表示执行一次，false表示循环</p><h3 id="二、补间动画"><a href="#二、补间动画" class="headerlink" title="二、补间动画"></a>二、补间动画</h3><ul><li>补间动画的分类：</li></ul><p>补间动画又可以分为四种形式，分别是 alpha（淡入淡出），translate（位移），scale（缩放大小），rotate（旋转）。</p><blockquote><p>补间动画实现方式：</p></blockquote><ol><li>利用xml实现</li></ol><p>首先在res目录下创建一个anim文件夹，即我们xml实现补间动画都是在res/anim/目录下添加</p><p><strong>alpha_anim.xml动画实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;alpha xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">android:duration=<span class="string">"1000"</span></span><br><span class="line">android:fromAlpha=<span class="string">"1.0"</span></span><br><span class="line">android:interpolator=<span class="string">"@android:anim/accelerate_decelerate_interpolator"</span></span><br><span class="line">android:toAlpha=<span class="string">"0"</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>scale_anim.xml动画实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;scale xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">android:duration=<span class="string">"1000"</span></span><br><span class="line">android:fromXScale=<span class="string">"1.0"</span></span><br><span class="line">android:fromYScale=<span class="string">"1.0"</span></span><br><span class="line">android:pivotX=<span class="string">"50%"</span></span><br><span class="line">android:pivotY=<span class="string">"50%"</span></span><br><span class="line">android:toXScale=<span class="string">"0.0"</span></span><br><span class="line">android:toYScale=<span class="string">"0.0"</span> /&gt;</span><br></pre></td></tr></table></figure><p>集合动画</p><p><strong>set_anim.xml动画集合</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;set xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">android:duration=<span class="string">"持续时间"</span></span><br><span class="line">android:interpolator=<span class="string">"@[package:]anim/interpolator_resource"</span></span><br><span class="line">android:shareInterpolator=<span class="string">"boolean"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;alpha</span><br><span class="line">    android:fromAlpha=<span class="string">"float"</span></span><br><span class="line">    android:toAlpha=<span class="string">"float"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;scale</span><br><span class="line">    android:fromXScale=<span class="string">"float"</span></span><br><span class="line">    android:fromYScale=<span class="string">"float"</span></span><br><span class="line">    android:pivotX=<span class="string">"float"</span></span><br><span class="line">    android:pivotY=<span class="string">"float"</span></span><br><span class="line">    android:toXScale=<span class="string">"float"</span></span><br><span class="line">    android:toYScale=<span class="string">"float"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;translate</span><br><span class="line">    android:fromXDelta=<span class="string">"float"</span></span><br><span class="line">    android:fromYDelta=<span class="string">"float"</span></span><br><span class="line">    android:toXDelta=<span class="string">"float"</span></span><br><span class="line">    android:toYDelta=<span class="string">"float"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;rotate</span><br><span class="line">    android:fromDegrees=<span class="string">"float"</span></span><br><span class="line">    android:pivotX=<span class="string">"float"</span></span><br><span class="line">    android:pivotY=<span class="string">"float"</span></span><br><span class="line">    android:toDegrees=<span class="string">"float"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure><p><strong>MainActivity代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ImageView imageView = (ImageView) findViewById(R.id.iv);</span><br><span class="line">Animation animation = AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.scale_anim);</span><br><span class="line">imageView.startAnimation(animation);</span><br></pre></td></tr></table></figure><p>AnimationUtils是系统实现的动画工具类</p><p><img src="http://yychat.oss-cn-hangzhou.aliyuncs.com/images/table.png.png" alt></p><ol><li>补间动画通过代码实现</li></ol><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alpha</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">AlphaAnimation anim = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">anim.setDuration(<span class="number">1000</span>);</span><br><span class="line">v.startAnimation(anim);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">RotateAnimation anim = <span class="keyword">new</span> RotateAnimation(<span class="number">0.0f</span>, -<span class="number">360f</span>, v.getWidth()/<span class="number">2</span>, v.getHeight()/<span class="number">2</span>);</span><br><span class="line">anim.setDuration(<span class="number">1000</span>);</span><br><span class="line">v.startAnimation(anim);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">ScaleAnimation anim = <span class="keyword">new</span> ScaleAnimation(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, v.getWidth() / <span class="number">2</span>, v.getHeight() / <span class="number">2</span>);</span><br><span class="line">anim.setDuration(<span class="number">1000</span>);</span><br><span class="line">v.startAnimation(anim);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">translate</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">TranslateAnimation anim = <span class="keyword">new</span> TranslateAnimation(<span class="number">0.0f</span>, <span class="number">10.0f</span>, <span class="number">100f</span>, <span class="number">200f</span>);</span><br><span class="line">anim.setDuration(<span class="number">1000</span>);</span><br><span class="line">v.startAnimation(anim);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">AnimationSet anim = <span class="keyword">new</span> AnimationSet(<span class="keyword">this</span>, <span class="keyword">null</span>);</span><br><span class="line">AlphaAnimation alpha = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">RotateAnimation rotate = <span class="keyword">new</span> RotateAnimation(<span class="number">0.0f</span>, -<span class="number">360f</span>, v.getWidth()/<span class="number">2</span>, v.getHeight()/<span class="number">2</span>);</span><br><span class="line">anim.setDuration(<span class="number">1000</span>);</span><br><span class="line">anim.addAnimation(alpha);</span><br><span class="line">anim.addAnimation(rotate);</span><br><span class="line">v.startAnimation(anim);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、-Android-属性动画（Property-Animation）"><a href="#三、-Android-属性动画（Property-Animation）" class="headerlink" title="三、 Android 属性动画（Property Animation）"></a>三、 Android 属性动画（Property Animation）</h3><blockquote><p>属性动画相关的类：</p></blockquote><ol><li>ObjectAnimator (动画的执行类)</li><li>ValueAnimator (动画的执行类)</li><li>AnimatorSet (用于控制一组动画的执行：线性，一起，每个动画的先后执行等)</li><li>AnimatorInflater （ 用户加载属性动画的xml文件）</li><li>TypeEvaluator （类型估值，主要用于设置动画操作属性的值）</li><li>TimeInterpolator（时间插值） </li></ol><p><strong>属性动画与补间动画的区别：</strong></p><p>补间动画有一个最大的缺陷，就是它只是改变了View的显示效果而已，并不会真正的改变View的属性。场景：如果要改变view的宽度，补间动画实现不了，而属性动画可以。</p><p><strong>ObjectAnimator用法</strong></p><blockquote><p>ObjectAnimator提供了几个方法（ofInt、ofFloat、ofObject…），都是用来设置动画作用的元素、作用的属性、动画开始、结束、以及中间的任意个属性值。</p></blockquote><ul><li>translationX、translationY：这两个属性作为一种增量来控制着View对象从它布局容器的左上角坐标开始的位置。</li><li>rotation、rotationX、rotationY：这三个属性控制着View对象围绕它的支点进行2D和3D的旋转。</li><li>scaleX和scaleY：这两个属性控制着View对象围绕它的支点进行2D缩放。</li><li>pivotX和pivotY：这两个属性控制着View对象的支点位置，围绕这个支点进行旋转和缩放变换处理。默认情况下，该支点的位置就是View对象的中心点。</li><li>alpha：它表示View对象的alpha透明度。</li><li>x、y：这是两个简单的实用的属性，它描述了View对象在它的容器中最终的位置。</li><li>BackgroundColor：改变背景颜色</li></ul><blockquote><p>注意 缩放、反转等都有中心点或者轴，默认中心缩放，和中间对称线为反转线</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator.ofFloat(imageView,<span class="string">"rotationX"</span>,<span class="number">0.0f</span>,<span class="number">360</span>.f,<span class="number">90.0f</span>,<span class="number">360.0f</span>)</span><br><span class="line">           .setDuration(<span class="number">2000</span>)</span><br><span class="line">           .start();</span><br></pre></td></tr></table></figure><blockquote><p>PropertyValuesHolder：以先将动画属性和值暂时的存储起来，后一起执行，在有些时候可以使用替换掉AnimatorSet，减少代码量。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PropertyValuesHolder scaleX = PropertyValuesHolder.ofFloat(<span class="string">"scaleX"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5f</span>);</span><br><span class="line">   PropertyValuesHolder scaleY = PropertyValuesHolder.ofFloat(<span class="string">"scaleY"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5f</span>);</span><br><span class="line">   PropertyValuesHolder alpha = PropertyValuesHolder.ofFloat(<span class="string">"alpha"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5f</span>);</span><br><span class="line">   ObjectAnimator.ofPropertyValuesHolder(imageView,scaleX,scaleY,alpha)</span><br><span class="line">           .setDuration(<span class="number">2000</span>)</span><br><span class="line">           .start();</span><br></pre></td></tr></table></figure><p>ObjectAnimator简单的用法介绍完毕下面开始介绍ValueAnimator</p><p><strong>ValueAnimator介绍以及用法</strong></p><p>ValueAnimator是整个属性动画中最核心的一个类，前面介绍的ObjectAnimator也是继承自ValueAnimator。通过前面对ObjectAnimator的介绍，我们知道属性动画的实现机制是通过不断的地对View属性进行操作来实现的，而初始值和结束值之间的动画过渡就是由ValueAnimator这个类负责计算的。 </p><p>它的内部使用一种时间循环的机制来计算值与值之间的动画过渡，我们只需要将初始值和结束值提供给ValueAnimator，并且告诉它动画所需运行的时长，那么ValueAnimator就会自动帮助我们完成从初始值平滑过渡到结束值这样的效果。 </p><p>ValueAnimator本身不提供任何动画效果，它更像一个数值发生器，用来产生具有一定规律的数字，从而让调用者来控制动画的实现过程。通常情况下，在ValueAnimator的AnimatorUpdateListener中监听数值的变化，从而完成动画的切换。</p><blockquote><p>实现一个计时器效果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startTimeClock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class="number">0</span>, <span class="number">60</span>);</span><br><span class="line">valueAnimator.setDuration(<span class="number">1000</span> * <span class="number">60</span>);</span><br><span class="line">valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> time = (<span class="keyword">int</span>) valueAnimator.getAnimatedValue();</span><br><span class="line">        Log.e(TAG, <span class="string">"time="</span> + time);</span><br><span class="line">        mTextView.setText(time + <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">valueAnimator.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现一个物体自由落体</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verticalRun</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mHeight = getResources().getDisplayMetrics().heightPixels;</span><br><span class="line">    ValueAnimator animator = ValueAnimator.ofFloat(<span class="number">0</span>, mHeight - mBlueBall.getHeight());</span><br><span class="line">    animator.setTarget(mBlueBall);</span><br><span class="line">    animator.setDuration(<span class="number">1000</span>)</span><br><span class="line">            .start();</span><br><span class="line">    animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Float value = (Float) animation.getAnimatedValue();</span><br><span class="line">            Log.e(TAG, <span class="string">"onAnimationUpdate: value = "</span>+value );</span><br><span class="line"></span><br><span class="line">            mBlueBall.setTranslationY((Float) animation.getAnimatedValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动画的监听事件</strong></p><ol><li>animator.addListener(AnimatorListener、AnimatorUpdateListener 对象)</li></ol><blockquote><p>实现AnimatorLisener对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">animator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>实现AnimatorUpdateListener对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">animator.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>实现AnimatorLisener、AnimatorUpdateListener 区别在于：前面这个监听需要实现所有的方法，而后面这个只需要实现其中一种方法即可。</p></blockquote><ol><li>animator.addUpdateListener(AnimatorUpdateListener)</li></ol><p>上面有个计时器的例子，可以通过实现的方法onAnimationUpdate（ValueAnimator animation）拿到相应的对象</p><p><strong>AnimatorSet介绍与使用</strong></p><p>介绍：动画的集合，在补间动画中也有个一个动画的集合类AnimationSet,所以AnimatorSet同样的效果，可以帮助我们实现组合属性动画的效果。</p><p>AnimatorSet这个类提供了一个play()方法，如果我们向这个方法中传入一个Animator对象(ObjectAnimator或者ValueAnimator)将会返回一个AnimatorSet.Builder的实例，AnimatorSet.Builder中包含了以下四个方法：</p><ul><li>after(Animator anim) ： 将现有动画插入到传入的动画之后执行。</li><li>after(long delay)：将现有的动画延迟指定的毫秒后执行。</li><li>before(Animator anim)：将现有的动画插入到传入的动画之前执行。</li><li>with(Animator anim)：将现有的动画和传入的动画同时执行。</li></ul><p>例如我们想让一个TextView先从屏幕外移动到屏幕内，然后旋转360度，同时旋转过程中进行淡入淡出的效果，就可以写出如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">multiAnimator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 移动动画</span></span><br><span class="line">ObjectAnimator transAnimator = ObjectAnimator.ofFloat(mTextView, <span class="string">"translationX"</span>, -<span class="number">500f</span>, <span class="number">300f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转动画</span></span><br><span class="line">ObjectAnimator rotationAnimator = ObjectAnimator.ofFloat(mTextView, <span class="string">"rotation"</span>, <span class="number">0f</span>, <span class="number">360f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 淡入淡出</span></span><br><span class="line">ObjectAnimator alphaAnimator = ObjectAnimator.ofFloat(mTextView, <span class="string">"alpha"</span>, <span class="number">1f</span>, <span class="number">0f</span>, <span class="number">1f</span>);</span><br><span class="line"></span><br><span class="line">AnimatorSet animatorSet = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">animatorSet.play(rotationAnimator).with(alphaAnimator).after(transAnimator);</span><br><span class="line">animatorSet.setDuration(<span class="number">5000</span>);</span><br><span class="line">animatorSet.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</span><br><span class="line">animatorSet.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Animator监听器</strong></p><p>一个完整的动画具有start、Repeat、End、Cancel四个过程，Android提供了接口，让我们能够很容易监听到这些事件。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">animatorSet.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">    Log.e(TAG, <span class="string">"onAnimationStart"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">    Log.e(TAG, <span class="string">"onAnimationEnd"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">    Log.e(TAG, <span class="string">"onAnimationCancel"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">    Log.e(TAG, <span class="string">"onAnimationRepeat"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>使用xml文件创建属性动画</strong></p><ol><li>在res下创建一个animator的文件夹，即res/animator/.xml</li></ol><p><strong>例如：sacleX.xml</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;  </span><br><span class="line">&lt;objectAnimator xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line">android:duration=<span class="string">"1000"</span>  </span><br><span class="line">android:propertyName=<span class="string">"scaleX"</span>  </span><br><span class="line">android:valueFrom=<span class="string">"1.0"</span>  </span><br><span class="line">android:valueTo=<span class="string">"2.0"</span>  </span><br><span class="line">android:valueType=<span class="string">"floatType"</span> &gt;  </span><br><span class="line">&lt;/objectAnimator&gt;</span><br></pre></td></tr></table></figure><ol><li>使用AnimatorInflater来加载动画的资源文件，然后设置给相应的target即可。</li></ol><p><strong>MainActivity.java 代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadXml</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">Animator animator = AnimatorInflater.loadAnimator(<span class="keyword">this</span>, R.animator.scalex);</span><br><span class="line">animator.setTarget(mBlueBall);</span><br><span class="line">animator.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它类似一致，下面讲解利用xml实现属性动画集合</p><p><strong>animator_set</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;  </span><br><span class="line">&lt;set xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line">android:ordering=<span class="string">"together"</span> &gt;  </span><br><span class="line">  </span><br><span class="line">&lt;objectAnimator  </span><br><span class="line">    android:duration=<span class="string">"1000"</span>  </span><br><span class="line">    android:propertyName=<span class="string">"scaleX"</span>  </span><br><span class="line">    android:valueFrom=<span class="string">"1"</span>  </span><br><span class="line">    android:valueTo=<span class="string">"0.5"</span> &gt;  </span><br><span class="line">&lt;/objectAnimator&gt;  </span><br><span class="line">&lt;objectAnimator  </span><br><span class="line">    android:duration=<span class="string">"1000"</span>  </span><br><span class="line">    android:propertyName=<span class="string">"scaleY"</span>  </span><br><span class="line">    android:valueFrom=<span class="string">"1"</span>  </span><br><span class="line">    android:valueTo=<span class="string">"0.5"</span> &gt;  </span><br><span class="line">&lt;/objectAnimator&gt;  </span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure><p>使用set标签，有一个orderring属性设置为together,还有另一个值：sequentially（表示一个接一个执行)。</p><p><strong>MainActivity.java代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animator animator = AnimatorInflater.loadAnimator(<span class="keyword">this</span>, R.animator.scalex);</span><br><span class="line">    animator.setTarget(mBlueBall);</span><br><span class="line">    animator.start();</span><br></pre></td></tr></table></figure><p>代码同上。</p><p><strong>布局动画</strong></p><p>主要使用LayoutTransition为布局的容器设置动画，当容器中的视图层次发生变化时存在过渡的动画效果。（略）</p><p><strong>View的anim方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mBlueBall.animate().alpha(<span class="number">0</span>)</span><br><span class="line">            .y(<span class="number">200</span>)</span><br><span class="line">            .setDuration(<span class="number">3000</span>)</span><br><span class="line">            .withStartAction(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">"run: withStartAction"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .withEndAction(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">"run: withEndAction"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .start();</span><br></pre></td></tr></table></figure><blockquote><p><strong>属性动画原理</strong></p></blockquote><p>属性动画要求动画作用的对象提供该属性的get和set方法，属性动画根据你传递的该熟悉的初始值和最终值，以动画的效果多次去调用set方法，每次传递给set方法的值都不一样，确切来说是随着时间的推移，所传递的值越来越接近最终值。如果让属性动画生效，要同时满足两个条件：</p><ol><li>object必须要提供setXxx方法，如果动画的时候没有传递初始值，那么还要提供getXxx方法，因为系统要去拿xxx属性的初始值（如果这条不满足，程序直接Crash）</li><li>object的setXxx对属性xxx所做的改变必须能够通过某种方法反映出来，比如会带来ui的改变啥的（如果这条不满足，动画无效果但不会Crash）</li></ol><blockquote><p>属性动画为什么不能改变Button的宽高</p></blockquote><p>因为Button的内部并没有自己的getWith()、setWidth()方法，为什么这样说，button继承至TextView,持有TextView的get、set方法。所以我们对Button做宽高的改变是，没有 效果的。</p><ol><li><strong>解决方法 1 ： 用一个类来包装原始对象，间接为其提供get和set方法</strong></li></ol><blockquote><p>包装类如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> View mView;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewWrapper</span><span class="params">(View mView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mView = mView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">    mView.getLayoutParams().width = width;</span><br><span class="line">    mView.requestLayout();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mView.getLayoutParams().width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    mView.getLayoutParams().height = height;</span><br><span class="line">    mView.requestLayout();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mView.getLayoutParams().height;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MainActivity.java 代码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ViewWrapper viewWrapper = <span class="keyword">new</span> ViewWrapper(mBtn);</span><br><span class="line">PropertyValuesHolder proW = PropertyValuesHolder.ofInt(<span class="string">"width"</span>, width, width * <span class="number">2</span>);</span><br><span class="line">PropertyValuesHolder proH = PropertyValuesHolder.ofInt(<span class="string">"height"</span>, height, height * <span class="number">3</span>);</span><br><span class="line">ObjectAnimator objectAnimator = ObjectAnimator.ofPropertyValuesHolder(viewWrapper, proW, proH);</span><br><span class="line"></span><br><span class="line">objectAnimator.setDuration(<span class="number">3000</span>).start();</span><br></pre></td></tr></table></figure><ol><li><strong>解决方法2： 采用ValueAnimator，监听动画过程，自己实现属性的改变</strong></li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performAnimate</span><span class="params">(<span class="keyword">final</span> View mTarget, <span class="keyword">final</span> <span class="keyword">int</span> start, <span class="keyword">final</span> <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">        <span class="comment">//持有一个IntEvaluator对象，用来估值使用</span></span><br><span class="line">        <span class="keyword">private</span> IntEvaluator mEvaluator = <span class="keyword">new</span> IntEvaluator();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//获得当前动画的进度</span></span><br><span class="line">            <span class="keyword">int</span> value = (Integer) animation.getAnimatedValue();</span><br><span class="line">            Log.e(TAG, <span class="string">"onAnimationUpdate: curr value = "</span> + value);</span><br><span class="line">            <span class="keyword">float</span> fraction = value / <span class="number">100f</span>;</span><br><span class="line">            mTarget.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);</span><br><span class="line">            mTarget.requestLayout();</span><br><span class="line">            mTarget.invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    valueAnimator.setDuration(<span class="number">3000</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用ValueAnimator来做动画。ValueAnimator并不会实质的做什么。所以需要后面的AnimatorUpdateListener来做一些粗活儿。这里指定的从1到100也没有什么实质的作用。并不是把按钮的宽度从1变到100。后面的代码很清晰的表达了这一点。</li><li>据这个fraction的百分比来计算当前时间片对应的按钮宽度是多少。当前宽度 = 初始宽度 + fraction * （结束宽度 - 初始宽度）。</li></ul><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
